
Lab 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002bf8  08002bf8  00003bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c1c  08002c1c  000040d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002c1c  08002c1c  000040d4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002c1c  08002c1c  000040d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c1c  08002c1c  00003c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c20  08002c20  00003c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d4  20000000  08002c24  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  200000d4  08002cf8  000040d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08002cf8  000041a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000040d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fcd  00000000  00000000  000040fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d59  00000000  00000000  0000d0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0000ee28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e0  00000000  00000000  0000f898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018487  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d307  00000000  00000000  000284ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086895  00000000  00000000  00035806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc09b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a20  00000000  00000000  000bc0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000beb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d4 	.word	0x200000d4
 8000128:	00000000 	.word	0x00000000
 800012c:	08002be0 	.word	0x08002be0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d8 	.word	0x200000d8
 8000148:	08002be0 	.word	0x08002be0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2iz>:
 80004c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004c8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80004cc:	d215      	bcs.n	80004fa <__aeabi_d2iz+0x36>
 80004ce:	d511      	bpl.n	80004f4 <__aeabi_d2iz+0x30>
 80004d0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80004d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004d8:	d912      	bls.n	8000500 <__aeabi_d2iz+0x3c>
 80004da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004e6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ea:	fa23 f002 	lsr.w	r0, r3, r2
 80004ee:	bf18      	it	ne
 80004f0:	4240      	negne	r0, r0
 80004f2:	4770      	bx	lr
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	4770      	bx	lr
 80004fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004fe:	d105      	bne.n	800050c <__aeabi_d2iz+0x48>
 8000500:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000504:	bf08      	it	eq
 8000506:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800050a:	4770      	bx	lr
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <fsm_traffic_run>:
 */

#include "fsm_traffic.h"
#include "leds_display.h"

void fsm_traffic_run() {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af02      	add	r7, sp, #8
	switch(systemMode)
 800051a:	4b7a      	ldr	r3, [pc, #488]	@ (8000704 <fsm_traffic_run+0x1f0>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	3b01      	subs	r3, #1
 8000520:	2b03      	cmp	r3, #3
 8000522:	f200 80e3 	bhi.w	80006ec <fsm_traffic_run+0x1d8>
 8000526:	a201      	add	r2, pc, #4	@ (adr r2, 800052c <fsm_traffic_run+0x18>)
 8000528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052c:	0800053d 	.word	0x0800053d
 8000530:	08000681 	.word	0x08000681
 8000534:	080006a5 	.word	0x080006a5
 8000538:	080006c9 	.word	0x080006c9
	{
	// ---------------- AUTO MODE ----------------
	case INIT:
		if (start_new_loop == 1) {
 800053c:	4b72      	ldr	r3, [pc, #456]	@ (8000708 <fsm_traffic_run+0x1f4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d10f      	bne.n	8000564 <fsm_traffic_run+0x50>
			start_new_loop = 0;
 8000544:	4b70      	ldr	r3, [pc, #448]	@ (8000708 <fsm_traffic_run+0x1f4>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
			setTimer2(duration_buffer_2[2]);
 800054a:	4b70      	ldr	r3, [pc, #448]	@ (800070c <fsm_traffic_run+0x1f8>)
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fea4 	bl	800129c <setTimer2>

			countDownDur1 = duration_buffer_1[0];
 8000554:	4b6e      	ldr	r3, [pc, #440]	@ (8000710 <fsm_traffic_run+0x1fc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a6e      	ldr	r2, [pc, #440]	@ (8000714 <fsm_traffic_run+0x200>)
 800055a:	6013      	str	r3, [r2, #0]
			countDownDur2 = duration_buffer_2[2];
 800055c:	4b6b      	ldr	r3, [pc, #428]	@ (800070c <fsm_traffic_run+0x1f8>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	4a6d      	ldr	r2, [pc, #436]	@ (8000718 <fsm_traffic_run+0x204>)
 8000562:	6013      	str	r3, [r2, #0]
		}

		switch (trafficState)
 8000564:	4b6d      	ldr	r3, [pc, #436]	@ (800071c <fsm_traffic_run+0x208>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	3b0b      	subs	r3, #11
 800056a:	2b03      	cmp	r3, #3
 800056c:	f200 80c0 	bhi.w	80006f0 <fsm_traffic_run+0x1dc>
 8000570:	a201      	add	r2, pc, #4	@ (adr r2, 8000578 <fsm_traffic_run+0x64>)
 8000572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000576:	bf00      	nop
 8000578:	08000589 	.word	0x08000589
 800057c:	080005bf 	.word	0x080005bf
 8000580:	080005fd 	.word	0x080005fd
 8000584:	08000633 	.word	0x08000633
		{
		case RED1_GREEN2_AUTO:
			setTrafficLights(SET, RESET, RESET, RESET, RESET, SET);
 8000588:	2301      	movs	r3, #1
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	2300      	movs	r3, #0
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2300      	movs	r3, #0
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	2001      	movs	r0, #1
 8000598:	f000 fc58 	bl	8000e4c <setTrafficLights>
			if (timer2_flag == 1) {
 800059c:	4b60      	ldr	r3, [pc, #384]	@ (8000720 <fsm_traffic_run+0x20c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d165      	bne.n	8000670 <fsm_traffic_run+0x15c>
				// We dont need to update countDownDur1 here
				countDownDur2 = duration_buffer_2[1];
 80005a4:	4b59      	ldr	r3, [pc, #356]	@ (800070c <fsm_traffic_run+0x1f8>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	4a5b      	ldr	r2, [pc, #364]	@ (8000718 <fsm_traffic_run+0x204>)
 80005aa:	6013      	str	r3, [r2, #0]

				trafficState = RED1_YELLOW2_AUTO;
 80005ac:	4b5b      	ldr	r3, [pc, #364]	@ (800071c <fsm_traffic_run+0x208>)
 80005ae:	220c      	movs	r2, #12
 80005b0:	601a      	str	r2, [r3, #0]

				setTimer2(duration_buffer_2[1]);
 80005b2:	4b56      	ldr	r3, [pc, #344]	@ (800070c <fsm_traffic_run+0x1f8>)
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fe70 	bl	800129c <setTimer2>
			}
			break;
 80005bc:	e058      	b.n	8000670 <fsm_traffic_run+0x15c>

		case RED1_YELLOW2_AUTO:
			setTrafficLights(SET, RESET, RESET, RESET, SET, RESET);
 80005be:	2300      	movs	r3, #0
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2301      	movs	r3, #1
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	2200      	movs	r2, #0
 80005ca:	2100      	movs	r1, #0
 80005cc:	2001      	movs	r0, #1
 80005ce:	f000 fc3d 	bl	8000e4c <setTrafficLights>
			if (timer2_flag == 1) {
 80005d2:	4b53      	ldr	r3, [pc, #332]	@ (8000720 <fsm_traffic_run+0x20c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d14c      	bne.n	8000674 <fsm_traffic_run+0x160>
				countDownDur1 = duration_buffer_1[2];
 80005da:	4b4d      	ldr	r3, [pc, #308]	@ (8000710 <fsm_traffic_run+0x1fc>)
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	4a4d      	ldr	r2, [pc, #308]	@ (8000714 <fsm_traffic_run+0x200>)
 80005e0:	6013      	str	r3, [r2, #0]
				countDownDur2 = duration_buffer_2[0];
 80005e2:	4b4a      	ldr	r3, [pc, #296]	@ (800070c <fsm_traffic_run+0x1f8>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a4c      	ldr	r2, [pc, #304]	@ (8000718 <fsm_traffic_run+0x204>)
 80005e8:	6013      	str	r3, [r2, #0]

				trafficState = GREEN1_RED2_AUTO;
 80005ea:	4b4c      	ldr	r3, [pc, #304]	@ (800071c <fsm_traffic_run+0x208>)
 80005ec:	220d      	movs	r2, #13
 80005ee:	601a      	str	r2, [r3, #0]

				setTimer2(duration_buffer_1[2]);
 80005f0:	4b47      	ldr	r3, [pc, #284]	@ (8000710 <fsm_traffic_run+0x1fc>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fe51 	bl	800129c <setTimer2>
			}
			break;
 80005fa:	e03b      	b.n	8000674 <fsm_traffic_run+0x160>

		case GREEN1_RED2_AUTO:
			setTrafficLights(RESET, RESET, SET, SET, RESET, RESET);
 80005fc:	2300      	movs	r3, #0
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	2300      	movs	r3, #0
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2301      	movs	r3, #1
 8000606:	2201      	movs	r2, #1
 8000608:	2100      	movs	r1, #0
 800060a:	2000      	movs	r0, #0
 800060c:	f000 fc1e 	bl	8000e4c <setTrafficLights>
			if (timer2_flag == 1) {
 8000610:	4b43      	ldr	r3, [pc, #268]	@ (8000720 <fsm_traffic_run+0x20c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d12f      	bne.n	8000678 <fsm_traffic_run+0x164>
				countDownDur1 = duration_buffer_1[1];
 8000618:	4b3d      	ldr	r3, [pc, #244]	@ (8000710 <fsm_traffic_run+0x1fc>)
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	4a3d      	ldr	r2, [pc, #244]	@ (8000714 <fsm_traffic_run+0x200>)
 800061e:	6013      	str	r3, [r2, #0]
				// We dont need to update countDownDur2 here

				trafficState = YELLOW1_RED2_AUTO;
 8000620:	4b3e      	ldr	r3, [pc, #248]	@ (800071c <fsm_traffic_run+0x208>)
 8000622:	220e      	movs	r2, #14
 8000624:	601a      	str	r2, [r3, #0]

				setTimer2(duration_buffer_1[1]);
 8000626:	4b3a      	ldr	r3, [pc, #232]	@ (8000710 <fsm_traffic_run+0x1fc>)
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fe36 	bl	800129c <setTimer2>
			}
			break;
 8000630:	e022      	b.n	8000678 <fsm_traffic_run+0x164>

		case YELLOW1_RED2_AUTO:
			setTrafficLights(RESET, SET, RESET, SET, RESET, RESET);
 8000632:	2300      	movs	r3, #0
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2300      	movs	r3, #0
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2301      	movs	r3, #1
 800063c:	2200      	movs	r2, #0
 800063e:	2101      	movs	r1, #1
 8000640:	2000      	movs	r0, #0
 8000642:	f000 fc03 	bl	8000e4c <setTrafficLights>
			if (timer2_flag == 1) {
 8000646:	4b36      	ldr	r3, [pc, #216]	@ (8000720 <fsm_traffic_run+0x20c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d116      	bne.n	800067c <fsm_traffic_run+0x168>
				countDownDur1 = duration_buffer_1[0];
 800064e:	4b30      	ldr	r3, [pc, #192]	@ (8000710 <fsm_traffic_run+0x1fc>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a30      	ldr	r2, [pc, #192]	@ (8000714 <fsm_traffic_run+0x200>)
 8000654:	6013      	str	r3, [r2, #0]
				countDownDur2 = duration_buffer_2[2];
 8000656:	4b2d      	ldr	r3, [pc, #180]	@ (800070c <fsm_traffic_run+0x1f8>)
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	4a2f      	ldr	r2, [pc, #188]	@ (8000718 <fsm_traffic_run+0x204>)
 800065c:	6013      	str	r3, [r2, #0]

				trafficState = RED1_GREEN2_AUTO;
 800065e:	4b2f      	ldr	r3, [pc, #188]	@ (800071c <fsm_traffic_run+0x208>)
 8000660:	220b      	movs	r2, #11
 8000662:	601a      	str	r2, [r3, #0]

				setTimer2(duration_buffer_2[2]);
 8000664:	4b29      	ldr	r3, [pc, #164]	@ (800070c <fsm_traffic_run+0x1f8>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fe17 	bl	800129c <setTimer2>
			}
			break;
 800066e:	e005      	b.n	800067c <fsm_traffic_run+0x168>
			break;
 8000670:	bf00      	nop
 8000672:	e03d      	b.n	80006f0 <fsm_traffic_run+0x1dc>
			break;
 8000674:	bf00      	nop
 8000676:	e03b      	b.n	80006f0 <fsm_traffic_run+0x1dc>
			break;
 8000678:	bf00      	nop
 800067a:	e039      	b.n	80006f0 <fsm_traffic_run+0x1dc>
			break;
 800067c:	bf00      	nop
		}
		break;
 800067e:	e037      	b.n	80006f0 <fsm_traffic_run+0x1dc>

	// ---------------- SET MODES ----------------
	case SET_RED:
		clearTrafficLEDs();
 8000680:	f000 fc1e 	bl	8000ec0 <clearTrafficLEDs>

		if(timer0_flag == 1) {
 8000684:	4b27      	ldr	r3, [pc, #156]	@ (8000724 <fsm_traffic_run+0x210>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d133      	bne.n	80006f4 <fsm_traffic_run+0x1e0>
			HAL_GPIO_TogglePin(GPIOB, LED_RED_1_Pin);
 800068c:	2102      	movs	r1, #2
 800068e:	4826      	ldr	r0, [pc, #152]	@ (8000728 <fsm_traffic_run+0x214>)
 8000690:	f001 faa7 	bl	8001be2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, LED_RED_2_Pin);
 8000694:	2110      	movs	r1, #16
 8000696:	4824      	ldr	r0, [pc, #144]	@ (8000728 <fsm_traffic_run+0x214>)
 8000698:	f001 faa3 	bl	8001be2 <HAL_GPIO_TogglePin>

			setTimer0(250);
 800069c:	20fa      	movs	r0, #250	@ 0xfa
 800069e:	f000 fdc5 	bl	800122c <setTimer0>
		}

		break;
 80006a2:	e027      	b.n	80006f4 <fsm_traffic_run+0x1e0>

	case SET_YELLOW:
		clearTrafficLEDs();
 80006a4:	f000 fc0c 	bl	8000ec0 <clearTrafficLEDs>

		if(timer0_flag == 1) {
 80006a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000724 <fsm_traffic_run+0x210>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d123      	bne.n	80006f8 <fsm_traffic_run+0x1e4>
			HAL_GPIO_TogglePin(GPIOB, LED_YELLOW_1_Pin);
 80006b0:	2104      	movs	r1, #4
 80006b2:	481d      	ldr	r0, [pc, #116]	@ (8000728 <fsm_traffic_run+0x214>)
 80006b4:	f001 fa95 	bl	8001be2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, LED_YELLOW_2_Pin);
 80006b8:	2120      	movs	r1, #32
 80006ba:	481b      	ldr	r0, [pc, #108]	@ (8000728 <fsm_traffic_run+0x214>)
 80006bc:	f001 fa91 	bl	8001be2 <HAL_GPIO_TogglePin>

			setTimer0(250);
 80006c0:	20fa      	movs	r0, #250	@ 0xfa
 80006c2:	f000 fdb3 	bl	800122c <setTimer0>
		}

		break;
 80006c6:	e017      	b.n	80006f8 <fsm_traffic_run+0x1e4>

	case SET_GREEN:
		clearTrafficLEDs();
 80006c8:	f000 fbfa 	bl	8000ec0 <clearTrafficLEDs>

		if(timer0_flag == 1) {
 80006cc:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <fsm_traffic_run+0x210>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d113      	bne.n	80006fc <fsm_traffic_run+0x1e8>
			HAL_GPIO_TogglePin(GPIOB, LED_GREEN_1_Pin);
 80006d4:	2108      	movs	r1, #8
 80006d6:	4814      	ldr	r0, [pc, #80]	@ (8000728 <fsm_traffic_run+0x214>)
 80006d8:	f001 fa83 	bl	8001be2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, LED_GREEN_2_Pin);
 80006dc:	2140      	movs	r1, #64	@ 0x40
 80006de:	4812      	ldr	r0, [pc, #72]	@ (8000728 <fsm_traffic_run+0x214>)
 80006e0:	f001 fa7f 	bl	8001be2 <HAL_GPIO_TogglePin>

			setTimer0(250);
 80006e4:	20fa      	movs	r0, #250	@ 0xfa
 80006e6:	f000 fda1 	bl	800122c <setTimer0>
		}

		break;
 80006ea:	e007      	b.n	80006fc <fsm_traffic_run+0x1e8>

	default:
		break;
 80006ec:	bf00      	nop
 80006ee:	e006      	b.n	80006fe <fsm_traffic_run+0x1ea>
		break;
 80006f0:	bf00      	nop
 80006f2:	e004      	b.n	80006fe <fsm_traffic_run+0x1ea>
		break;
 80006f4:	bf00      	nop
 80006f6:	e002      	b.n	80006fe <fsm_traffic_run+0x1ea>
		break;
 80006f8:	bf00      	nop
 80006fa:	e000      	b.n	80006fe <fsm_traffic_run+0x1ea>
		break;
 80006fc:	bf00      	nop
	}
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200000f0 	.word	0x200000f0
 8000708:	20000000 	.word	0x20000000
 800070c:	2000001c 	.word	0x2000001c
 8000710:	20000010 	.word	0x20000010
 8000714:	200000f8 	.word	0x200000f8
 8000718:	200000fc 	.word	0x200000fc
 800071c:	200000f4 	.word	0x200000f4
 8000720:	20000180 	.word	0x20000180
 8000724:	20000178 	.word	0x20000178
 8000728:	40010c00 	.word	0x40010c00

0800072c <fsm_for_input_processing>:
#include "global.h"

enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND} ;
enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED};

void fsm_for_input_processing(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
	for(int button_index = 0; button_index < N0_OF_BUTTONS; button_index++) {
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	e114      	b.n	8000962 <fsm_for_input_processing+0x236>
		switch(buttonState[button_index])
 8000738:	4a8e      	ldr	r2, [pc, #568]	@ (8000974 <fsm_for_input_processing+0x248>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b02      	cmp	r3, #2
 8000742:	f000 80b6 	beq.w	80008b2 <fsm_for_input_processing+0x186>
 8000746:	2b02      	cmp	r3, #2
 8000748:	f300 8108 	bgt.w	800095c <fsm_for_input_processing+0x230>
 800074c:	2b00      	cmp	r3, #0
 800074e:	d003      	beq.n	8000758 <fsm_for_input_processing+0x2c>
 8000750:	2b01      	cmp	r3, #1
 8000752:	f000 8092 	beq.w	800087a <fsm_for_input_processing+0x14e>
 8000756:	e101      	b.n	800095c <fsm_for_input_processing+0x230>
		{
		case BUTTON_RELEASED:
			if(is_button_pressed(button_index)) {
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f9e5 	bl	8000b2c <is_button_pressed>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	f000 80f4 	beq.w	8000952 <fsm_for_input_processing+0x226>
				buttonState[button_index] = BUTTON_PRESSED;
 800076a:	4a82      	ldr	r2, [pc, #520]	@ (8000974 <fsm_for_input_processing+0x248>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4413      	add	r3, r2
 8000770:	2201      	movs	r2, #1
 8000772:	701a      	strb	r2, [r3, #0]

				if(button_index == 0) {
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d107      	bne.n	800078a <fsm_for_input_processing+0x5e>
					systemMode++;
 800077a:	4b7f      	ldr	r3, [pc, #508]	@ (8000978 <fsm_for_input_processing+0x24c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	3301      	adds	r3, #1
 8000780:	4a7d      	ldr	r2, [pc, #500]	@ (8000978 <fsm_for_input_processing+0x24c>)
 8000782:	6013      	str	r3, [r2, #0]
//					is_first_time = 1;
					main2temp();
 8000784:	f000 f920 	bl	80009c8 <main2temp>
 8000788:	e069      	b.n	800085e <fsm_for_input_processing+0x132>
				}

				else if(button_index == 1 && systemMode != INIT) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d123      	bne.n	80007d8 <fsm_for_input_processing+0xac>
 8000790:	4b79      	ldr	r3, [pc, #484]	@ (8000978 <fsm_for_input_processing+0x24c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d01f      	beq.n	80007d8 <fsm_for_input_processing+0xac>
//					if(is_first_time == 1) {
//						is_first_time = 0;
//						main2temp();
//					}

					duration_buffer_temp[systemMode - 2] += 1000;
 8000798:	4b77      	ldr	r3, [pc, #476]	@ (8000978 <fsm_for_input_processing+0x24c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3b02      	subs	r3, #2
 800079e:	4a77      	ldr	r2, [pc, #476]	@ (800097c <fsm_for_input_processing+0x250>)
 80007a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007a4:	4b74      	ldr	r3, [pc, #464]	@ (8000978 <fsm_for_input_processing+0x24c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3b02      	subs	r3, #2
 80007aa:	f502 727a 	add.w	r2, r2, #1000	@ 0x3e8
 80007ae:	4973      	ldr	r1, [pc, #460]	@ (800097c <fsm_for_input_processing+0x250>)
 80007b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

					if (duration_buffer_temp[systemMode - 2] > 99000) {
 80007b4:	4b70      	ldr	r3, [pc, #448]	@ (8000978 <fsm_for_input_processing+0x24c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	3b02      	subs	r3, #2
 80007ba:	4a70      	ldr	r2, [pc, #448]	@ (800097c <fsm_for_input_processing+0x250>)
 80007bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c0:	4a6f      	ldr	r2, [pc, #444]	@ (8000980 <fsm_for_input_processing+0x254>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	dd4b      	ble.n	800085e <fsm_for_input_processing+0x132>
						duration_buffer_temp[systemMode - 2] = 1000;
 80007c6:	4b6c      	ldr	r3, [pc, #432]	@ (8000978 <fsm_for_input_processing+0x24c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	3b02      	subs	r3, #2
 80007cc:	4a6b      	ldr	r2, [pc, #428]	@ (800097c <fsm_for_input_processing+0x250>)
 80007ce:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (duration_buffer_temp[systemMode - 2] > 99000) {
 80007d6:	e042      	b.n	800085e <fsm_for_input_processing+0x132>
					}
				}

				else if(button_index == 2) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b02      	cmp	r3, #2
 80007dc:	d13f      	bne.n	800085e <fsm_for_input_processing+0x132>
					temp2main();
 80007de:	f000 f8dd 	bl	800099c <temp2main>

					duration_buffer_2[2] = round(duration_buffer_1[0] * 7 / 10);
 80007e2:	4b68      	ldr	r3, [pc, #416]	@ (8000984 <fsm_for_input_processing+0x258>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	4613      	mov	r3, r2
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	1a9b      	subs	r3, r3, r2
 80007ec:	4a66      	ldr	r2, [pc, #408]	@ (8000988 <fsm_for_input_processing+0x25c>)
 80007ee:	fb82 1203 	smull	r1, r2, r2, r3
 80007f2:	1092      	asrs	r2, r2, #2
 80007f4:	17db      	asrs	r3, r3, #31
 80007f6:	1ad3      	subs	r3, r2, r3
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fdf9 	bl	80003f0 <__aeabi_i2d>
 80007fe:	4602      	mov	r2, r0
 8000800:	460b      	mov	r3, r1
 8000802:	4610      	mov	r0, r2
 8000804:	4619      	mov	r1, r3
 8000806:	f7ff fe5d 	bl	80004c4 <__aeabi_d2iz>
 800080a:	4603      	mov	r3, r0
 800080c:	4a5f      	ldr	r2, [pc, #380]	@ (800098c <fsm_for_input_processing+0x260>)
 800080e:	6093      	str	r3, [r2, #8]
					duration_buffer_2[1] = round(duration_buffer_1[0] * 3 / 10);
 8000810:	4b5c      	ldr	r3, [pc, #368]	@ (8000984 <fsm_for_input_processing+0x258>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	4a5b      	ldr	r2, [pc, #364]	@ (8000988 <fsm_for_input_processing+0x25c>)
 800081c:	fb82 1203 	smull	r1, r2, r2, r3
 8000820:	1092      	asrs	r2, r2, #2
 8000822:	17db      	asrs	r3, r3, #31
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fde2 	bl	80003f0 <__aeabi_i2d>
 800082c:	4602      	mov	r2, r0
 800082e:	460b      	mov	r3, r1
 8000830:	4610      	mov	r0, r2
 8000832:	4619      	mov	r1, r3
 8000834:	f7ff fe46 	bl	80004c4 <__aeabi_d2iz>
 8000838:	4603      	mov	r3, r0
 800083a:	4a54      	ldr	r2, [pc, #336]	@ (800098c <fsm_for_input_processing+0x260>)
 800083c:	6053      	str	r3, [r2, #4]
					duration_buffer_2[0] = duration_buffer_1[1] + duration_buffer_1[2];
 800083e:	4b51      	ldr	r3, [pc, #324]	@ (8000984 <fsm_for_input_processing+0x258>)
 8000840:	685a      	ldr	r2, [r3, #4]
 8000842:	4b50      	ldr	r3, [pc, #320]	@ (8000984 <fsm_for_input_processing+0x258>)
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	4413      	add	r3, r2
 8000848:	4a50      	ldr	r2, [pc, #320]	@ (800098c <fsm_for_input_processing+0x260>)
 800084a:	6013      	str	r3, [r2, #0]

					trafficState = RED1_GREEN2_AUTO;
 800084c:	4b50      	ldr	r3, [pc, #320]	@ (8000990 <fsm_for_input_processing+0x264>)
 800084e:	220b      	movs	r2, #11
 8000850:	601a      	str	r2, [r3, #0]
					start_new_loop = 1;
 8000852:	4b50      	ldr	r3, [pc, #320]	@ (8000994 <fsm_for_input_processing+0x268>)
 8000854:	2201      	movs	r2, #1
 8000856:	601a      	str	r2, [r3, #0]
					systemMode = INIT;
 8000858:	4b47      	ldr	r3, [pc, #284]	@ (8000978 <fsm_for_input_processing+0x24c>)
 800085a:	2201      	movs	r2, #1
 800085c:	601a      	str	r2, [r3, #0]
				}

				if (systemMode > SET_GREEN ) {
 800085e:	4b46      	ldr	r3, [pc, #280]	@ (8000978 <fsm_for_input_processing+0x24c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b04      	cmp	r3, #4
 8000864:	dd75      	ble.n	8000952 <fsm_for_input_processing+0x226>
					trafficState = RED1_GREEN2_AUTO;
 8000866:	4b4a      	ldr	r3, [pc, #296]	@ (8000990 <fsm_for_input_processing+0x264>)
 8000868:	220b      	movs	r2, #11
 800086a:	601a      	str	r2, [r3, #0]
					start_new_loop = 1;
 800086c:	4b49      	ldr	r3, [pc, #292]	@ (8000994 <fsm_for_input_processing+0x268>)
 800086e:	2201      	movs	r2, #1
 8000870:	601a      	str	r2, [r3, #0]
					systemMode = INIT;
 8000872:	4b41      	ldr	r3, [pc, #260]	@ (8000978 <fsm_for_input_processing+0x24c>)
 8000874:	2201      	movs	r2, #1
 8000876:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 8000878:	e06b      	b.n	8000952 <fsm_for_input_processing+0x226>

		case BUTTON_PRESSED:
			if(!is_button_pressed(button_index)) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f954 	bl	8000b2c <is_button_pressed>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d105      	bne.n	8000896 <fsm_for_input_processing+0x16a>
				buttonState[button_index] = BUTTON_RELEASED;
 800088a:	4a3a      	ldr	r2, [pc, #232]	@ (8000974 <fsm_for_input_processing+0x248>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4413      	add	r3, r2
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
			else {
				if(is_button_pressed_1s(button_index)) {
					buttonState[button_index] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
				}
			}
			break;
 8000894:	e05f      	b.n	8000956 <fsm_for_input_processing+0x22a>
				if(is_button_pressed_1s(button_index)) {
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f960 	bl	8000b60 <is_button_pressed_1s>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d057      	beq.n	8000956 <fsm_for_input_processing+0x22a>
					buttonState[button_index] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80008a6:	4a33      	ldr	r2, [pc, #204]	@ (8000974 <fsm_for_input_processing+0x248>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4413      	add	r3, r2
 80008ac:	2202      	movs	r2, #2
 80008ae:	701a      	strb	r2, [r3, #0]
			break;
 80008b0:	e051      	b.n	8000956 <fsm_for_input_processing+0x22a>

		case BUTTON_PRESSED_MORE_THAN_1_SECOND:
			if(!is_button_pressed(button_index)) {
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f938 	bl	8000b2c <is_button_pressed>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d105      	bne.n	80008ce <fsm_for_input_processing+0x1a2>
				buttonState[button_index] = BUTTON_RELEASED;
 80008c2:	4a2c      	ldr	r2, [pc, #176]	@ (8000974 <fsm_for_input_processing+0x248>)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4413      	add	r3, r2
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
					start_new_loop = 1;
					systemMode = INIT;
				}
			}

			break;
 80008cc:	e045      	b.n	800095a <fsm_for_input_processing+0x22e>
				if(flagForLongPress[button_index] == 1) {
 80008ce:	4a32      	ldr	r2, [pc, #200]	@ (8000998 <fsm_for_input_processing+0x26c>)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4413      	add	r3, r2
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d12d      	bne.n	8000936 <fsm_for_input_processing+0x20a>
					if(button_index == 0) {
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d025      	beq.n	800092c <fsm_for_input_processing+0x200>
					else if(button_index == 1 && systemMode != INIT) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d122      	bne.n	800092c <fsm_for_input_processing+0x200>
 80008e6:	4b24      	ldr	r3, [pc, #144]	@ (8000978 <fsm_for_input_processing+0x24c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d01e      	beq.n	800092c <fsm_for_input_processing+0x200>
						duration_buffer_temp[systemMode - 2] += 1000;
 80008ee:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <fsm_for_input_processing+0x24c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3b02      	subs	r3, #2
 80008f4:	4a21      	ldr	r2, [pc, #132]	@ (800097c <fsm_for_input_processing+0x250>)
 80008f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <fsm_for_input_processing+0x24c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	3b02      	subs	r3, #2
 8000900:	f502 727a 	add.w	r2, r2, #1000	@ 0x3e8
 8000904:	491d      	ldr	r1, [pc, #116]	@ (800097c <fsm_for_input_processing+0x250>)
 8000906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (duration_buffer_temp[systemMode - 2] > 99000) {
 800090a:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <fsm_for_input_processing+0x24c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	3b02      	subs	r3, #2
 8000910:	4a1a      	ldr	r2, [pc, #104]	@ (800097c <fsm_for_input_processing+0x250>)
 8000912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000916:	4a1a      	ldr	r2, [pc, #104]	@ (8000980 <fsm_for_input_processing+0x254>)
 8000918:	4293      	cmp	r3, r2
 800091a:	dd07      	ble.n	800092c <fsm_for_input_processing+0x200>
							duration_buffer_temp[systemMode - 2] = 1000;
 800091c:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <fsm_for_input_processing+0x24c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	3b02      	subs	r3, #2
 8000922:	4a16      	ldr	r2, [pc, #88]	@ (800097c <fsm_for_input_processing+0x250>)
 8000924:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000928:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					flagForLongPress[button_index] = 0;
 800092c:	4a1a      	ldr	r2, [pc, #104]	@ (8000998 <fsm_for_input_processing+0x26c>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
				if(systemMode > SET_GREEN) {
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <fsm_for_input_processing+0x24c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b04      	cmp	r3, #4
 800093c:	dd0d      	ble.n	800095a <fsm_for_input_processing+0x22e>
					trafficState = RED1_GREEN2_AUTO;
 800093e:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <fsm_for_input_processing+0x264>)
 8000940:	220b      	movs	r2, #11
 8000942:	601a      	str	r2, [r3, #0]
					start_new_loop = 1;
 8000944:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <fsm_for_input_processing+0x268>)
 8000946:	2201      	movs	r2, #1
 8000948:	601a      	str	r2, [r3, #0]
					systemMode = INIT;
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <fsm_for_input_processing+0x24c>)
 800094c:	2201      	movs	r2, #1
 800094e:	601a      	str	r2, [r3, #0]
			break;
 8000950:	e003      	b.n	800095a <fsm_for_input_processing+0x22e>
			break;
 8000952:	bf00      	nop
 8000954:	e002      	b.n	800095c <fsm_for_input_processing+0x230>
			break;
 8000956:	bf00      	nop
 8000958:	e000      	b.n	800095c <fsm_for_input_processing+0x230>
			break;
 800095a:	bf00      	nop
	for(int button_index = 0; button_index < N0_OF_BUTTONS; button_index++) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3301      	adds	r3, #1
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b02      	cmp	r3, #2
 8000966:	f77f aee7 	ble.w	8000738 <fsm_for_input_processing+0xc>
		}
	}
}
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000100 	.word	0x20000100
 8000978:	200000f0 	.word	0x200000f0
 800097c:	20000004 	.word	0x20000004
 8000980:	000182b8 	.word	0x000182b8
 8000984:	20000010 	.word	0x20000010
 8000988:	66666667 	.word	0x66666667
 800098c:	2000001c 	.word	0x2000001c
 8000990:	200000f4 	.word	0x200000f4
 8000994:	20000000 	.word	0x20000000
 8000998:	20000118 	.word	0x20000118

0800099c <temp2main>:

void temp2main()
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
	duration_buffer_1[0] = duration_buffer_temp[0];
 80009a0:	4b07      	ldr	r3, [pc, #28]	@ (80009c0 <temp2main+0x24>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a07      	ldr	r2, [pc, #28]	@ (80009c4 <temp2main+0x28>)
 80009a6:	6013      	str	r3, [r2, #0]
	duration_buffer_1[1] = duration_buffer_temp[1];
 80009a8:	4b05      	ldr	r3, [pc, #20]	@ (80009c0 <temp2main+0x24>)
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	4a05      	ldr	r2, [pc, #20]	@ (80009c4 <temp2main+0x28>)
 80009ae:	6053      	str	r3, [r2, #4]
	duration_buffer_1[2] = duration_buffer_temp[2];
 80009b0:	4b03      	ldr	r3, [pc, #12]	@ (80009c0 <temp2main+0x24>)
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	4a03      	ldr	r2, [pc, #12]	@ (80009c4 <temp2main+0x28>)
 80009b6:	6093      	str	r3, [r2, #8]
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	20000004 	.word	0x20000004
 80009c4:	20000010 	.word	0x20000010

080009c8 <main2temp>:

void main2temp()
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
	duration_buffer_temp[0] = duration_buffer_1[0];
 80009cc:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <main2temp+0x24>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a07      	ldr	r2, [pc, #28]	@ (80009f0 <main2temp+0x28>)
 80009d2:	6013      	str	r3, [r2, #0]
	duration_buffer_temp[1] = duration_buffer_1[1];
 80009d4:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <main2temp+0x24>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	4a05      	ldr	r2, [pc, #20]	@ (80009f0 <main2temp+0x28>)
 80009da:	6053      	str	r3, [r2, #4]
	duration_buffer_temp[2] = duration_buffer_1[2];
 80009dc:	4b03      	ldr	r3, [pc, #12]	@ (80009ec <main2temp+0x24>)
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	4a03      	ldr	r2, [pc, #12]	@ (80009f0 <main2temp+0x28>)
 80009e2:	6093      	str	r3, [r2, #8]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	20000010 	.word	0x20000010
 80009f0:	20000004 	.word	0x20000004

080009f4 <button_reading>:

int BUTTON_Pins[N0_OF_BUTTONS] = {
		BUTTON_1_Pin, BUTTON_2_Pin, BUTTON_3_Pin
};

void button_reading(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
//	for(char i = 0; i < N0_OF_BUTTONS; i++) {
	for(int i = 0; i < N0_OF_BUTTONS; i++) {
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	e07b      	b.n	8000af8 <button_reading+0x104>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000a00:	4a41      	ldr	r2, [pc, #260]	@ (8000b08 <button_reading+0x114>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	7819      	ldrb	r1, [r3, #0]
 8000a08:	4a40      	ldr	r2, [pc, #256]	@ (8000b0c <button_reading+0x118>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	460a      	mov	r2, r1
 8000a10:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOA, BUTTON_Pins[i]);
 8000a12:	4a3f      	ldr	r2, [pc, #252]	@ (8000b10 <button_reading+0x11c>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	483d      	ldr	r0, [pc, #244]	@ (8000b14 <button_reading+0x120>)
 8000a20:	f001 f8b0 	bl	8001b84 <HAL_GPIO_ReadPin>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4619      	mov	r1, r3
 8000a28:	4a37      	ldr	r2, [pc, #220]	@ (8000b08 <button_reading+0x114>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	460a      	mov	r2, r1
 8000a30:	701a      	strb	r2, [r3, #0]

		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 8000a32:	4a35      	ldr	r2, [pc, #212]	@ (8000b08 <button_reading+0x114>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4413      	add	r3, r2
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	4934      	ldr	r1, [pc, #208]	@ (8000b0c <button_reading+0x118>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	440b      	add	r3, r1
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d108      	bne.n	8000a58 <button_reading+0x64>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000a46:	4a30      	ldr	r2, [pc, #192]	@ (8000b08 <button_reading+0x114>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	7819      	ldrb	r1, [r3, #0]
 8000a4e:	4a32      	ldr	r2, [pc, #200]	@ (8000b18 <button_reading+0x124>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4413      	add	r3, r2
 8000a54:	460a      	mov	r2, r1
 8000a56:	701a      	strb	r2, [r3, #0]
		}

		if(buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000a58:	4a2f      	ldr	r2, [pc, #188]	@ (8000b18 <button_reading+0x124>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d132      	bne.n	8000aca <button_reading+0xd6>
			// If a button is pressed, we start counting
			if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000a64:	4a2d      	ldr	r2, [pc, #180]	@ (8000b1c <button_reading+0x128>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a70:	d20a      	bcs.n	8000a88 <button_reading+0x94>
				counterForButtonPress1s[i] += TIMER_CYCLE;
 8000a72:	4a2a      	ldr	r2, [pc, #168]	@ (8000b1c <button_reading+0x128>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a7a:	330a      	adds	r3, #10
 8000a7c:	b299      	uxth	r1, r3
 8000a7e:	4a27      	ldr	r2, [pc, #156]	@ (8000b1c <button_reading+0x128>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000a86:	e034      	b.n	8000af2 <button_reading+0xfe>
			}
			else {
				// The flag is turned on when 1 second has passed since the button is pressed.
				flagForButtonPress1s[i] = 1;
 8000a88:	4a25      	ldr	r2, [pc, #148]	@ (8000b20 <button_reading+0x12c>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
				counterAfterLongPress[i] += TIMER_CYCLE;
 8000a92:	4a24      	ldr	r2, [pc, #144]	@ (8000b24 <button_reading+0x130>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a9a:	330a      	adds	r3, #10
 8000a9c:	b299      	uxth	r1, r3
 8000a9e:	4a21      	ldr	r2, [pc, #132]	@ (8000b24 <button_reading+0x130>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				if (counterAfterLongPress[i] >= 500) {
 8000aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b24 <button_reading+0x130>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ab2:	d31e      	bcc.n	8000af2 <button_reading+0xfe>
					counterAfterLongPress[i] = 0;
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b24 <button_reading+0x130>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForLongPress[i] = 1;
 8000abe:	4a1a      	ldr	r2, [pc, #104]	@ (8000b28 <button_reading+0x134>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
 8000ac8:	e013      	b.n	8000af2 <button_reading+0xfe>
				}
			}
		}
		else {
			flagForButtonPress1s[i] = 0;
 8000aca:	4a15      	ldr	r2, [pc, #84]	@ (8000b20 <button_reading+0x12c>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4413      	add	r3, r2
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
			counterForButtonPress1s[i] = 0;
 8000ad4:	4a11      	ldr	r2, [pc, #68]	@ (8000b1c <button_reading+0x128>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2100      	movs	r1, #0
 8000ada:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			flagForLongPress[i] = 0;
 8000ade:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <button_reading+0x134>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
			counterAfterLongPress[i] = 0;
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	@ (8000b24 <button_reading+0x130>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2100      	movs	r1, #0
 8000aee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < N0_OF_BUTTONS; i++) {
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3301      	adds	r3, #1
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	dd80      	ble.n	8000a00 <button_reading+0xc>
		}
	}
}
 8000afe:	bf00      	nop
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	2000002c 	.word	0x2000002c
 8000b0c:	20000030 	.word	0x20000030
 8000b10:	20000034 	.word	0x20000034
 8000b14:	40010800 	.word	0x40010800
 8000b18:	20000028 	.word	0x20000028
 8000b1c:	20000108 	.word	0x20000108
 8000b20:	20000104 	.word	0x20000104
 8000b24:	20000110 	.word	0x20000110
 8000b28:	20000118 	.word	0x20000118

08000b2c <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d901      	bls.n	8000b40 <is_button_pressed+0x14>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	e007      	b.n	8000b50 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	4a06      	ldr	r2, [pc, #24]	@ (8000b5c <is_button_pressed+0x30>)
 8000b44:	5cd3      	ldrb	r3, [r2, r3]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	bf0c      	ite	eq
 8000b4a:	2301      	moveq	r3, #1
 8000b4c:	2300      	movne	r3, #0
 8000b4e:	b2db      	uxtb	r3, r3
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000028 	.word	0x20000028

08000b60 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index) {
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d901      	bls.n	8000b74 <is_button_pressed_1s+0x14>
 8000b70:	23ff      	movs	r3, #255	@ 0xff
 8000b72:	e007      	b.n	8000b84 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4a06      	ldr	r2, [pc, #24]	@ (8000b90 <is_button_pressed_1s+0x30>)
 8000b78:	5cd3      	ldrb	r3, [r2, r3]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	bf0c      	ite	eq
 8000b7e:	2301      	moveq	r3, #1
 8000b80:	2300      	movne	r3, #0
 8000b82:	b2db      	uxtb	r3, r3
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000104 	.word	0x20000104

08000b94 <updateModeToBuffer>:
	LED_RED_1_Pin, LED_YELLOW_1_Pin, LED_GREEN_1_Pin,
	LED_RED_2_Pin, LED_YELLOW_2_Pin, LED_GREEN_2_Pin
};

void updateModeToBuffer(int mode)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	led_buffer[2] = mode / 10;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd4 <updateModeToBuffer+0x40>)
 8000ba0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba4:	1092      	asrs	r2, r2, #2
 8000ba6:	17db      	asrs	r3, r3, #31
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd8 <updateModeToBuffer+0x44>)
 8000bac:	6093      	str	r3, [r2, #8]
	led_buffer[3] = mode % 10;
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <updateModeToBuffer+0x40>)
 8000bb2:	fb83 2301 	smull	r2, r3, r3, r1
 8000bb6:	109a      	asrs	r2, r3, #2
 8000bb8:	17cb      	asrs	r3, r1, #31
 8000bba:	1ad2      	subs	r2, r2, r3
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	1aca      	subs	r2, r1, r3
 8000bc6:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <updateModeToBuffer+0x44>)
 8000bc8:	60da      	str	r2, [r3, #12]
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	66666667 	.word	0x66666667
 8000bd8:	20000120 	.word	0x20000120

08000bdc <updateSetDuration>:

void updateSetDuration(int led_duration)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	led_buffer[0] = led_duration / 10;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a0d      	ldr	r2, [pc, #52]	@ (8000c1c <updateSetDuration+0x40>)
 8000be8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bec:	1092      	asrs	r2, r2, #2
 8000bee:	17db      	asrs	r3, r3, #31
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	@ (8000c20 <updateSetDuration+0x44>)
 8000bf4:	6013      	str	r3, [r2, #0]
	led_buffer[1] = led_duration % 10;
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <updateSetDuration+0x40>)
 8000bfa:	fb83 2301 	smull	r2, r3, r3, r1
 8000bfe:	109a      	asrs	r2, r3, #2
 8000c00:	17cb      	asrs	r3, r1, #31
 8000c02:	1ad2      	subs	r2, r2, r3
 8000c04:	4613      	mov	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4413      	add	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	1aca      	subs	r2, r1, r3
 8000c0e:	4b04      	ldr	r3, [pc, #16]	@ (8000c20 <updateSetDuration+0x44>)
 8000c10:	605a      	str	r2, [r3, #4]
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	66666667 	.word	0x66666667
 8000c20:	20000120 	.word	0x20000120

08000c24 <updateDurToBuffer>:

void updateDurToBuffer(int main_dur, int sub_dur)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
	led_buffer[0] = main_dur / 10;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a18      	ldr	r2, [pc, #96]	@ (8000c94 <updateDurToBuffer+0x70>)
 8000c32:	fb82 1203 	smull	r1, r2, r2, r3
 8000c36:	1092      	asrs	r2, r2, #2
 8000c38:	17db      	asrs	r3, r3, #31
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	4a16      	ldr	r2, [pc, #88]	@ (8000c98 <updateDurToBuffer+0x74>)
 8000c3e:	6013      	str	r3, [r2, #0]
	led_buffer[1] = main_dur % 10;
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <updateDurToBuffer+0x70>)
 8000c44:	fb83 2301 	smull	r2, r3, r3, r1
 8000c48:	109a      	asrs	r2, r3, #2
 8000c4a:	17cb      	asrs	r3, r1, #31
 8000c4c:	1ad2      	subs	r2, r2, r3
 8000c4e:	4613      	mov	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	4413      	add	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	1aca      	subs	r2, r1, r3
 8000c58:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <updateDurToBuffer+0x74>)
 8000c5a:	605a      	str	r2, [r3, #4]
	led_buffer[2] = sub_dur / 10;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	4a0d      	ldr	r2, [pc, #52]	@ (8000c94 <updateDurToBuffer+0x70>)
 8000c60:	fb82 1203 	smull	r1, r2, r2, r3
 8000c64:	1092      	asrs	r2, r2, #2
 8000c66:	17db      	asrs	r3, r3, #31
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c98 <updateDurToBuffer+0x74>)
 8000c6c:	6093      	str	r3, [r2, #8]
	led_buffer[3] = sub_dur % 10;
 8000c6e:	6839      	ldr	r1, [r7, #0]
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <updateDurToBuffer+0x70>)
 8000c72:	fb83 2301 	smull	r2, r3, r3, r1
 8000c76:	109a      	asrs	r2, r3, #2
 8000c78:	17cb      	asrs	r3, r1, #31
 8000c7a:	1ad2      	subs	r2, r2, r3
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	1aca      	subs	r2, r1, r3
 8000c86:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <updateDurToBuffer+0x74>)
 8000c88:	60da      	str	r2, [r3, #12]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	66666667 	.word	0x66666667
 8000c98:	20000120 	.word	0x20000120

08000c9c <display7SEG1>:

void display7SEG1(int num)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	int bitmask1 = segmentMap[num];
 8000ca4:	4a14      	ldr	r2, [pc, #80]	@ (8000cf8 <display7SEG1+0x5c>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cac:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < 7; i++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	e018      	b.n	8000ce6 <display7SEG1+0x4a>
	{
		HAL_GPIO_WritePin(GPIOA, SEG_Pins_1[i], (bitmask1 & (1 << (6 - i))) ? RESET : SET);
 8000cb4:	4a11      	ldr	r2, [pc, #68]	@ (8000cfc <display7SEG1+0x60>)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cbc:	b299      	uxth	r1, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f1c3 0306 	rsb	r3, r3, #6
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	fa42 f303 	asr.w	r3, r2, r3
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bf0c      	ite	eq
 8000cd2:	2301      	moveq	r3, #1
 8000cd4:	2300      	movne	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4809      	ldr	r0, [pc, #36]	@ (8000d00 <display7SEG1+0x64>)
 8000cdc:	f000 ff69 	bl	8001bb2 <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2b06      	cmp	r3, #6
 8000cea:	dde3      	ble.n	8000cb4 <display7SEG1+0x18>
	}
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000040 	.word	0x20000040
 8000cfc:	20000068 	.word	0x20000068
 8000d00:	40010800 	.word	0x40010800

08000d04 <display7SEG2>:

void display7SEG2(int num)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	int bitmask2 = segmentMap[num];
 8000d0c:	4a14      	ldr	r2, [pc, #80]	@ (8000d60 <display7SEG2+0x5c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d14:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < 7; i++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	e018      	b.n	8000d4e <display7SEG2+0x4a>
	{
		HAL_GPIO_WritePin(GPIOB, SEG_Pins_2[i], (bitmask2 & (1 << (6 - i))) ? RESET : SET);
 8000d1c:	4a11      	ldr	r2, [pc, #68]	@ (8000d64 <display7SEG2+0x60>)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d24:	b299      	uxth	r1, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f1c3 0306 	rsb	r3, r3, #6
 8000d2c:	68ba      	ldr	r2, [r7, #8]
 8000d2e:	fa42 f303 	asr.w	r3, r2, r3
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	bf0c      	ite	eq
 8000d3a:	2301      	moveq	r3, #1
 8000d3c:	2300      	movne	r3, #0
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	461a      	mov	r2, r3
 8000d42:	4809      	ldr	r0, [pc, #36]	@ (8000d68 <display7SEG2+0x64>)
 8000d44:	f000 ff35 	bl	8001bb2 <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2b06      	cmp	r3, #6
 8000d52:	dde3      	ble.n	8000d1c <display7SEG2+0x18>
	}
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000040 	.word	0x20000040
 8000d64:	20000084 	.word	0x20000084
 8000d68:	40010c00 	.word	0x40010c00

08000d6c <update7SEG1>:

void update7SEG1(int index)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 2; i++)
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	e00c      	b.n	8000d94 <update7SEG1+0x28>
	{
		HAL_GPIO_WritePin(GPIOA, EN_Pins[i], GPIO_PIN_SET);
 8000d7a:	4a15      	ldr	r2, [pc, #84]	@ (8000dd0 <update7SEG1+0x64>)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	2201      	movs	r2, #1
 8000d86:	4619      	mov	r1, r3
 8000d88:	4812      	ldr	r0, [pc, #72]	@ (8000dd4 <update7SEG1+0x68>)
 8000d8a:	f000 ff12 	bl	8001bb2 <HAL_GPIO_WritePin>
	for (int i = 0; i < 2; i++)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3301      	adds	r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	ddef      	ble.n	8000d7a <update7SEG1+0xe>
	}

	if (0 <= index && index < 2) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db13      	blt.n	8000dc8 <update7SEG1+0x5c>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	dc10      	bgt.n	8000dc8 <update7SEG1+0x5c>
		HAL_GPIO_WritePin(GPIOA, EN_Pins[index], GPIO_PIN_RESET);
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <update7SEG1+0x64>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	2200      	movs	r2, #0
 8000db2:	4619      	mov	r1, r3
 8000db4:	4807      	ldr	r0, [pc, #28]	@ (8000dd4 <update7SEG1+0x68>)
 8000db6:	f000 fefc 	bl	8001bb2 <HAL_GPIO_WritePin>
		display7SEG1(led_buffer[index]);
 8000dba:	4a07      	ldr	r2, [pc, #28]	@ (8000dd8 <update7SEG1+0x6c>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff6a 	bl	8000c9c <display7SEG1>
	}
}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200000a0 	.word	0x200000a0
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	20000120 	.word	0x20000120

08000ddc <update7SEG2>:

void update7SEG2(int index)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	for (int i = 2; i < 4; i++)
 8000de4:	2302      	movs	r3, #2
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	e00c      	b.n	8000e04 <update7SEG2+0x28>
	{
		HAL_GPIO_WritePin(GPIOA, EN_Pins[i], GPIO_PIN_SET);
 8000dea:	4a15      	ldr	r2, [pc, #84]	@ (8000e40 <update7SEG2+0x64>)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	2201      	movs	r2, #1
 8000df6:	4619      	mov	r1, r3
 8000df8:	4812      	ldr	r0, [pc, #72]	@ (8000e44 <update7SEG2+0x68>)
 8000dfa:	f000 feda 	bl	8001bb2 <HAL_GPIO_WritePin>
	for (int i = 2; i < 4; i++)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	3301      	adds	r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	ddef      	ble.n	8000dea <update7SEG2+0xe>
	}

	if (2 <= index && index < 4) {
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	dd13      	ble.n	8000e38 <update7SEG2+0x5c>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	dc10      	bgt.n	8000e38 <update7SEG2+0x5c>
		HAL_GPIO_WritePin(GPIOA, EN_Pins[index], GPIO_PIN_RESET);
 8000e16:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <update7SEG2+0x64>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	2200      	movs	r2, #0
 8000e22:	4619      	mov	r1, r3
 8000e24:	4807      	ldr	r0, [pc, #28]	@ (8000e44 <update7SEG2+0x68>)
 8000e26:	f000 fec4 	bl	8001bb2 <HAL_GPIO_WritePin>
		display7SEG2(led_buffer[index]);
 8000e2a:	4a07      	ldr	r2, [pc, #28]	@ (8000e48 <update7SEG2+0x6c>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff66 	bl	8000d04 <display7SEG2>
	}
}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200000a0 	.word	0x200000a0
 8000e44:	40010800 	.word	0x40010800
 8000e48:	20000120 	.word	0x20000120

08000e4c <setTrafficLights>:

// Need to be improved
void setTrafficLights(GPIO_PinState red1, GPIO_PinState yellow1, GPIO_PinState green1,
                      GPIO_PinState red2, GPIO_PinState yellow2, GPIO_PinState green2)
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4604      	mov	r4, r0
 8000e54:	4608      	mov	r0, r1
 8000e56:	4611      	mov	r1, r2
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	71fb      	strb	r3, [r7, #7]
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71bb      	strb	r3, [r7, #6]
 8000e62:	460b      	mov	r3, r1
 8000e64:	717b      	strb	r3, [r7, #5]
 8000e66:	4613      	mov	r3, r2
 8000e68:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, LED_RED_1_Pin, red1);
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	2102      	movs	r1, #2
 8000e70:	4812      	ldr	r0, [pc, #72]	@ (8000ebc <setTrafficLights+0x70>)
 8000e72:	f000 fe9e 	bl	8001bb2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_YELLOW_1_Pin, yellow1);
 8000e76:	79bb      	ldrb	r3, [r7, #6]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	480f      	ldr	r0, [pc, #60]	@ (8000ebc <setTrafficLights+0x70>)
 8000e7e:	f000 fe98 	bl	8001bb2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_GREEN_1_Pin, green1);
 8000e82:	797b      	ldrb	r3, [r7, #5]
 8000e84:	461a      	mov	r2, r3
 8000e86:	2108      	movs	r1, #8
 8000e88:	480c      	ldr	r0, [pc, #48]	@ (8000ebc <setTrafficLights+0x70>)
 8000e8a:	f000 fe92 	bl	8001bb2 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOB, LED_RED_2_Pin, red2);
 8000e8e:	793b      	ldrb	r3, [r7, #4]
 8000e90:	461a      	mov	r2, r3
 8000e92:	2110      	movs	r1, #16
 8000e94:	4809      	ldr	r0, [pc, #36]	@ (8000ebc <setTrafficLights+0x70>)
 8000e96:	f000 fe8c 	bl	8001bb2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_YELLOW_2_Pin, yellow2);
 8000e9a:	7e3b      	ldrb	r3, [r7, #24]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	2120      	movs	r1, #32
 8000ea0:	4806      	ldr	r0, [pc, #24]	@ (8000ebc <setTrafficLights+0x70>)
 8000ea2:	f000 fe86 	bl	8001bb2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_GREEN_2_Pin, green2);
 8000ea6:	7f3b      	ldrb	r3, [r7, #28]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	2140      	movs	r1, #64	@ 0x40
 8000eac:	4803      	ldr	r0, [pc, #12]	@ (8000ebc <setTrafficLights+0x70>)
 8000eae:	f000 fe80 	bl	8001bb2 <HAL_GPIO_WritePin>
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd90      	pop	{r4, r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40010c00 	.word	0x40010c00

08000ec0 <clearTrafficLEDs>:

void clearTrafficLEDs() {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 6; i++) {
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	e00c      	b.n	8000ee6 <clearTrafficLEDs+0x26>
		HAL_GPIO_WritePin(GPIOB, all_LEDs[i], RESET);
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <clearTrafficLEDs+0x38>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4808      	ldr	r0, [pc, #32]	@ (8000efc <clearTrafficLEDs+0x3c>)
 8000edc:	f000 fe69 	bl	8001bb2 <HAL_GPIO_WritePin>
	for (int i = 0; i < 6; i++) {
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b05      	cmp	r3, #5
 8000eea:	ddef      	ble.n	8000ecc <clearTrafficLEDs+0xc>
	}
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200000b0 	.word	0x200000b0
 8000efc:	40010c00 	.word	0x40010c00

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f000 fb52 	bl	80015ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f89e 	bl	8001048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f000 f924 	bl	8001158 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f10:	f000 f8d6 	bl	80010c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000f14:	4840      	ldr	r0, [pc, #256]	@ (8001018 <main+0x118>)
 8000f16:	f001 faab 	bl	8002470 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  systemMode = INIT;
 8000f1a:	4b40      	ldr	r3, [pc, #256]	@ (800101c <main+0x11c>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
  trafficState = RED1_GREEN2_AUTO;
 8000f20:	4b3f      	ldr	r3, [pc, #252]	@ (8001020 <main+0x120>)
 8000f22:	220b      	movs	r2, #11
 8000f24:	601a      	str	r2, [r3, #0]
  start_new_loop = 1;
 8000f26:	4b3f      	ldr	r3, [pc, #252]	@ (8001024 <main+0x124>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]

  setTimer0(TIMER_CYCLE);
 8000f2c:	200a      	movs	r0, #10
 8000f2e:	f000 f97d 	bl	800122c <setTimer0>
  setTimer1(TIMER_CYCLE);
 8000f32:	200a      	movs	r0, #10
 8000f34:	f000 f996 	bl	8001264 <setTimer1>
  setTimer2(TIMER_CYCLE);
 8000f38:	200a      	movs	r0, #10
 8000f3a:	f000 f9af 	bl	800129c <setTimer2>
  setTimer3(TIMER_CYCLE);
 8000f3e:	200a      	movs	r0, #10
 8000f40:	f000 f9c8 	bl	80012d4 <setTimer3>
  setTimer4(TIMER_CYCLE * 2);
 8000f44:	2014      	movs	r0, #20
 8000f46:	f000 f9e1 	bl	800130c <setTimer4>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (timer3_flag == 1) {
 8000f4a:	4b37      	ldr	r3, [pc, #220]	@ (8001028 <main+0x128>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d106      	bne.n	8000f60 <main+0x60>
		  fsm_for_input_processing();
 8000f52:	f7ff fbeb 	bl	800072c <fsm_for_input_processing>
		  fsm_traffic_run();
 8000f56:	f7ff fadd 	bl	8000514 <fsm_traffic_run>

		  setTimer3(100);
 8000f5a:	2064      	movs	r0, #100	@ 0x64
 8000f5c:	f000 f9ba 	bl	80012d4 <setTimer3>
	  }

	  if (timer4_flag == 1) {
 8000f60:	4b32      	ldr	r3, [pc, #200]	@ (800102c <main+0x12c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d121      	bne.n	8000fac <main+0xac>
		  countDownDur1 -= 250;
 8000f68:	4b31      	ldr	r3, [pc, #196]	@ (8001030 <main+0x130>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	3bfa      	subs	r3, #250	@ 0xfa
 8000f6e:	4a30      	ldr	r2, [pc, #192]	@ (8001030 <main+0x130>)
 8000f70:	6013      	str	r3, [r2, #0]
		  countDownDur2 -= 250;
 8000f72:	4b30      	ldr	r3, [pc, #192]	@ (8001034 <main+0x134>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	3bfa      	subs	r3, #250	@ 0xfa
 8000f78:	4a2e      	ldr	r2, [pc, #184]	@ (8001034 <main+0x134>)
 8000f7a:	6013      	str	r3, [r2, #0]

		  updateDurToBuffer(countDownDur1 / 1000 + 1, countDownDur2 / 1000 + 1);
 8000f7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001030 <main+0x130>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a2d      	ldr	r2, [pc, #180]	@ (8001038 <main+0x138>)
 8000f82:	fb82 1203 	smull	r1, r2, r2, r3
 8000f86:	1192      	asrs	r2, r2, #6
 8000f88:	17db      	asrs	r3, r3, #31
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	1c58      	adds	r0, r3, #1
 8000f8e:	4b29      	ldr	r3, [pc, #164]	@ (8001034 <main+0x134>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a29      	ldr	r2, [pc, #164]	@ (8001038 <main+0x138>)
 8000f94:	fb82 1203 	smull	r1, r2, r2, r3
 8000f98:	1192      	asrs	r2, r2, #6
 8000f9a:	17db      	asrs	r3, r3, #31
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f7ff fe3f 	bl	8000c24 <updateDurToBuffer>

		  setTimer4(250);
 8000fa6:	20fa      	movs	r0, #250	@ 0xfa
 8000fa8:	f000 f9b0 	bl	800130c <setTimer4>
	  }

	  if (timer1_flag == 1) {
 8000fac:	4b23      	ldr	r3, [pc, #140]	@ (800103c <main+0x13c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d1ca      	bne.n	8000f4a <main+0x4a>
		  if (systemMode != INIT) {
 8000fb4:	4b19      	ldr	r3, [pc, #100]	@ (800101c <main+0x11c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d013      	beq.n	8000fe4 <main+0xe4>
			  updateModeToBuffer(systemMode);
 8000fbc:	4b17      	ldr	r3, [pc, #92]	@ (800101c <main+0x11c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fde7 	bl	8000b94 <updateModeToBuffer>

			  updateSetDuration(duration_buffer_temp[systemMode - 2] / 1000);
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <main+0x11c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	3b02      	subs	r3, #2
 8000fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8001040 <main+0x140>)
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	4a19      	ldr	r2, [pc, #100]	@ (8001038 <main+0x138>)
 8000fd4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd8:	1192      	asrs	r2, r2, #6
 8000fda:	17db      	asrs	r3, r3, #31
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fdfc 	bl	8000bdc <updateSetDuration>
		  }

		  update7SEG1(index_led);
 8000fe4:	4b17      	ldr	r3, [pc, #92]	@ (8001044 <main+0x144>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff febf 	bl	8000d6c <update7SEG1>
		  update7SEG2(2 + index_led);
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <main+0x144>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fef1 	bl	8000ddc <update7SEG2>
		  index_led = (index_led + 1) % 2;
 8000ffa:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <main+0x144>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	3301      	adds	r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	bfb8      	it	lt
 8001008:	425b      	neglt	r3, r3
 800100a:	4a0e      	ldr	r2, [pc, #56]	@ (8001044 <main+0x144>)
 800100c:	6013      	str	r3, [r2, #0]

		  setTimer1(250);
 800100e:	20fa      	movs	r0, #250	@ 0xfa
 8001010:	f000 f928 	bl	8001264 <setTimer1>
	  if (timer3_flag == 1) {
 8001014:	e799      	b.n	8000f4a <main+0x4a>
 8001016:	bf00      	nop
 8001018:	20000130 	.word	0x20000130
 800101c:	200000f0 	.word	0x200000f0
 8001020:	200000f4 	.word	0x200000f4
 8001024:	20000000 	.word	0x20000000
 8001028:	20000184 	.word	0x20000184
 800102c:	20000188 	.word	0x20000188
 8001030:	200000f8 	.word	0x200000f8
 8001034:	200000fc 	.word	0x200000fc
 8001038:	10624dd3 	.word	0x10624dd3
 800103c:	2000017c 	.word	0x2000017c
 8001040:	20000004 	.word	0x20000004
 8001044:	2000011c 	.word	0x2000011c

08001048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b090      	sub	sp, #64	@ 0x40
 800104c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104e:	f107 0318 	add.w	r3, r7, #24
 8001052:	2228      	movs	r2, #40	@ 0x28
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f001 fd96 	bl	8002b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800106a:	2302      	movs	r3, #2
 800106c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106e:	2301      	movs	r3, #1
 8001070:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001072:	2310      	movs	r3, #16
 8001074:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001076:	2300      	movs	r3, #0
 8001078:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107a:	f107 0318 	add.w	r3, r7, #24
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fdc8 	bl	8001c14 <HAL_RCC_OscConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800108a:	f000 f8c9 	bl	8001220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108e:	230f      	movs	r3, #15
 8001090:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f001 f836 	bl	8002118 <HAL_RCC_ClockConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010b2:	f000 f8b5 	bl	8001220 <Error_Handler>
  }
}
 80010b6:	bf00      	nop
 80010b8:	3740      	adds	r7, #64	@ 0x40
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d4:	463b      	mov	r3, r7
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <MX_TIM2_Init+0x94>)
 80010de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <MX_TIM2_Init+0x94>)
 80010e6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80010ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <MX_TIM2_Init+0x94>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010f2:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <MX_TIM2_Init+0x94>)
 80010f4:	2209      	movs	r2, #9
 80010f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f8:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <MX_TIM2_Init+0x94>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <MX_TIM2_Init+0x94>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001104:	4813      	ldr	r0, [pc, #76]	@ (8001154 <MX_TIM2_Init+0x94>)
 8001106:	f001 f963 	bl	80023d0 <HAL_TIM_Base_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001110:	f000 f886 	bl	8001220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001114:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001118:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	4619      	mov	r1, r3
 8001120:	480c      	ldr	r0, [pc, #48]	@ (8001154 <MX_TIM2_Init+0x94>)
 8001122:	f001 fae1 	bl	80026e8 <HAL_TIM_ConfigClockSource>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800112c:	f000 f878 	bl	8001220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001130:	2300      	movs	r3, #0
 8001132:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_TIM2_Init+0x94>)
 800113e:	f001 fcb9 	bl	8002ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001148:	f000 f86a 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000130 	.word	0x20000130

08001158 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <MX_GPIO_Init+0xbc>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a28      	ldr	r2, [pc, #160]	@ (8001214 <MX_GPIO_Init+0xbc>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b26      	ldr	r3, [pc, #152]	@ (8001214 <MX_GPIO_Init+0xbc>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001184:	4b23      	ldr	r3, [pc, #140]	@ (8001214 <MX_GPIO_Init+0xbc>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a22      	ldr	r2, [pc, #136]	@ (8001214 <MX_GPIO_Init+0xbc>)
 800118a:	f043 0308 	orr.w	r3, r3, #8
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b20      	ldr	r3, [pc, #128]	@ (8001214 <MX_GPIO_Init+0xbc>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 800119c:	2200      	movs	r2, #0
 800119e:	f641 71de 	movw	r1, #8158	@ 0x1fde
 80011a2:	481d      	ldr	r0, [pc, #116]	@ (8001218 <MX_GPIO_Init+0xc0>)
 80011a4:	f000 fd05 	bl	8001bb2 <HAL_GPIO_WritePin>
                          |SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_1_Pin|LED_YELLOW_1_Pin|SEGb_Pin|SEGc_Pin
 80011a8:	2200      	movs	r2, #0
 80011aa:	f64f 617e 	movw	r1, #65150	@ 0xfe7e
 80011ae:	481b      	ldr	r0, [pc, #108]	@ (800121c <MX_GPIO_Init+0xc4>)
 80011b0:	f000 fcff 	bl	8001bb2 <HAL_GPIO_WritePin>
                          |SEGa_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80011b4:	f641 73de 	movw	r3, #8158	@ 0x1fde
 80011b8:	60bb      	str	r3, [r7, #8]
                          |SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2302      	movs	r3, #2
 80011c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4619      	mov	r1, r3
 80011cc:	4812      	ldr	r0, [pc, #72]	@ (8001218 <MX_GPIO_Init+0xc0>)
 80011ce:	f000 fb5d 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin SEGb_Pin SEGc_Pin
                           SEGd_Pin SEGe_Pin SEGf_Pin SEGg_Pin
                           LED_GREEN_1_Pin LED_RED_2_Pin LED_YELLOW_2_Pin LED_GREEN_2_Pin
                           SEGa_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|SEGb_Pin|SEGc_Pin
 80011d2:	f64f 637e 	movw	r3, #65150	@ 0xfe7e
 80011d6:	60bb      	str	r3, [r7, #8]
                          |SEGd_Pin|SEGe_Pin|SEGf_Pin|SEGg_Pin
                          |LED_GREEN_1_Pin|LED_RED_2_Pin|LED_YELLOW_2_Pin|LED_GREEN_2_Pin
                          |SEGa_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2302      	movs	r3, #2
 80011e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	4619      	mov	r1, r3
 80011ea:	480c      	ldr	r0, [pc, #48]	@ (800121c <MX_GPIO_Init+0xc4>)
 80011ec:	f000 fb4e 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80011f0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80011f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	4619      	mov	r1, r3
 8001204:	4804      	ldr	r0, [pc, #16]	@ (8001218 <MX_GPIO_Init+0xc0>)
 8001206:	f000 fb41 	bl	800188c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	40010800 	.word	0x40010800
 800121c:	40010c00 	.word	0x40010c00

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <Error_Handler+0x8>

0800122c <setTimer0>:
int timer1_counter = 0;
int timer2_counter = 0;
int timer3_counter = 0;
int timer4_counter = 0;

void setTimer0(int duration) {
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
    timer0_counter = duration / TIMER_CYCLE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a08      	ldr	r2, [pc, #32]	@ (8001258 <setTimer0+0x2c>)
 8001238:	fb82 1203 	smull	r1, r2, r2, r3
 800123c:	1092      	asrs	r2, r2, #2
 800123e:	17db      	asrs	r3, r3, #31
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	4a06      	ldr	r2, [pc, #24]	@ (800125c <setTimer0+0x30>)
 8001244:	6013      	str	r3, [r2, #0]
    timer0_flag = 0;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <setTimer0+0x34>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	66666667 	.word	0x66666667
 800125c:	2000018c 	.word	0x2000018c
 8001260:	20000178 	.word	0x20000178

08001264 <setTimer1>:

void setTimer1(int duration) {
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    timer1_counter = duration / TIMER_CYCLE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a08      	ldr	r2, [pc, #32]	@ (8001290 <setTimer1+0x2c>)
 8001270:	fb82 1203 	smull	r1, r2, r2, r3
 8001274:	1092      	asrs	r2, r2, #2
 8001276:	17db      	asrs	r3, r3, #31
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	4a06      	ldr	r2, [pc, #24]	@ (8001294 <setTimer1+0x30>)
 800127c:	6013      	str	r3, [r2, #0]
    timer1_flag = 0;
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <setTimer1+0x34>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	66666667 	.word	0x66666667
 8001294:	20000190 	.word	0x20000190
 8001298:	2000017c 	.word	0x2000017c

0800129c <setTimer2>:

void setTimer2(int duration) {
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
    timer2_counter = duration / TIMER_CYCLE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a08      	ldr	r2, [pc, #32]	@ (80012c8 <setTimer2+0x2c>)
 80012a8:	fb82 1203 	smull	r1, r2, r2, r3
 80012ac:	1092      	asrs	r2, r2, #2
 80012ae:	17db      	asrs	r3, r3, #31
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	4a06      	ldr	r2, [pc, #24]	@ (80012cc <setTimer2+0x30>)
 80012b4:	6013      	str	r3, [r2, #0]
    timer2_flag = 0;
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <setTimer2+0x34>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	66666667 	.word	0x66666667
 80012cc:	20000194 	.word	0x20000194
 80012d0:	20000180 	.word	0x20000180

080012d4 <setTimer3>:

void setTimer3(int duration) {
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    timer3_counter = duration / TIMER_CYCLE;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a08      	ldr	r2, [pc, #32]	@ (8001300 <setTimer3+0x2c>)
 80012e0:	fb82 1203 	smull	r1, r2, r2, r3
 80012e4:	1092      	asrs	r2, r2, #2
 80012e6:	17db      	asrs	r3, r3, #31
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	4a06      	ldr	r2, [pc, #24]	@ (8001304 <setTimer3+0x30>)
 80012ec:	6013      	str	r3, [r2, #0]
    timer3_flag = 0;
 80012ee:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <setTimer3+0x34>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	66666667 	.word	0x66666667
 8001304:	20000198 	.word	0x20000198
 8001308:	20000184 	.word	0x20000184

0800130c <setTimer4>:

void setTimer4(int duration) {
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    timer4_counter = duration / TIMER_CYCLE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a08      	ldr	r2, [pc, #32]	@ (8001338 <setTimer4+0x2c>)
 8001318:	fb82 1203 	smull	r1, r2, r2, r3
 800131c:	1092      	asrs	r2, r2, #2
 800131e:	17db      	asrs	r3, r3, #31
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	4a06      	ldr	r2, [pc, #24]	@ (800133c <setTimer4+0x30>)
 8001324:	6013      	str	r3, [r2, #0]
    timer4_flag = 0;
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <setTimer4+0x34>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	66666667 	.word	0x66666667
 800133c:	2000019c 	.word	0x2000019c
 8001340:	20000188 	.word	0x20000188

08001344 <timerRun>:

void timerRun() {
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 8001348:	4b29      	ldr	r3, [pc, #164]	@ (80013f0 <timerRun+0xac>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	dd0b      	ble.n	8001368 <timerRun+0x24>
		timer0_counter--;
 8001350:	4b27      	ldr	r3, [pc, #156]	@ (80013f0 <timerRun+0xac>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3b01      	subs	r3, #1
 8001356:	4a26      	ldr	r2, [pc, #152]	@ (80013f0 <timerRun+0xac>)
 8001358:	6013      	str	r3, [r2, #0]

		if (timer0_counter == 0) timer0_flag = 1;
 800135a:	4b25      	ldr	r3, [pc, #148]	@ (80013f0 <timerRun+0xac>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <timerRun+0x24>
 8001362:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <timerRun+0xb0>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]
	}

	if (timer1_counter > 0) {
 8001368:	4b23      	ldr	r3, [pc, #140]	@ (80013f8 <timerRun+0xb4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	dd0b      	ble.n	8001388 <timerRun+0x44>
		timer1_counter--;
 8001370:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <timerRun+0xb4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3b01      	subs	r3, #1
 8001376:	4a20      	ldr	r2, [pc, #128]	@ (80013f8 <timerRun+0xb4>)
 8001378:	6013      	str	r3, [r2, #0]

		if (timer1_counter == 0) timer1_flag = 1;
 800137a:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <timerRun+0xb4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <timerRun+0x44>
 8001382:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <timerRun+0xb8>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]
	}

	if (timer2_counter > 0) {
 8001388:	4b1d      	ldr	r3, [pc, #116]	@ (8001400 <timerRun+0xbc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	dd0b      	ble.n	80013a8 <timerRun+0x64>
		timer2_counter--;
 8001390:	4b1b      	ldr	r3, [pc, #108]	@ (8001400 <timerRun+0xbc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	3b01      	subs	r3, #1
 8001396:	4a1a      	ldr	r2, [pc, #104]	@ (8001400 <timerRun+0xbc>)
 8001398:	6013      	str	r3, [r2, #0]

		if (timer2_counter == 0) timer2_flag = 1;
 800139a:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <timerRun+0xbc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <timerRun+0x64>
 80013a2:	4b18      	ldr	r3, [pc, #96]	@ (8001404 <timerRun+0xc0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
	}

	if (timer3_counter > 0) {
 80013a8:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <timerRun+0xc4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	dd0b      	ble.n	80013c8 <timerRun+0x84>
		timer3_counter--;
 80013b0:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <timerRun+0xc4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	4a14      	ldr	r2, [pc, #80]	@ (8001408 <timerRun+0xc4>)
 80013b8:	6013      	str	r3, [r2, #0]

		if (timer3_counter == 0) timer3_flag = 1;
 80013ba:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <timerRun+0xc4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <timerRun+0x84>
 80013c2:	4b12      	ldr	r3, [pc, #72]	@ (800140c <timerRun+0xc8>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
	}

	if (timer4_counter > 0) {
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <timerRun+0xcc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	dd0b      	ble.n	80013e8 <timerRun+0xa4>
		timer4_counter--;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <timerRun+0xcc>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001410 <timerRun+0xcc>)
 80013d8:	6013      	str	r3, [r2, #0]

		if (timer4_counter == 0) timer4_flag = 1;
 80013da:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <timerRun+0xcc>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <timerRun+0xa4>
 80013e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <timerRun+0xd0>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
	}
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	2000018c 	.word	0x2000018c
 80013f4:	20000178 	.word	0x20000178
 80013f8:	20000190 	.word	0x20000190
 80013fc:	2000017c 	.word	0x2000017c
 8001400:	20000194 	.word	0x20000194
 8001404:	20000180 	.word	0x20000180
 8001408:	20000198 	.word	0x20000198
 800140c:	20000184 	.word	0x20000184
 8001410:	2000019c 	.word	0x2000019c
 8001414:	20000188 	.word	0x20000188

08001418 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001428:	d103      	bne.n	8001432 <HAL_TIM_PeriodElapsedCallback+0x1a>
		timerRun();
 800142a:	f7ff ff8b 	bl	8001344 <timerRun>
		button_reading();
 800142e:	f7ff fae1 	bl	80009f4 <button_reading>
	}
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <HAL_MspInit+0x5c>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	4a14      	ldr	r2, [pc, #80]	@ (8001498 <HAL_MspInit+0x5c>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6193      	str	r3, [r2, #24]
 800144e:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_MspInit+0x5c>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <HAL_MspInit+0x5c>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	4a0e      	ldr	r2, [pc, #56]	@ (8001498 <HAL_MspInit+0x5c>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001464:	61d3      	str	r3, [r2, #28]
 8001466:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <HAL_MspInit+0x5c>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <HAL_MspInit+0x60>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	4a04      	ldr	r2, [pc, #16]	@ (800149c <HAL_MspInit+0x60>)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	40021000 	.word	0x40021000
 800149c:	40010000 	.word	0x40010000

080014a0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014b0:	d113      	bne.n	80014da <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014b2:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <HAL_TIM_Base_MspInit+0x44>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	4a0b      	ldr	r2, [pc, #44]	@ (80014e4 <HAL_TIM_Base_MspInit+0x44>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	61d3      	str	r3, [r2, #28]
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <HAL_TIM_Base_MspInit+0x44>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	201c      	movs	r0, #28
 80014d0:	f000 f9a5 	bl	800181e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014d4:	201c      	movs	r0, #28
 80014d6:	f000 f9be 	bl	8001856 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <NMI_Handler+0x4>

080014f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <MemManage_Handler+0x4>

08001500 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <UsageFault_Handler+0x4>

08001510 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001538:	f000 f87e 	bl	8001638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}

08001540 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001544:	4802      	ldr	r0, [pc, #8]	@ (8001550 <TIM2_IRQHandler+0x10>)
 8001546:	f000 ffdf 	bl	8002508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000130 	.word	0x20000130

08001554 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001560:	f7ff fff8 	bl	8001554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001564:	480b      	ldr	r0, [pc, #44]	@ (8001594 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001566:	490c      	ldr	r1, [pc, #48]	@ (8001598 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001568:	4a0c      	ldr	r2, [pc, #48]	@ (800159c <LoopFillZerobss+0x16>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800156c:	e002      	b.n	8001574 <LoopCopyDataInit>

0800156e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001572:	3304      	adds	r3, #4

08001574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001578:	d3f9      	bcc.n	800156e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157a:	4a09      	ldr	r2, [pc, #36]	@ (80015a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800157c:	4c09      	ldr	r4, [pc, #36]	@ (80015a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001580:	e001      	b.n	8001586 <LoopFillZerobss>

08001582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001584:	3204      	adds	r2, #4

08001586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001588:	d3fb      	bcc.n	8001582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158a:	f001 fb05 	bl	8002b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800158e:	f7ff fcb7 	bl	8000f00 <main>
  bx lr
 8001592:	4770      	bx	lr
  ldr r0, =_sdata
 8001594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001598:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 800159c:	08002c24 	.word	0x08002c24
  ldr r2, =_sbss
 80015a0:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80015a4:	200001a4 	.word	0x200001a4

080015a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015a8:	e7fe      	b.n	80015a8 <ADC1_2_IRQHandler>
	...

080015ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <HAL_Init+0x28>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a07      	ldr	r2, [pc, #28]	@ (80015d4 <HAL_Init+0x28>)
 80015b6:	f043 0310 	orr.w	r3, r3, #16
 80015ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015bc:	2003      	movs	r0, #3
 80015be:	f000 f923 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c2:	200f      	movs	r0, #15
 80015c4:	f000 f808 	bl	80015d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c8:	f7ff ff38 	bl	800143c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40022000 	.word	0x40022000

080015d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e0:	4b12      	ldr	r3, [pc, #72]	@ (800162c <HAL_InitTick+0x54>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <HAL_InitTick+0x58>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 f93b 	bl	8001872 <HAL_SYSTICK_Config>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e00e      	b.n	8001624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d80a      	bhi.n	8001622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800160c:	2200      	movs	r2, #0
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f000 f903 	bl	800181e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001618:	4a06      	ldr	r2, [pc, #24]	@ (8001634 <HAL_InitTick+0x5c>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	e000      	b.n	8001624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200000c8 	.word	0x200000c8
 8001630:	200000d0 	.word	0x200000d0
 8001634:	200000cc 	.word	0x200000cc

08001638 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800163c:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <HAL_IncTick+0x1c>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <HAL_IncTick+0x20>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a03      	ldr	r2, [pc, #12]	@ (8001658 <HAL_IncTick+0x20>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	200000d0 	.word	0x200000d0
 8001658:	200001a0 	.word	0x200001a0

0800165c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return uwTick;
 8001660:	4b02      	ldr	r3, [pc, #8]	@ (800166c <HAL_GetTick+0x10>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	200001a0 	.word	0x200001a0

08001670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001680:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800168c:	4013      	ands	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001698:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800169c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a2:	4a04      	ldr	r2, [pc, #16]	@ (80016b4 <__NVIC_SetPriorityGrouping+0x44>)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	60d3      	str	r3, [r2, #12]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016bc:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <__NVIC_GetPriorityGrouping+0x18>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	f003 0307 	and.w	r3, r3, #7
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	db0b      	blt.n	80016fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	f003 021f 	and.w	r2, r3, #31
 80016ec:	4906      	ldr	r1, [pc, #24]	@ (8001708 <__NVIC_EnableIRQ+0x34>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	2001      	movs	r0, #1
 80016f6:	fa00 f202 	lsl.w	r2, r0, r2
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	e000e100 	.word	0xe000e100

0800170c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db0a      	blt.n	8001736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	490c      	ldr	r1, [pc, #48]	@ (8001758 <__NVIC_SetPriority+0x4c>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	0112      	lsls	r2, r2, #4
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	440b      	add	r3, r1
 8001730:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001734:	e00a      	b.n	800174c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4908      	ldr	r1, [pc, #32]	@ (800175c <__NVIC_SetPriority+0x50>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	3b04      	subs	r3, #4
 8001744:	0112      	lsls	r2, r2, #4
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	440b      	add	r3, r1
 800174a:	761a      	strb	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000e100 	.word	0xe000e100
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	@ 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f1c3 0307 	rsb	r3, r3, #7
 800177a:	2b04      	cmp	r3, #4
 800177c:	bf28      	it	cs
 800177e:	2304      	movcs	r3, #4
 8001780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3304      	adds	r3, #4
 8001786:	2b06      	cmp	r3, #6
 8001788:	d902      	bls.n	8001790 <NVIC_EncodePriority+0x30>
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3b03      	subs	r3, #3
 800178e:	e000      	b.n	8001792 <NVIC_EncodePriority+0x32>
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	f04f 32ff 	mov.w	r2, #4294967295
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	401a      	ands	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	43d9      	mvns	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	4313      	orrs	r3, r2
         );
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3724      	adds	r7, #36	@ 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f7ff ff90 	bl	800170c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff2d 	bl	8001670 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001830:	f7ff ff42 	bl	80016b8 <__NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ff90 	bl	8001760 <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5f 	bl	800170c <__NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff35 	bl	80016d4 <__NVIC_EnableIRQ>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffa2 	bl	80017c4 <SysTick_Config>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b08b      	sub	sp, #44	@ 0x2c
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	e161      	b.n	8001b64 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018a0:	2201      	movs	r2, #1
 80018a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f040 8150 	bne.w	8001b5e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4a97      	ldr	r2, [pc, #604]	@ (8001b20 <HAL_GPIO_Init+0x294>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d05e      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018c8:	4a95      	ldr	r2, [pc, #596]	@ (8001b20 <HAL_GPIO_Init+0x294>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d875      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018ce:	4a95      	ldr	r2, [pc, #596]	@ (8001b24 <HAL_GPIO_Init+0x298>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d058      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018d4:	4a93      	ldr	r2, [pc, #588]	@ (8001b24 <HAL_GPIO_Init+0x298>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d86f      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018da:	4a93      	ldr	r2, [pc, #588]	@ (8001b28 <HAL_GPIO_Init+0x29c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d052      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018e0:	4a91      	ldr	r2, [pc, #580]	@ (8001b28 <HAL_GPIO_Init+0x29c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d869      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018e6:	4a91      	ldr	r2, [pc, #580]	@ (8001b2c <HAL_GPIO_Init+0x2a0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d04c      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018ec:	4a8f      	ldr	r2, [pc, #572]	@ (8001b2c <HAL_GPIO_Init+0x2a0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d863      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018f2:	4a8f      	ldr	r2, [pc, #572]	@ (8001b30 <HAL_GPIO_Init+0x2a4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d046      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018f8:	4a8d      	ldr	r2, [pc, #564]	@ (8001b30 <HAL_GPIO_Init+0x2a4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d85d      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018fe:	2b12      	cmp	r3, #18
 8001900:	d82a      	bhi.n	8001958 <HAL_GPIO_Init+0xcc>
 8001902:	2b12      	cmp	r3, #18
 8001904:	d859      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 8001906:	a201      	add	r2, pc, #4	@ (adr r2, 800190c <HAL_GPIO_Init+0x80>)
 8001908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190c:	08001987 	.word	0x08001987
 8001910:	08001961 	.word	0x08001961
 8001914:	08001973 	.word	0x08001973
 8001918:	080019b5 	.word	0x080019b5
 800191c:	080019bb 	.word	0x080019bb
 8001920:	080019bb 	.word	0x080019bb
 8001924:	080019bb 	.word	0x080019bb
 8001928:	080019bb 	.word	0x080019bb
 800192c:	080019bb 	.word	0x080019bb
 8001930:	080019bb 	.word	0x080019bb
 8001934:	080019bb 	.word	0x080019bb
 8001938:	080019bb 	.word	0x080019bb
 800193c:	080019bb 	.word	0x080019bb
 8001940:	080019bb 	.word	0x080019bb
 8001944:	080019bb 	.word	0x080019bb
 8001948:	080019bb 	.word	0x080019bb
 800194c:	080019bb 	.word	0x080019bb
 8001950:	08001969 	.word	0x08001969
 8001954:	0800197d 	.word	0x0800197d
 8001958:	4a76      	ldr	r2, [pc, #472]	@ (8001b34 <HAL_GPIO_Init+0x2a8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800195e:	e02c      	b.n	80019ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	623b      	str	r3, [r7, #32]
          break;
 8001966:	e029      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	3304      	adds	r3, #4
 800196e:	623b      	str	r3, [r7, #32]
          break;
 8001970:	e024      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	3308      	adds	r3, #8
 8001978:	623b      	str	r3, [r7, #32]
          break;
 800197a:	e01f      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	330c      	adds	r3, #12
 8001982:	623b      	str	r3, [r7, #32]
          break;
 8001984:	e01a      	b.n	80019bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800198e:	2304      	movs	r3, #4
 8001990:	623b      	str	r3, [r7, #32]
          break;
 8001992:	e013      	b.n	80019bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800199c:	2308      	movs	r3, #8
 800199e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	611a      	str	r2, [r3, #16]
          break;
 80019a6:	e009      	b.n	80019bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a8:	2308      	movs	r3, #8
 80019aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	615a      	str	r2, [r3, #20]
          break;
 80019b2:	e003      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
          break;
 80019b8:	e000      	b.n	80019bc <HAL_GPIO_Init+0x130>
          break;
 80019ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2bff      	cmp	r3, #255	@ 0xff
 80019c0:	d801      	bhi.n	80019c6 <HAL_GPIO_Init+0x13a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	e001      	b.n	80019ca <HAL_GPIO_Init+0x13e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3304      	adds	r3, #4
 80019ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2bff      	cmp	r3, #255	@ 0xff
 80019d0:	d802      	bhi.n	80019d8 <HAL_GPIO_Init+0x14c>
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	e002      	b.n	80019de <HAL_GPIO_Init+0x152>
 80019d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019da:	3b08      	subs	r3, #8
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	210f      	movs	r1, #15
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	401a      	ands	r2, r3
 80019f0:	6a39      	ldr	r1, [r7, #32]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	431a      	orrs	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80a9 	beq.w	8001b5e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b38 <HAL_GPIO_Init+0x2ac>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a49      	ldr	r2, [pc, #292]	@ (8001b38 <HAL_GPIO_Init+0x2ac>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b47      	ldr	r3, [pc, #284]	@ (8001b38 <HAL_GPIO_Init+0x2ac>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a24:	4a45      	ldr	r2, [pc, #276]	@ (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b40 <HAL_GPIO_Init+0x2b4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d00d      	beq.n	8001a6c <HAL_GPIO_Init+0x1e0>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a3c      	ldr	r2, [pc, #240]	@ (8001b44 <HAL_GPIO_Init+0x2b8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d007      	beq.n	8001a68 <HAL_GPIO_Init+0x1dc>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a3b      	ldr	r2, [pc, #236]	@ (8001b48 <HAL_GPIO_Init+0x2bc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d101      	bne.n	8001a64 <HAL_GPIO_Init+0x1d8>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e004      	b.n	8001a6e <HAL_GPIO_Init+0x1e2>
 8001a64:	2303      	movs	r3, #3
 8001a66:	e002      	b.n	8001a6e <HAL_GPIO_Init+0x1e2>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_GPIO_Init+0x1e2>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a70:	f002 0203 	and.w	r2, r2, #3
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	4093      	lsls	r3, r2
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a7e:	492f      	ldr	r1, [pc, #188]	@ (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a98:	4b2c      	ldr	r3, [pc, #176]	@ (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	492b      	ldr	r1, [pc, #172]	@ (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	608b      	str	r3, [r1, #8]
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aa6:	4b29      	ldr	r3, [pc, #164]	@ (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4927      	ldr	r1, [pc, #156]	@ (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac0:	4b22      	ldr	r3, [pc, #136]	@ (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	4921      	ldr	r1, [pc, #132]	@ (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60cb      	str	r3, [r1, #12]
 8001acc:	e006      	b.n	8001adc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ace:	4b1f      	ldr	r3, [pc, #124]	@ (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	491d      	ldr	r1, [pc, #116]	@ (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ae8:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	4917      	ldr	r1, [pc, #92]	@ (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	4913      	ldr	r1, [pc, #76]	@ (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01f      	beq.n	8001b50 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b10:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	490d      	ldr	r1, [pc, #52]	@ (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
 8001b1c:	e01f      	b.n	8001b5e <HAL_GPIO_Init+0x2d2>
 8001b1e:	bf00      	nop
 8001b20:	10320000 	.word	0x10320000
 8001b24:	10310000 	.word	0x10310000
 8001b28:	10220000 	.word	0x10220000
 8001b2c:	10210000 	.word	0x10210000
 8001b30:	10120000 	.word	0x10120000
 8001b34:	10110000 	.word	0x10110000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40010800 	.word	0x40010800
 8001b44:	40010c00 	.word	0x40010c00
 8001b48:	40011000 	.word	0x40011000
 8001b4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b50:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <HAL_GPIO_Init+0x2f4>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	4909      	ldr	r1, [pc, #36]	@ (8001b80 <HAL_GPIO_Init+0x2f4>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	3301      	adds	r3, #1
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f47f ae96 	bne.w	80018a0 <HAL_GPIO_Init+0x14>
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	372c      	adds	r7, #44	@ 0x2c
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	40010400 	.word	0x40010400

08001b84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	887b      	ldrh	r3, [r7, #2]
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	73fb      	strb	r3, [r7, #15]
 8001ba0:	e001      	b.n	8001ba6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	807b      	strh	r3, [r7, #2]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bc2:	787b      	ldrb	r3, [r7, #1]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc8:	887a      	ldrh	r2, [r7, #2]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bce:	e003      	b.n	8001bd8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bd0:	887b      	ldrh	r3, [r7, #2]
 8001bd2:	041a      	lsls	r2, r3, #16
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	611a      	str	r2, [r3, #16]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b085      	sub	sp, #20
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bf4:	887a      	ldrh	r2, [r7, #2]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	041a      	lsls	r2, r3, #16
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	400b      	ands	r3, r1
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	611a      	str	r2, [r3, #16]
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e272      	b.n	800210c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8087 	beq.w	8001d42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c34:	4b92      	ldr	r3, [pc, #584]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d00c      	beq.n	8001c5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c40:	4b8f      	ldr	r3, [pc, #572]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d112      	bne.n	8001c72 <HAL_RCC_OscConfig+0x5e>
 8001c4c:	4b8c      	ldr	r3, [pc, #560]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c58:	d10b      	bne.n	8001c72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5a:	4b89      	ldr	r3, [pc, #548]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d06c      	beq.n	8001d40 <HAL_RCC_OscConfig+0x12c>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d168      	bne.n	8001d40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e24c      	b.n	800210c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x76>
 8001c7c:	4b80      	ldr	r3, [pc, #512]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a7f      	ldr	r2, [pc, #508]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	e02e      	b.n	8001ce8 <HAL_RCC_OscConfig+0xd4>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x98>
 8001c92:	4b7b      	ldr	r3, [pc, #492]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a7a      	ldr	r2, [pc, #488]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	4b78      	ldr	r3, [pc, #480]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a77      	ldr	r2, [pc, #476]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e01d      	b.n	8001ce8 <HAL_RCC_OscConfig+0xd4>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0xbc>
 8001cb6:	4b72      	ldr	r3, [pc, #456]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a71      	ldr	r2, [pc, #452]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	4b6f      	ldr	r3, [pc, #444]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a6e      	ldr	r2, [pc, #440]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e00b      	b.n	8001ce8 <HAL_RCC_OscConfig+0xd4>
 8001cd0:	4b6b      	ldr	r3, [pc, #428]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a6a      	ldr	r2, [pc, #424]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4b68      	ldr	r3, [pc, #416]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a67      	ldr	r2, [pc, #412]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ce6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d013      	beq.n	8001d18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fcb4 	bl	800165c <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf8:	f7ff fcb0 	bl	800165c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b64      	cmp	r3, #100	@ 0x64
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e200      	b.n	800210c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0xe4>
 8001d16:	e014      	b.n	8001d42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7ff fca0 	bl	800165c <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d20:	f7ff fc9c 	bl	800165c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	@ 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e1ec      	b.n	800210c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d32:	4b53      	ldr	r3, [pc, #332]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x10c>
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d063      	beq.n	8001e16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d4e:	4b4c      	ldr	r3, [pc, #304]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00b      	beq.n	8001d72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d5a:	4b49      	ldr	r3, [pc, #292]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d11c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x18c>
 8001d66:	4b46      	ldr	r3, [pc, #280]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d116      	bne.n	8001da0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d72:	4b43      	ldr	r3, [pc, #268]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d005      	beq.n	8001d8a <HAL_RCC_OscConfig+0x176>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d001      	beq.n	8001d8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e1c0      	b.n	800210c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4939      	ldr	r1, [pc, #228]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9e:	e03a      	b.n	8001e16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d020      	beq.n	8001dea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da8:	4b36      	ldr	r3, [pc, #216]	@ (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7ff fc55 	bl	800165c <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db6:	f7ff fc51 	bl	800165c <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e1a1      	b.n	800210c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	4927      	ldr	r1, [pc, #156]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	600b      	str	r3, [r1, #0]
 8001de8:	e015      	b.n	8001e16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dea:	4b26      	ldr	r3, [pc, #152]	@ (8001e84 <HAL_RCC_OscConfig+0x270>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff fc34 	bl	800165c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df8:	f7ff fc30 	bl	800165c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e180      	b.n	800210c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d03a      	beq.n	8001e98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d019      	beq.n	8001e5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e2a:	4b17      	ldr	r3, [pc, #92]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e30:	f7ff fc14 	bl	800165c <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e38:	f7ff fc10 	bl	800165c <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e160      	b.n	800210c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e80 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e56:	2001      	movs	r0, #1
 8001e58:	f000 fa9c 	bl	8002394 <RCC_Delay>
 8001e5c:	e01c      	b.n	8001e98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <HAL_RCC_OscConfig+0x274>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e64:	f7ff fbfa 	bl	800165c <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6a:	e00f      	b.n	8001e8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6c:	f7ff fbf6 	bl	800165c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d908      	bls.n	8001e8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e146      	b.n	800210c <HAL_RCC_OscConfig+0x4f8>
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	42420000 	.word	0x42420000
 8001e88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8c:	4b92      	ldr	r3, [pc, #584]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1e9      	bne.n	8001e6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80a6 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eaa:	4b8b      	ldr	r3, [pc, #556]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10d      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	4b88      	ldr	r3, [pc, #544]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a87      	ldr	r2, [pc, #540]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ec0:	61d3      	str	r3, [r2, #28]
 8001ec2:	4b85      	ldr	r3, [pc, #532]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	4b82      	ldr	r3, [pc, #520]	@ (80020dc <HAL_RCC_OscConfig+0x4c8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d118      	bne.n	8001f10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ede:	4b7f      	ldr	r3, [pc, #508]	@ (80020dc <HAL_RCC_OscConfig+0x4c8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a7e      	ldr	r2, [pc, #504]	@ (80020dc <HAL_RCC_OscConfig+0x4c8>)
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eea:	f7ff fbb7 	bl	800165c <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef2:	f7ff fbb3 	bl	800165c <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b64      	cmp	r3, #100	@ 0x64
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e103      	b.n	800210c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	4b75      	ldr	r3, [pc, #468]	@ (80020dc <HAL_RCC_OscConfig+0x4c8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d106      	bne.n	8001f26 <HAL_RCC_OscConfig+0x312>
 8001f18:	4b6f      	ldr	r3, [pc, #444]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	4a6e      	ldr	r2, [pc, #440]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6213      	str	r3, [r2, #32]
 8001f24:	e02d      	b.n	8001f82 <HAL_RCC_OscConfig+0x36e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x334>
 8001f2e:	4b6a      	ldr	r3, [pc, #424]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a69      	ldr	r2, [pc, #420]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	6213      	str	r3, [r2, #32]
 8001f3a:	4b67      	ldr	r3, [pc, #412]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a66      	ldr	r2, [pc, #408]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	f023 0304 	bic.w	r3, r3, #4
 8001f44:	6213      	str	r3, [r2, #32]
 8001f46:	e01c      	b.n	8001f82 <HAL_RCC_OscConfig+0x36e>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	d10c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x356>
 8001f50:	4b61      	ldr	r3, [pc, #388]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4a60      	ldr	r2, [pc, #384]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	6213      	str	r3, [r2, #32]
 8001f5c:	4b5e      	ldr	r3, [pc, #376]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4a5d      	ldr	r2, [pc, #372]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6213      	str	r3, [r2, #32]
 8001f68:	e00b      	b.n	8001f82 <HAL_RCC_OscConfig+0x36e>
 8001f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a5a      	ldr	r2, [pc, #360]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	6213      	str	r3, [r2, #32]
 8001f76:	4b58      	ldr	r3, [pc, #352]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4a57      	ldr	r2, [pc, #348]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	f023 0304 	bic.w	r3, r3, #4
 8001f80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d015      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8a:	f7ff fb67 	bl	800165c <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7ff fb63 	bl	800165c <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e0b1      	b.n	800210c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa8:	4b4b      	ldr	r3, [pc, #300]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ee      	beq.n	8001f92 <HAL_RCC_OscConfig+0x37e>
 8001fb4:	e014      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb6:	f7ff fb51 	bl	800165c <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbc:	e00a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7ff fb4d 	bl	800165c <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e09b      	b.n	800210c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd4:	4b40      	ldr	r3, [pc, #256]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1ee      	bne.n	8001fbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d105      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe6:	4b3c      	ldr	r3, [pc, #240]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	4a3b      	ldr	r2, [pc, #236]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ff0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8087 	beq.w	800210a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ffc:	4b36      	ldr	r3, [pc, #216]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b08      	cmp	r3, #8
 8002006:	d061      	beq.n	80020cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d146      	bne.n	800209e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002010:	4b33      	ldr	r3, [pc, #204]	@ (80020e0 <HAL_RCC_OscConfig+0x4cc>)
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7ff fb21 	bl	800165c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201e:	f7ff fb1d 	bl	800165c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e06d      	b.n	800210c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002030:	4b29      	ldr	r3, [pc, #164]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f0      	bne.n	800201e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002044:	d108      	bne.n	8002058 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002046:	4b24      	ldr	r3, [pc, #144]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	4921      	ldr	r1, [pc, #132]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002058:	4b1f      	ldr	r3, [pc, #124]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a19      	ldr	r1, [r3, #32]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002068:	430b      	orrs	r3, r1
 800206a:	491b      	ldr	r1, [pc, #108]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002070:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <HAL_RCC_OscConfig+0x4cc>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7ff faf1 	bl	800165c <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207e:	f7ff faed 	bl	800165c <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e03d      	b.n	800210c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002090:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x46a>
 800209c:	e035      	b.n	800210a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209e:	4b10      	ldr	r3, [pc, #64]	@ (80020e0 <HAL_RCC_OscConfig+0x4cc>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7ff fada 	bl	800165c <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ac:	f7ff fad6 	bl	800165c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e026      	b.n	800210c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020be:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x498>
 80020ca:	e01e      	b.n	800210a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d107      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e019      	b.n	800210c <HAL_RCC_OscConfig+0x4f8>
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40007000 	.word	0x40007000
 80020e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <HAL_RCC_OscConfig+0x500>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000

08002118 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0d0      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800212c:	4b6a      	ldr	r3, [pc, #424]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d910      	bls.n	800215c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b67      	ldr	r3, [pc, #412]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 0207 	bic.w	r2, r3, #7
 8002142:	4965      	ldr	r1, [pc, #404]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b63      	ldr	r3, [pc, #396]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0b8      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d020      	beq.n	80021aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002174:	4b59      	ldr	r3, [pc, #356]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4a58      	ldr	r2, [pc, #352]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800217e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800218c:	4b53      	ldr	r3, [pc, #332]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a52      	ldr	r2, [pc, #328]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002196:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002198:	4b50      	ldr	r3, [pc, #320]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	494d      	ldr	r1, [pc, #308]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d040      	beq.n	8002238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	4b47      	ldr	r3, [pc, #284]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d115      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e07f      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d6:	4b41      	ldr	r3, [pc, #260]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e073      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e6:	4b3d      	ldr	r3, [pc, #244]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e06b      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f6:	4b39      	ldr	r3, [pc, #228]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f023 0203 	bic.w	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4936      	ldr	r1, [pc, #216]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002208:	f7ff fa28 	bl	800165c <HAL_GetTick>
 800220c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220e:	e00a      	b.n	8002226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002210:	f7ff fa24 	bl	800165c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e053      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	4b2d      	ldr	r3, [pc, #180]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 020c 	and.w	r2, r3, #12
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	429a      	cmp	r2, r3
 8002236:	d1eb      	bne.n	8002210 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002238:	4b27      	ldr	r3, [pc, #156]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d210      	bcs.n	8002268 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b24      	ldr	r3, [pc, #144]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 0207 	bic.w	r2, r3, #7
 800224e:	4922      	ldr	r1, [pc, #136]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b20      	ldr	r3, [pc, #128]	@ (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e032      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002274:	4b19      	ldr	r3, [pc, #100]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4916      	ldr	r1, [pc, #88]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d009      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002292:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	490e      	ldr	r1, [pc, #56]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022a6:	f000 f821 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 80022aa:	4602      	mov	r2, r0
 80022ac:	4b0b      	ldr	r3, [pc, #44]	@ (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	490a      	ldr	r1, [pc, #40]	@ (80022e0 <HAL_RCC_ClockConfig+0x1c8>)
 80022b8:	5ccb      	ldrb	r3, [r1, r3]
 80022ba:	fa22 f303 	lsr.w	r3, r2, r3
 80022be:	4a09      	ldr	r2, [pc, #36]	@ (80022e4 <HAL_RCC_ClockConfig+0x1cc>)
 80022c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022c2:	4b09      	ldr	r3, [pc, #36]	@ (80022e8 <HAL_RCC_ClockConfig+0x1d0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff f986 	bl	80015d8 <HAL_InitTick>

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40022000 	.word	0x40022000
 80022dc:	40021000 	.word	0x40021000
 80022e0:	08002bf8 	.word	0x08002bf8
 80022e4:	200000c8 	.word	0x200000c8
 80022e8:	200000cc 	.word	0x200000cc

080022ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002306:	4b1e      	ldr	r3, [pc, #120]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x94>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b04      	cmp	r3, #4
 8002314:	d002      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x30>
 8002316:	2b08      	cmp	r3, #8
 8002318:	d003      	beq.n	8002322 <HAL_RCC_GetSysClockFreq+0x36>
 800231a:	e027      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800231c:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x98>)
 800231e:	613b      	str	r3, [r7, #16]
      break;
 8002320:	e027      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	0c9b      	lsrs	r3, r3, #18
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	4a17      	ldr	r2, [pc, #92]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x9c>)
 800232c:	5cd3      	ldrb	r3, [r2, r3]
 800232e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d010      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800233a:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x94>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	0c5b      	lsrs	r3, r3, #17
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	4a11      	ldr	r2, [pc, #68]	@ (800238c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002346:	5cd3      	ldrb	r3, [r2, r3]
 8002348:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a0d      	ldr	r2, [pc, #52]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x98>)
 800234e:	fb03 f202 	mul.w	r2, r3, r2
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	e004      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a0c      	ldr	r2, [pc, #48]	@ (8002390 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002360:	fb02 f303 	mul.w	r3, r2, r3
 8002364:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	613b      	str	r3, [r7, #16]
      break;
 800236a:	e002      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800236c:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x98>)
 800236e:	613b      	str	r3, [r7, #16]
      break;
 8002370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002372:	693b      	ldr	r3, [r7, #16]
}
 8002374:	4618      	mov	r0, r3
 8002376:	371c      	adds	r7, #28
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	007a1200 	.word	0x007a1200
 8002388:	08002c08 	.word	0x08002c08
 800238c:	08002c18 	.word	0x08002c18
 8002390:	003d0900 	.word	0x003d0900

08002394 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800239c:	4b0a      	ldr	r3, [pc, #40]	@ (80023c8 <RCC_Delay+0x34>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0a      	ldr	r2, [pc, #40]	@ (80023cc <RCC_Delay+0x38>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	0a5b      	lsrs	r3, r3, #9
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	fb02 f303 	mul.w	r3, r2, r3
 80023ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023b0:	bf00      	nop
  }
  while (Delay --);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1e5a      	subs	r2, r3, #1
 80023b6:	60fa      	str	r2, [r7, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f9      	bne.n	80023b0 <RCC_Delay+0x1c>
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	200000c8 	.word	0x200000c8
 80023cc:	10624dd3 	.word	0x10624dd3

080023d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e041      	b.n	8002466 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d106      	bne.n	80023fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff f852 	bl	80014a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3304      	adds	r3, #4
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f000 fa56 	bl	80028c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d001      	beq.n	8002488 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e035      	b.n	80024f4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a16      	ldr	r2, [pc, #88]	@ (8002500 <HAL_TIM_Base_Start_IT+0x90>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d009      	beq.n	80024be <HAL_TIM_Base_Start_IT+0x4e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024b2:	d004      	beq.n	80024be <HAL_TIM_Base_Start_IT+0x4e>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a12      	ldr	r2, [pc, #72]	@ (8002504 <HAL_TIM_Base_Start_IT+0x94>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d111      	bne.n	80024e2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b06      	cmp	r3, #6
 80024ce:	d010      	beq.n	80024f2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e0:	e007      	b.n	80024f2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40012c00 	.word	0x40012c00
 8002504:	40000400 	.word	0x40000400

08002508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d020      	beq.n	800256c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01b      	beq.n	800256c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0202 	mvn.w	r2, #2
 800253c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f998 	bl	8002888 <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f98b 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f99a 	bl	800289a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d020      	beq.n	80025b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01b      	beq.n	80025b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0204 	mvn.w	r2, #4
 8002588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2202      	movs	r2, #2
 800258e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f972 	bl	8002888 <HAL_TIM_IC_CaptureCallback>
 80025a4:	e005      	b.n	80025b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f965 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f974 	bl	800289a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d020      	beq.n	8002604 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01b      	beq.n	8002604 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0208 	mvn.w	r2, #8
 80025d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2204      	movs	r2, #4
 80025da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f94c 	bl	8002888 <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f93f 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f94e 	bl	800289a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b00      	cmp	r3, #0
 800260c:	d020      	beq.n	8002650 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01b      	beq.n	8002650 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 0210 	mvn.w	r2, #16
 8002620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2208      	movs	r2, #8
 8002626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f926 	bl	8002888 <HAL_TIM_IC_CaptureCallback>
 800263c:	e005      	b.n	800264a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f919 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f928 	bl	800289a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00c      	beq.n	8002674 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d007      	beq.n	8002674 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0201 	mvn.w	r2, #1
 800266c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fe fed2 	bl	8001418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00c      	beq.n	8002698 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002684:	2b00      	cmp	r3, #0
 8002686:	d007      	beq.n	8002698 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fa6f 	bl	8002b76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00c      	beq.n	80026bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f8f8 	bl	80028ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00c      	beq.n	80026e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f003 0320 	and.w	r3, r3, #32
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d007      	beq.n	80026e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0220 	mvn.w	r2, #32
 80026d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fa42 	bl	8002b64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_TIM_ConfigClockSource+0x1c>
 8002700:	2302      	movs	r3, #2
 8002702:	e0b4      	b.n	800286e <HAL_TIM_ConfigClockSource+0x186>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800272a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800273c:	d03e      	beq.n	80027bc <HAL_TIM_ConfigClockSource+0xd4>
 800273e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002742:	f200 8087 	bhi.w	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800274a:	f000 8086 	beq.w	800285a <HAL_TIM_ConfigClockSource+0x172>
 800274e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002752:	d87f      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002754:	2b70      	cmp	r3, #112	@ 0x70
 8002756:	d01a      	beq.n	800278e <HAL_TIM_ConfigClockSource+0xa6>
 8002758:	2b70      	cmp	r3, #112	@ 0x70
 800275a:	d87b      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 800275c:	2b60      	cmp	r3, #96	@ 0x60
 800275e:	d050      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x11a>
 8002760:	2b60      	cmp	r3, #96	@ 0x60
 8002762:	d877      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002764:	2b50      	cmp	r3, #80	@ 0x50
 8002766:	d03c      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0xfa>
 8002768:	2b50      	cmp	r3, #80	@ 0x50
 800276a:	d873      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 800276c:	2b40      	cmp	r3, #64	@ 0x40
 800276e:	d058      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x13a>
 8002770:	2b40      	cmp	r3, #64	@ 0x40
 8002772:	d86f      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002774:	2b30      	cmp	r3, #48	@ 0x30
 8002776:	d064      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15a>
 8002778:	2b30      	cmp	r3, #48	@ 0x30
 800277a:	d86b      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 800277c:	2b20      	cmp	r3, #32
 800277e:	d060      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15a>
 8002780:	2b20      	cmp	r3, #32
 8002782:	d867      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002784:	2b00      	cmp	r3, #0
 8002786:	d05c      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15a>
 8002788:	2b10      	cmp	r3, #16
 800278a:	d05a      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15a>
 800278c:	e062      	b.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800279e:	f000 f96a 	bl	8002a76 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	609a      	str	r2, [r3, #8]
      break;
 80027ba:	e04f      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027cc:	f000 f953 	bl	8002a76 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027de:	609a      	str	r2, [r3, #8]
      break;
 80027e0:	e03c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ee:	461a      	mov	r2, r3
 80027f0:	f000 f8ca 	bl	8002988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2150      	movs	r1, #80	@ 0x50
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f921 	bl	8002a42 <TIM_ITRx_SetConfig>
      break;
 8002800:	e02c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800280e:	461a      	mov	r2, r3
 8002810:	f000 f8e8 	bl	80029e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2160      	movs	r1, #96	@ 0x60
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f911 	bl	8002a42 <TIM_ITRx_SetConfig>
      break;
 8002820:	e01c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800282e:	461a      	mov	r2, r3
 8002830:	f000 f8aa 	bl	8002988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2140      	movs	r1, #64	@ 0x40
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f901 	bl	8002a42 <TIM_ITRx_SetConfig>
      break;
 8002840:	e00c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4619      	mov	r1, r3
 800284c:	4610      	mov	r0, r2
 800284e:	f000 f8f8 	bl	8002a42 <TIM_ITRx_SetConfig>
      break;
 8002852:	e003      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      break;
 8002858:	e000      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800285a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800286c:	7bfb      	ldrb	r3, [r7, #15]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
	...

080028c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a2b      	ldr	r2, [pc, #172]	@ (8002980 <TIM_Base_SetConfig+0xc0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d007      	beq.n	80028e8 <TIM_Base_SetConfig+0x28>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028de:	d003      	beq.n	80028e8 <TIM_Base_SetConfig+0x28>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a28      	ldr	r2, [pc, #160]	@ (8002984 <TIM_Base_SetConfig+0xc4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d108      	bne.n	80028fa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a20      	ldr	r2, [pc, #128]	@ (8002980 <TIM_Base_SetConfig+0xc0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d007      	beq.n	8002912 <TIM_Base_SetConfig+0x52>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002908:	d003      	beq.n	8002912 <TIM_Base_SetConfig+0x52>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a1d      	ldr	r2, [pc, #116]	@ (8002984 <TIM_Base_SetConfig+0xc4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d108      	bne.n	8002924 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4313      	orrs	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a0d      	ldr	r2, [pc, #52]	@ (8002980 <TIM_Base_SetConfig+0xc0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d103      	bne.n	8002958 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f023 0201 	bic.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	611a      	str	r2, [r3, #16]
  }
}
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	40012c00 	.word	0x40012c00
 8002984:	40000400 	.word	0x40000400

08002988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	f023 0201 	bic.w	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f023 030a 	bic.w	r3, r3, #10
 80029c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	621a      	str	r2, [r3, #32]
}
 80029da:	bf00      	nop
 80029dc:	371c      	adds	r7, #28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	f023 0210 	bic.w	r2, r3, #16
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	031b      	lsls	r3, r3, #12
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a20:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	621a      	str	r2, [r3, #32]
}
 8002a38:	bf00      	nop
 8002a3a:	371c      	adds	r7, #28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f043 0307 	orr.w	r3, r3, #7
 8002a64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	609a      	str	r2, [r3, #8]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr

08002a76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b087      	sub	sp, #28
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	021a      	lsls	r2, r3, #8
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	609a      	str	r2, [r3, #8]
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e041      	b.n	8002b50 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a14      	ldr	r2, [pc, #80]	@ (8002b5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d009      	beq.n	8002b24 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b18:	d004      	beq.n	8002b24 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a10      	ldr	r2, [pc, #64]	@ (8002b60 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d10c      	bne.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40012c00 	.word	0x40012c00
 8002b60:	40000400 	.word	0x40000400

08002b64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <memset>:
 8002b88:	4603      	mov	r3, r0
 8002b8a:	4402      	add	r2, r0
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d100      	bne.n	8002b92 <memset+0xa>
 8002b90:	4770      	bx	lr
 8002b92:	f803 1b01 	strb.w	r1, [r3], #1
 8002b96:	e7f9      	b.n	8002b8c <memset+0x4>

08002b98 <__libc_init_array>:
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	2600      	movs	r6, #0
 8002b9c:	4d0c      	ldr	r5, [pc, #48]	@ (8002bd0 <__libc_init_array+0x38>)
 8002b9e:	4c0d      	ldr	r4, [pc, #52]	@ (8002bd4 <__libc_init_array+0x3c>)
 8002ba0:	1b64      	subs	r4, r4, r5
 8002ba2:	10a4      	asrs	r4, r4, #2
 8002ba4:	42a6      	cmp	r6, r4
 8002ba6:	d109      	bne.n	8002bbc <__libc_init_array+0x24>
 8002ba8:	f000 f81a 	bl	8002be0 <_init>
 8002bac:	2600      	movs	r6, #0
 8002bae:	4d0a      	ldr	r5, [pc, #40]	@ (8002bd8 <__libc_init_array+0x40>)
 8002bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8002bdc <__libc_init_array+0x44>)
 8002bb2:	1b64      	subs	r4, r4, r5
 8002bb4:	10a4      	asrs	r4, r4, #2
 8002bb6:	42a6      	cmp	r6, r4
 8002bb8:	d105      	bne.n	8002bc6 <__libc_init_array+0x2e>
 8002bba:	bd70      	pop	{r4, r5, r6, pc}
 8002bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bc0:	4798      	blx	r3
 8002bc2:	3601      	adds	r6, #1
 8002bc4:	e7ee      	b.n	8002ba4 <__libc_init_array+0xc>
 8002bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bca:	4798      	blx	r3
 8002bcc:	3601      	adds	r6, #1
 8002bce:	e7f2      	b.n	8002bb6 <__libc_init_array+0x1e>
 8002bd0:	08002c1c 	.word	0x08002c1c
 8002bd4:	08002c1c 	.word	0x08002c1c
 8002bd8:	08002c1c 	.word	0x08002c1c
 8002bdc:	08002c20 	.word	0x08002c20

08002be0 <_init>:
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	bf00      	nop
 8002be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be6:	bc08      	pop	{r3}
 8002be8:	469e      	mov	lr, r3
 8002bea:	4770      	bx	lr

08002bec <_fini>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	bf00      	nop
 8002bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf2:	bc08      	pop	{r3}
 8002bf4:	469e      	mov	lr, r3
 8002bf6:	4770      	bx	lr
