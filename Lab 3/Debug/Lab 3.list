
Lab 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022b8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080023c4  080023c4  000033c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023e8  080023e8  00004098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080023e8  080023e8  00004098  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080023e8  080023e8  00004098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023e8  080023e8  000033e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023ec  080023ec  000033ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  080023f0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000098  08002488  00004098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08002488  00004148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c79  00000000  00000000  000040c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cbf  00000000  00000000  0000cd3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0000ea00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b7  00000000  00000000  0000f438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f3e  00000000  00000000  0000fbef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c77f  00000000  00000000  00026b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008264c  00000000  00000000  000332ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b58f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002844  00000000  00000000  000b593c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000b8180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	080023ac 	.word	0x080023ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	080023ac 	.word	0x080023ac

0800014c <fsm_traffic_run>:
 */

#include "fsm_traffic.h"
#include "leds_display.h"

void fsm_traffic_run() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
	switch(systemMode)
 8000152:	4ba1      	ldr	r3, [pc, #644]	@ (80003d8 <fsm_traffic_run+0x28c>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	3b01      	subs	r3, #1
 8000158:	2b03      	cmp	r3, #3
 800015a:	f200 8130 	bhi.w	80003be <fsm_traffic_run+0x272>
 800015e:	a201      	add	r2, pc, #4	@ (adr r2, 8000164 <fsm_traffic_run+0x18>)
 8000160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000164:	08000175 	.word	0x08000175
 8000168:	080002b1 	.word	0x080002b1
 800016c:	0800030b 	.word	0x0800030b
 8000170:	08000365 	.word	0x08000365
//				systemMode = SET_RED;
//			}
////			setTimer1(5000);
//			break;

		if (start_new_loop) {
 8000174:	4b99      	ldr	r3, [pc, #612]	@ (80003dc <fsm_traffic_run+0x290>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d007      	beq.n	800018c <fsm_traffic_run+0x40>
			start_new_loop = 0;
 800017c:	4b97      	ldr	r3, [pc, #604]	@ (80003dc <fsm_traffic_run+0x290>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
			setTimer2(green_ms);
 8000182:	4b97      	ldr	r3, [pc, #604]	@ (80003e0 <fsm_traffic_run+0x294>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4618      	mov	r0, r3
 8000188:	f000 fc9e 	bl	8000ac8 <setTimer2>
		}

		switch (trafficState)
 800018c:	4b95      	ldr	r3, [pc, #596]	@ (80003e4 <fsm_traffic_run+0x298>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	3b0b      	subs	r3, #11
 8000192:	2b03      	cmp	r3, #3
 8000194:	f200 8115 	bhi.w	80003c2 <fsm_traffic_run+0x276>
 8000198:	a201      	add	r2, pc, #4	@ (adr r2, 80001a0 <fsm_traffic_run+0x54>)
 800019a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800019e:	bf00      	nop
 80001a0:	080001b1 	.word	0x080001b1
 80001a4:	080001ed 	.word	0x080001ed
 80001a8:	08000229 	.word	0x08000229
 80001ac:	08000265 	.word	0x08000265
		{
		case RED1_GREEN2_AUTO:
			setLEDs(LED_RED_1_Pin, LED_GREEN_2_Pin, -1, -1, -1, -1);
 80001b0:	f04f 33ff 	mov.w	r3, #4294967295
 80001b4:	9301      	str	r3, [sp, #4]
 80001b6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ba:	9300      	str	r3, [sp, #0]
 80001bc:	f04f 33ff 	mov.w	r3, #4294967295
 80001c0:	f04f 32ff 	mov.w	r2, #4294967295
 80001c4:	2140      	movs	r1, #64	@ 0x40
 80001c6:	2002      	movs	r0, #2
 80001c8:	f000 faa8 	bl	800071c <setLEDs>
			if (timer2_flag) {
 80001cc:	4b86      	ldr	r3, [pc, #536]	@ (80003e8 <fsm_traffic_run+0x29c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d065      	beq.n	80002a0 <fsm_traffic_run+0x154>
				timer2_flag = 0;
 80001d4:	4b84      	ldr	r3, [pc, #528]	@ (80003e8 <fsm_traffic_run+0x29c>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
				setTimer2(yellow_ms);
 80001da:	4b84      	ldr	r3, [pc, #528]	@ (80003ec <fsm_traffic_run+0x2a0>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4618      	mov	r0, r3
 80001e0:	f000 fc72 	bl	8000ac8 <setTimer2>
				trafficState = RED1_YELLOW2_AUTO;
 80001e4:	4b7f      	ldr	r3, [pc, #508]	@ (80003e4 <fsm_traffic_run+0x298>)
 80001e6:	220c      	movs	r2, #12
 80001e8:	601a      	str	r2, [r3, #0]
			}
			break;
 80001ea:	e059      	b.n	80002a0 <fsm_traffic_run+0x154>

		case RED1_YELLOW2_AUTO:
			setLEDs(LED_RED_1_Pin, LED_YELLOW_2_Pin, -1, -1, -1, -1);
 80001ec:	f04f 33ff 	mov.w	r3, #4294967295
 80001f0:	9301      	str	r3, [sp, #4]
 80001f2:	f04f 33ff 	mov.w	r3, #4294967295
 80001f6:	9300      	str	r3, [sp, #0]
 80001f8:	f04f 33ff 	mov.w	r3, #4294967295
 80001fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000200:	2120      	movs	r1, #32
 8000202:	2002      	movs	r0, #2
 8000204:	f000 fa8a 	bl	800071c <setLEDs>
			if (timer2_flag) {
 8000208:	4b77      	ldr	r3, [pc, #476]	@ (80003e8 <fsm_traffic_run+0x29c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d049      	beq.n	80002a4 <fsm_traffic_run+0x158>
				timer2_flag = 0;
 8000210:	4b75      	ldr	r3, [pc, #468]	@ (80003e8 <fsm_traffic_run+0x29c>)
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
				setTimer2(green_ms);
 8000216:	4b72      	ldr	r3, [pc, #456]	@ (80003e0 <fsm_traffic_run+0x294>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4618      	mov	r0, r3
 800021c:	f000 fc54 	bl	8000ac8 <setTimer2>
				trafficState = GREEN1_RED2_AUTO;
 8000220:	4b70      	ldr	r3, [pc, #448]	@ (80003e4 <fsm_traffic_run+0x298>)
 8000222:	220d      	movs	r2, #13
 8000224:	601a      	str	r2, [r3, #0]
			}
			break;
 8000226:	e03d      	b.n	80002a4 <fsm_traffic_run+0x158>

		case GREEN1_RED2_AUTO:
			setLEDs(LED_GREEN_1_Pin, LED_RED_2_Pin, -1, -1, -1, -1);
 8000228:	f04f 33ff 	mov.w	r3, #4294967295
 800022c:	9301      	str	r3, [sp, #4]
 800022e:	f04f 33ff 	mov.w	r3, #4294967295
 8000232:	9300      	str	r3, [sp, #0]
 8000234:	f04f 33ff 	mov.w	r3, #4294967295
 8000238:	f04f 32ff 	mov.w	r2, #4294967295
 800023c:	2110      	movs	r1, #16
 800023e:	2008      	movs	r0, #8
 8000240:	f000 fa6c 	bl	800071c <setLEDs>
			if (timer2_flag) {
 8000244:	4b68      	ldr	r3, [pc, #416]	@ (80003e8 <fsm_traffic_run+0x29c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d02d      	beq.n	80002a8 <fsm_traffic_run+0x15c>
				timer2_flag = 0;
 800024c:	4b66      	ldr	r3, [pc, #408]	@ (80003e8 <fsm_traffic_run+0x29c>)
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
				setTimer2(yellow_ms);
 8000252:	4b66      	ldr	r3, [pc, #408]	@ (80003ec <fsm_traffic_run+0x2a0>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4618      	mov	r0, r3
 8000258:	f000 fc36 	bl	8000ac8 <setTimer2>
				trafficState = YELLOW1_RED2_AUTO;
 800025c:	4b61      	ldr	r3, [pc, #388]	@ (80003e4 <fsm_traffic_run+0x298>)
 800025e:	220e      	movs	r2, #14
 8000260:	601a      	str	r2, [r3, #0]
			}
			break;
 8000262:	e021      	b.n	80002a8 <fsm_traffic_run+0x15c>

		case YELLOW1_RED2_AUTO:
			setLEDs(LED_YELLOW_1_Pin, LED_RED_2_Pin, -1, -1, -1, -1);
 8000264:	f04f 33ff 	mov.w	r3, #4294967295
 8000268:	9301      	str	r3, [sp, #4]
 800026a:	f04f 33ff 	mov.w	r3, #4294967295
 800026e:	9300      	str	r3, [sp, #0]
 8000270:	f04f 33ff 	mov.w	r3, #4294967295
 8000274:	f04f 32ff 	mov.w	r2, #4294967295
 8000278:	2110      	movs	r1, #16
 800027a:	2004      	movs	r0, #4
 800027c:	f000 fa4e 	bl	800071c <setLEDs>
			if (timer2_flag) {
 8000280:	4b59      	ldr	r3, [pc, #356]	@ (80003e8 <fsm_traffic_run+0x29c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d011      	beq.n	80002ac <fsm_traffic_run+0x160>
				timer2_flag = 0;
 8000288:	4b57      	ldr	r3, [pc, #348]	@ (80003e8 <fsm_traffic_run+0x29c>)
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
				setTimer2(red_ms);
 800028e:	4b58      	ldr	r3, [pc, #352]	@ (80003f0 <fsm_traffic_run+0x2a4>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4618      	mov	r0, r3
 8000294:	f000 fc18 	bl	8000ac8 <setTimer2>
				trafficState = RED1_GREEN2_AUTO;
 8000298:	4b52      	ldr	r3, [pc, #328]	@ (80003e4 <fsm_traffic_run+0x298>)
 800029a:	220b      	movs	r2, #11
 800029c:	601a      	str	r2, [r3, #0]
			}
			break;
 800029e:	e005      	b.n	80002ac <fsm_traffic_run+0x160>
			break;
 80002a0:	bf00      	nop
 80002a2:	e08e      	b.n	80003c2 <fsm_traffic_run+0x276>
			break;
 80002a4:	bf00      	nop
 80002a6:	e08c      	b.n	80003c2 <fsm_traffic_run+0x276>
			break;
 80002a8:	bf00      	nop
 80002aa:	e08a      	b.n	80003c2 <fsm_traffic_run+0x276>
			break;
 80002ac:	bf00      	nop
		}
		break;
 80002ae:	e088      	b.n	80003c2 <fsm_traffic_run+0x276>

	// ---------------- SET MODES ----------------
	case SET_RED:

		HAL_GPIO_WritePin(GPIOB, LED_YELLOW_1_Pin, GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2104      	movs	r1, #4
 80002b4:	484f      	ldr	r0, [pc, #316]	@ (80003f4 <fsm_traffic_run+0x2a8>)
 80002b6:	f001 f862 	bl	800137e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 80002ba:	2200      	movs	r2, #0
 80002bc:	2120      	movs	r1, #32
 80002be:	484d      	ldr	r0, [pc, #308]	@ (80003f4 <fsm_traffic_run+0x2a8>)
 80002c0:	f001 f85d 	bl	800137e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2108      	movs	r1, #8
 80002c8:	484a      	ldr	r0, [pc, #296]	@ (80003f4 <fsm_traffic_run+0x2a8>)
 80002ca:	f001 f858 	bl	800137e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2140      	movs	r1, #64	@ 0x40
 80002d2:	4848      	ldr	r0, [pc, #288]	@ (80003f4 <fsm_traffic_run+0x2a8>)
 80002d4:	f001 f853 	bl	800137e <HAL_GPIO_WritePin>

		if(timer0_flag == 1) {
 80002d8:	4b47      	ldr	r3, [pc, #284]	@ (80003f8 <fsm_traffic_run+0x2ac>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d10a      	bne.n	80002f6 <fsm_traffic_run+0x1aa>
			setTimer0(250);
 80002e0:	20fa      	movs	r0, #250	@ 0xfa
 80002e2:	f000 fbb9 	bl	8000a58 <setTimer0>

			HAL_GPIO_TogglePin(GPIOB, LED_RED_1_Pin);
 80002e6:	2102      	movs	r1, #2
 80002e8:	4842      	ldr	r0, [pc, #264]	@ (80003f4 <fsm_traffic_run+0x2a8>)
 80002ea:	f001 f860 	bl	80013ae <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, LED_RED_2_Pin);
 80002ee:	2110      	movs	r1, #16
 80002f0:	4840      	ldr	r0, [pc, #256]	@ (80003f4 <fsm_traffic_run+0x2a8>)
 80002f2:	f001 f85c 	bl	80013ae <HAL_GPIO_TogglePin>
//			if(timer1_flag == 1) {
//				systemMode = SET_YELLOW;
//				setTimer1(3000);
//			}

		if (is_button_pressed(0)) {
 80002f6:	2000      	movs	r0, #0
 80002f8:	f000 f94c 	bl	8000594 <is_button_pressed>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d061      	beq.n	80003c6 <fsm_traffic_run+0x27a>
			systemMode = SET_YELLOW;
 8000302:	4b35      	ldr	r3, [pc, #212]	@ (80003d8 <fsm_traffic_run+0x28c>)
 8000304:	2203      	movs	r2, #3
 8000306:	601a      	str	r2, [r3, #0]
		}

		break;
 8000308:	e05d      	b.n	80003c6 <fsm_traffic_run+0x27a>

	case SET_YELLOW:
		HAL_GPIO_WritePin(GPIOB, LED_RED_1_Pin, GPIO_PIN_RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	2102      	movs	r1, #2
 800030e:	4839      	ldr	r0, [pc, #228]	@ (80003f4 <fsm_traffic_run+0x2a8>)
 8000310:	f001 f835 	bl	800137e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_RED_2_Pin, GPIO_PIN_RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	2110      	movs	r1, #16
 8000318:	4836      	ldr	r0, [pc, #216]	@ (80003f4 <fsm_traffic_run+0x2a8>)
 800031a:	f001 f830 	bl	800137e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800031e:	2200      	movs	r2, #0
 8000320:	2108      	movs	r1, #8
 8000322:	4834      	ldr	r0, [pc, #208]	@ (80003f4 <fsm_traffic_run+0x2a8>)
 8000324:	f001 f82b 	bl	800137e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2140      	movs	r1, #64	@ 0x40
 800032c:	4831      	ldr	r0, [pc, #196]	@ (80003f4 <fsm_traffic_run+0x2a8>)
 800032e:	f001 f826 	bl	800137e <HAL_GPIO_WritePin>

		if(timer0_flag == 1) {
 8000332:	4b31      	ldr	r3, [pc, #196]	@ (80003f8 <fsm_traffic_run+0x2ac>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2b01      	cmp	r3, #1
 8000338:	d10a      	bne.n	8000350 <fsm_traffic_run+0x204>
			setTimer0(250);
 800033a:	20fa      	movs	r0, #250	@ 0xfa
 800033c:	f000 fb8c 	bl	8000a58 <setTimer0>

			HAL_GPIO_TogglePin(GPIOB, LED_YELLOW_1_Pin);
 8000340:	2104      	movs	r1, #4
 8000342:	482c      	ldr	r0, [pc, #176]	@ (80003f4 <fsm_traffic_run+0x2a8>)
 8000344:	f001 f833 	bl	80013ae <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, LED_YELLOW_2_Pin);
 8000348:	2120      	movs	r1, #32
 800034a:	482a      	ldr	r0, [pc, #168]	@ (80003f4 <fsm_traffic_run+0x2a8>)
 800034c:	f001 f82f 	bl	80013ae <HAL_GPIO_TogglePin>
//			if(timer1_flag == 1) {
//				systemMode = SET_GREEN;
//				setTimer1(5000);
//			}

		if (is_button_pressed(0)) {
 8000350:	2000      	movs	r0, #0
 8000352:	f000 f91f 	bl	8000594 <is_button_pressed>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d036      	beq.n	80003ca <fsm_traffic_run+0x27e>
			systemMode = SET_GREEN;
 800035c:	4b1e      	ldr	r3, [pc, #120]	@ (80003d8 <fsm_traffic_run+0x28c>)
 800035e:	2204      	movs	r2, #4
 8000360:	601a      	str	r2, [r3, #0]
		}

		break;
 8000362:	e032      	b.n	80003ca <fsm_traffic_run+0x27e>

	case SET_GREEN:
		HAL_GPIO_WritePin(GPIOB, LED_RED_1_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2102      	movs	r1, #2
 8000368:	4822      	ldr	r0, [pc, #136]	@ (80003f4 <fsm_traffic_run+0x2a8>)
 800036a:	f001 f808 	bl	800137e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_RED_2_Pin, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2110      	movs	r1, #16
 8000372:	4820      	ldr	r0, [pc, #128]	@ (80003f4 <fsm_traffic_run+0x2a8>)
 8000374:	f001 f803 	bl	800137e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, LED_YELLOW_1_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2104      	movs	r1, #4
 800037c:	481d      	ldr	r0, [pc, #116]	@ (80003f4 <fsm_traffic_run+0x2a8>)
 800037e:	f000 fffe 	bl	800137e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	2120      	movs	r1, #32
 8000386:	481b      	ldr	r0, [pc, #108]	@ (80003f4 <fsm_traffic_run+0x2a8>)
 8000388:	f000 fff9 	bl	800137e <HAL_GPIO_WritePin>


		if(timer0_flag == 1) {
 800038c:	4b1a      	ldr	r3, [pc, #104]	@ (80003f8 <fsm_traffic_run+0x2ac>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2b01      	cmp	r3, #1
 8000392:	d10a      	bne.n	80003aa <fsm_traffic_run+0x25e>
			setTimer0(250);
 8000394:	20fa      	movs	r0, #250	@ 0xfa
 8000396:	f000 fb5f 	bl	8000a58 <setTimer0>

			HAL_GPIO_TogglePin(GPIOB, LED_GREEN_1_Pin);
 800039a:	2108      	movs	r1, #8
 800039c:	4815      	ldr	r0, [pc, #84]	@ (80003f4 <fsm_traffic_run+0x2a8>)
 800039e:	f001 f806 	bl	80013ae <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, LED_GREEN_2_Pin);
 80003a2:	2140      	movs	r1, #64	@ 0x40
 80003a4:	4813      	ldr	r0, [pc, #76]	@ (80003f4 <fsm_traffic_run+0x2a8>)
 80003a6:	f001 f802 	bl	80013ae <HAL_GPIO_TogglePin>
//			if(timer1_flag == 1) {
//				systemMode = SET_RED;
//				setTimer1(5000);
//			}

		if (is_button_pressed(0)) {
 80003aa:	2000      	movs	r0, #0
 80003ac:	f000 f8f2 	bl	8000594 <is_button_pressed>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d00b      	beq.n	80003ce <fsm_traffic_run+0x282>
			systemMode = SET_RED;
 80003b6:	4b08      	ldr	r3, [pc, #32]	@ (80003d8 <fsm_traffic_run+0x28c>)
 80003b8:	2202      	movs	r2, #2
 80003ba:	601a      	str	r2, [r3, #0]
		}

		break;
 80003bc:	e007      	b.n	80003ce <fsm_traffic_run+0x282>

	default:
		break;
 80003be:	bf00      	nop
 80003c0:	e006      	b.n	80003d0 <fsm_traffic_run+0x284>
		break;
 80003c2:	bf00      	nop
 80003c4:	e004      	b.n	80003d0 <fsm_traffic_run+0x284>
		break;
 80003c6:	bf00      	nop
 80003c8:	e002      	b.n	80003d0 <fsm_traffic_run+0x284>
		break;
 80003ca:	bf00      	nop
 80003cc:	e000      	b.n	80003d0 <fsm_traffic_run+0x284>
		break;
 80003ce:	bf00      	nop
	}
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	200000b4 	.word	0x200000b4
 80003dc:	20000000 	.word	0x20000000
 80003e0:	2000000c 	.word	0x2000000c
 80003e4:	200000b8 	.word	0x200000b8
 80003e8:	2000012c 	.word	0x2000012c
 80003ec:	20000008 	.word	0x20000008
 80003f0:	20000004 	.word	0x20000004
 80003f4:	40010c00 	.word	0x40010c00
 80003f8:	20000124 	.word	0x20000124

080003fc <fsm_for_input_processing>:
#include "global.h"

enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND} ;
enum ButtonState buttonState = BUTTON_RELEASED;

void fsm_for_input_processing(void) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	switch(buttonState) {
 8000400:	4b25      	ldr	r3, [pc, #148]	@ (8000498 <fsm_for_input_processing+0x9c>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	2b02      	cmp	r3, #2
 8000406:	d033      	beq.n	8000470 <fsm_for_input_processing+0x74>
 8000408:	2b02      	cmp	r3, #2
 800040a:	dc3b      	bgt.n	8000484 <fsm_for_input_processing+0x88>
 800040c:	2b00      	cmp	r3, #0
 800040e:	d002      	beq.n	8000416 <fsm_for_input_processing+0x1a>
 8000410:	2b01      	cmp	r3, #1
 8000412:	d019      	beq.n	8000448 <fsm_for_input_processing+0x4c>
				buttonState = BUTTON_RELEASED;
			}
			//todo
			break;
		default:
			break;
 8000414:	e036      	b.n	8000484 <fsm_for_input_processing+0x88>
			if(is_button_pressed(0)) {
 8000416:	2000      	movs	r0, #0
 8000418:	f000 f8bc 	bl	8000594 <is_button_pressed>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d032      	beq.n	8000488 <fsm_for_input_processing+0x8c>
				buttonState = BUTTON_PRESSED;
 8000422:	4b1d      	ldr	r3, [pc, #116]	@ (8000498 <fsm_for_input_processing+0x9c>)
 8000424:	2201      	movs	r2, #1
 8000426:	701a      	strb	r2, [r3, #0]
				systemMode++;
 8000428:	4b1c      	ldr	r3, [pc, #112]	@ (800049c <fsm_for_input_processing+0xa0>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	4a1b      	ldr	r2, [pc, #108]	@ (800049c <fsm_for_input_processing+0xa0>)
 8000430:	6013      	str	r3, [r2, #0]
				if (systemMode > SET_GREEN) {
 8000432:	4b1a      	ldr	r3, [pc, #104]	@ (800049c <fsm_for_input_processing+0xa0>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b04      	cmp	r3, #4
 8000438:	dd26      	ble.n	8000488 <fsm_for_input_processing+0x8c>
					systemMode = INIT;
 800043a:	4b18      	ldr	r3, [pc, #96]	@ (800049c <fsm_for_input_processing+0xa0>)
 800043c:	2201      	movs	r2, #1
 800043e:	601a      	str	r2, [r3, #0]
					trafficState = RED1_GREEN2_AUTO;
 8000440:	4b17      	ldr	r3, [pc, #92]	@ (80004a0 <fsm_for_input_processing+0xa4>)
 8000442:	220b      	movs	r2, #11
 8000444:	601a      	str	r2, [r3, #0]
			break;
 8000446:	e01f      	b.n	8000488 <fsm_for_input_processing+0x8c>
			if(!is_button_pressed(0)) {
 8000448:	2000      	movs	r0, #0
 800044a:	f000 f8a3 	bl	8000594 <is_button_pressed>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d103      	bne.n	800045c <fsm_for_input_processing+0x60>
				buttonState = BUTTON_RELEASED;
 8000454:	4b10      	ldr	r3, [pc, #64]	@ (8000498 <fsm_for_input_processing+0x9c>)
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]
			break;
 800045a:	e017      	b.n	800048c <fsm_for_input_processing+0x90>
				if(is_button_pressed_1s(0)) {
 800045c:	2000      	movs	r0, #0
 800045e:	f000 f8b3 	bl	80005c8 <is_button_pressed_1s>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d011      	beq.n	800048c <fsm_for_input_processing+0x90>
					buttonState = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000468:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <fsm_for_input_processing+0x9c>)
 800046a:	2202      	movs	r2, #2
 800046c:	701a      	strb	r2, [r3, #0]
			break;
 800046e:	e00d      	b.n	800048c <fsm_for_input_processing+0x90>
			if(!is_button_pressed(0)) {
 8000470:	2000      	movs	r0, #0
 8000472:	f000 f88f 	bl	8000594 <is_button_pressed>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d109      	bne.n	8000490 <fsm_for_input_processing+0x94>
				buttonState = BUTTON_RELEASED;
 800047c:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <fsm_for_input_processing+0x9c>)
 800047e:	2200      	movs	r2, #0
 8000480:	701a      	strb	r2, [r3, #0]
			break;
 8000482:	e005      	b.n	8000490 <fsm_for_input_processing+0x94>
			break;
 8000484:	bf00      	nop
 8000486:	e004      	b.n	8000492 <fsm_for_input_processing+0x96>
			break;
 8000488:	bf00      	nop
 800048a:	e002      	b.n	8000492 <fsm_for_input_processing+0x96>
			break;
 800048c:	bf00      	nop
 800048e:	e000      	b.n	8000492 <fsm_for_input_processing+0x96>
			break;
 8000490:	bf00      	nop
	}
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	200000bc 	.word	0x200000bc
 800049c:	200000b4 	.word	0x200000b4
 80004a0:	200000b8 	.word	0x200000b8

080004a4 <button_reading>:

int BUTTON_Pins[N0_OF_BUTTONS] = {
		BUTTON_1_Pin//, BUTTON_2_Pin, BUTTON_3_Pin
};

void button_reading(void) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
//	for(char i = 0; i < N0_OF_BUTTONS; i++) {
	for(int i = 0; i < N0_OF_BUTTONS; i++) {
 80004aa:	2300      	movs	r3, #0
 80004ac:	607b      	str	r3, [r7, #4]
 80004ae:	e05b      	b.n	8000568 <button_reading+0xc4>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80004b0:	4a31      	ldr	r2, [pc, #196]	@ (8000578 <button_reading+0xd4>)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4413      	add	r3, r2
 80004b6:	7819      	ldrb	r1, [r3, #0]
 80004b8:	4a30      	ldr	r2, [pc, #192]	@ (800057c <button_reading+0xd8>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4413      	add	r3, r2
 80004be:	460a      	mov	r2, r1
 80004c0:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOB, BUTTON_Pins[i]);
 80004c2:	4a2f      	ldr	r2, [pc, #188]	@ (8000580 <button_reading+0xdc>)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	4619      	mov	r1, r3
 80004ce:	482d      	ldr	r0, [pc, #180]	@ (8000584 <button_reading+0xe0>)
 80004d0:	f000 ff3e 	bl	8001350 <HAL_GPIO_ReadPin>
 80004d4:	4603      	mov	r3, r0
 80004d6:	4619      	mov	r1, r3
 80004d8:	4a27      	ldr	r2, [pc, #156]	@ (8000578 <button_reading+0xd4>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4413      	add	r3, r2
 80004de:	460a      	mov	r2, r1
 80004e0:	701a      	strb	r2, [r3, #0]

		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 80004e2:	4a25      	ldr	r2, [pc, #148]	@ (8000578 <button_reading+0xd4>)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4413      	add	r3, r2
 80004e8:	781a      	ldrb	r2, [r3, #0]
 80004ea:	4924      	ldr	r1, [pc, #144]	@ (800057c <button_reading+0xd8>)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	440b      	add	r3, r1
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d108      	bne.n	8000508 <button_reading+0x64>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80004f6:	4a20      	ldr	r2, [pc, #128]	@ (8000578 <button_reading+0xd4>)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4413      	add	r3, r2
 80004fc:	7819      	ldrb	r1, [r3, #0]
 80004fe:	4a22      	ldr	r2, [pc, #136]	@ (8000588 <button_reading+0xe4>)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4413      	add	r3, r2
 8000504:	460a      	mov	r2, r1
 8000506:	701a      	strb	r2, [r3, #0]
		}

		if(buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000508:	4a1f      	ldr	r2, [pc, #124]	@ (8000588 <button_reading+0xe4>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d11c      	bne.n	800054e <button_reading+0xaa>
			//if a button is pressed, we start counting
			if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000514:	4a1d      	ldr	r2, [pc, #116]	@ (800058c <button_reading+0xe8>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800051c:	2b63      	cmp	r3, #99	@ 0x63
 800051e:	d80a      	bhi.n	8000536 <button_reading+0x92>
				counterForButtonPress1s[i]++;
 8000520:	4a1a      	ldr	r2, [pc, #104]	@ (800058c <button_reading+0xe8>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000528:	3301      	adds	r3, #1
 800052a:	b299      	uxth	r1, r3
 800052c:	4a17      	ldr	r2, [pc, #92]	@ (800058c <button_reading+0xe8>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000534:	e015      	b.n	8000562 <button_reading+0xbe>
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
//				flagForButtonPress1s[i] = 1;
				//todo

				if (flagForButtonPress1s[i] == 0) {
 8000536:	4a16      	ldr	r2, [pc, #88]	@ (8000590 <button_reading+0xec>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4413      	add	r3, r2
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d10f      	bne.n	8000562 <button_reading+0xbe>
					flagForButtonPress1s[i] = 1;
 8000542:	4a13      	ldr	r2, [pc, #76]	@ (8000590 <button_reading+0xec>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4413      	add	r3, r2
 8000548:	2201      	movs	r2, #1
 800054a:	701a      	strb	r2, [r3, #0]
 800054c:	e009      	b.n	8000562 <button_reading+0xbe>
				}
			}
		}
		else {
			counterForButtonPress1s[i] = 0;
 800054e:	4a0f      	ldr	r2, [pc, #60]	@ (800058c <button_reading+0xe8>)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2100      	movs	r1, #0
 8000554:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000558:	4a0d      	ldr	r2, [pc, #52]	@ (8000590 <button_reading+0xec>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < N0_OF_BUTTONS; i++) {
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3301      	adds	r3, #1
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b00      	cmp	r3, #0
 800056c:	dda0      	ble.n	80004b0 <button_reading+0xc>
		}
	}
}
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000014 	.word	0x20000014
 800057c:	20000018 	.word	0x20000018
 8000580:	2000001c 	.word	0x2000001c
 8000584:	40010c00 	.word	0x40010c00
 8000588:	20000010 	.word	0x20000010
 800058c:	200000c4 	.word	0x200000c4
 8000590:	200000c0 	.word	0x200000c0

08000594 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index) {
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <is_button_pressed+0x14>
 80005a4:	2300      	movs	r3, #0
 80005a6:	e007      	b.n	80005b8 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	4a06      	ldr	r2, [pc, #24]	@ (80005c4 <is_button_pressed+0x30>)
 80005ac:	5cd3      	ldrb	r3, [r2, r3]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	bf0c      	ite	eq
 80005b2:	2301      	moveq	r3, #1
 80005b4:	2300      	movne	r3, #0
 80005b6:	b2db      	uxtb	r3, r3
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000010 	.word	0x20000010

080005c8 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index) {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff;
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <is_button_pressed_1s+0x14>
 80005d8:	23ff      	movs	r3, #255	@ 0xff
 80005da:	e007      	b.n	80005ec <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	4a06      	ldr	r2, [pc, #24]	@ (80005f8 <is_button_pressed_1s+0x30>)
 80005e0:	5cd3      	ldrb	r3, [r2, r3]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	bf0c      	ite	eq
 80005e6:	2301      	moveq	r3, #1
 80005e8:	2300      	movne	r3, #0
 80005ea:	b2db      	uxtb	r3, r3
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	200000c0 	.word	0x200000c0

080005fc <updateModeToBuffer>:
	LED_RED_1_Pin, LED_YELLOW_1_Pin, LED_GREEN_1_Pin,
	LED_RED_2_Pin, LED_YELLOW_2_Pin, LED_GREEN_2_Pin
};

void updateModeToBuffer(int mode)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	led_buffer[2] = mode / 10;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a0d      	ldr	r2, [pc, #52]	@ (800063c <updateModeToBuffer+0x40>)
 8000608:	fb82 1203 	smull	r1, r2, r2, r3
 800060c:	1092      	asrs	r2, r2, #2
 800060e:	17db      	asrs	r3, r3, #31
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	4a0b      	ldr	r2, [pc, #44]	@ (8000640 <updateModeToBuffer+0x44>)
 8000614:	6093      	str	r3, [r2, #8]
	led_buffer[3] = mode % 10;
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	4b08      	ldr	r3, [pc, #32]	@ (800063c <updateModeToBuffer+0x40>)
 800061a:	fb83 2301 	smull	r2, r3, r3, r1
 800061e:	109a      	asrs	r2, r3, #2
 8000620:	17cb      	asrs	r3, r1, #31
 8000622:	1ad2      	subs	r2, r2, r3
 8000624:	4613      	mov	r3, r2
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	4413      	add	r3, r2
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	1aca      	subs	r2, r1, r3
 800062e:	4b04      	ldr	r3, [pc, #16]	@ (8000640 <updateModeToBuffer+0x44>)
 8000630:	60da      	str	r2, [r3, #12]
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	66666667 	.word	0x66666667
 8000640:	200000cc 	.word	0x200000cc

08000644 <display7SEG>:
	led_buffer[0] = led_duration / 10;
	led_buffer[1] = led_duration % 10;
}

void display7SEG(int num)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	int bitmask = segmentMap[num];
 800064c:	4a14      	ldr	r2, [pc, #80]	@ (80006a0 <display7SEG+0x5c>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000654:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < 7; i++)
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	e018      	b.n	800068e <display7SEG+0x4a>
	{
		HAL_GPIO_WritePin(GPIOA, SEG_Pins[i], (bitmask & (1 << (6 - i))) ? RESET : SET);
 800065c:	4a11      	ldr	r2, [pc, #68]	@ (80006a4 <display7SEG+0x60>)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000664:	b299      	uxth	r1, r3
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f1c3 0306 	rsb	r3, r3, #6
 800066c:	68ba      	ldr	r2, [r7, #8]
 800066e:	fa42 f303 	asr.w	r3, r2, r3
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	2b00      	cmp	r3, #0
 8000678:	bf0c      	ite	eq
 800067a:	2301      	moveq	r3, #1
 800067c:	2300      	movne	r3, #0
 800067e:	b2db      	uxtb	r3, r3
 8000680:	461a      	mov	r2, r3
 8000682:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <display7SEG+0x64>)
 8000684:	f000 fe7b 	bl	800137e <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++)
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3301      	adds	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	2b06      	cmp	r3, #6
 8000692:	dde3      	ble.n	800065c <display7SEG+0x18>
	}
}
 8000694:	bf00      	nop
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000020 	.word	0x20000020
 80006a4:	20000048 	.word	0x20000048
 80006a8:	40010800 	.word	0x40010800

080006ac <update7SEG>:

void update7SEG(int index)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	e00c      	b.n	80006d4 <update7SEG+0x28>
	{
		HAL_GPIO_WritePin(GPIOA, EN_Pins[i], GPIO_PIN_SET);
 80006ba:	4a15      	ldr	r2, [pc, #84]	@ (8000710 <update7SEG+0x64>)
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	2201      	movs	r2, #1
 80006c6:	4619      	mov	r1, r3
 80006c8:	4812      	ldr	r0, [pc, #72]	@ (8000714 <update7SEG+0x68>)
 80006ca:	f000 fe58 	bl	800137e <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	ddef      	ble.n	80006ba <update7SEG+0xe>
	}

	if (0 <= index && index < MAX_LED) {
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db13      	blt.n	8000708 <update7SEG+0x5c>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	dc10      	bgt.n	8000708 <update7SEG+0x5c>
		HAL_GPIO_WritePin(GPIOA, EN_Pins[index], GPIO_PIN_RESET);
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <update7SEG+0x64>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	2200      	movs	r2, #0
 80006f2:	4619      	mov	r1, r3
 80006f4:	4807      	ldr	r0, [pc, #28]	@ (8000714 <update7SEG+0x68>)
 80006f6:	f000 fe42 	bl	800137e <HAL_GPIO_WritePin>
		display7SEG(led_buffer[index]);
 80006fa:	4a07      	ldr	r2, [pc, #28]	@ (8000718 <update7SEG+0x6c>)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff9e 	bl	8000644 <display7SEG>
	}
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000064 	.word	0x20000064
 8000714:	40010800 	.word	0x40010800
 8000718:	200000cc 	.word	0x200000cc

0800071c <setLEDs>:

void setLEDs(int pin1, int pin2, int pin3, int pin4, int pin5, int pin6)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	@ 0x30
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 6; i++) {
 800072a:	2300      	movs	r3, #0
 800072c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800072e:	e00c      	b.n	800074a <setLEDs+0x2e>
        HAL_GPIO_WritePin(GPIOB, all_LEDs[i], GPIO_PIN_RESET);
 8000730:	4a22      	ldr	r2, [pc, #136]	@ (80007bc <setLEDs+0xa0>)
 8000732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000738:	b29b      	uxth	r3, r3
 800073a:	2200      	movs	r2, #0
 800073c:	4619      	mov	r1, r3
 800073e:	4820      	ldr	r0, [pc, #128]	@ (80007c0 <setLEDs+0xa4>)
 8000740:	f000 fe1d 	bl	800137e <HAL_GPIO_WritePin>
    for (int i = 0; i < 6; i++) {
 8000744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000746:	3301      	adds	r3, #1
 8000748:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800074a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800074c:	2b05      	cmp	r3, #5
 800074e:	ddef      	ble.n	8000730 <setLEDs+0x14>
    }

    int pins[] = {pin1, pin2, pin3, pin4, pin5, pin6};
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	61bb      	str	r3, [r7, #24]
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	61fb      	str	r3, [r7, #28]
 8000760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000762:	623b      	str	r3, [r7, #32]
 8000764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 6; i++) {
 8000768:	2300      	movs	r3, #0
 800076a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800076c:	e01f      	b.n	80007ae <setLEDs+0x92>
        if (pins[i] == -1 || pins[i] == 0) break;
 800076e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	3330      	adds	r3, #48	@ 0x30
 8000774:	443b      	add	r3, r7
 8000776:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800077a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800077e:	d019      	beq.n	80007b4 <setLEDs+0x98>
 8000780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	3330      	adds	r3, #48	@ 0x30
 8000786:	443b      	add	r3, r7
 8000788:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d011      	beq.n	80007b4 <setLEDs+0x98>
        HAL_GPIO_WritePin(GPIOB, pins[i], GPIO_PIN_SET);
 8000790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	3330      	adds	r3, #48	@ 0x30
 8000796:	443b      	add	r3, r7
 8000798:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800079c:	b29b      	uxth	r3, r3
 800079e:	2201      	movs	r2, #1
 80007a0:	4619      	mov	r1, r3
 80007a2:	4807      	ldr	r0, [pc, #28]	@ (80007c0 <setLEDs+0xa4>)
 80007a4:	f000 fdeb 	bl	800137e <HAL_GPIO_WritePin>
    for (int i = 0; i < 6; i++) {
 80007a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007aa:	3301      	adds	r3, #1
 80007ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007b0:	2b05      	cmp	r3, #5
 80007b2:	dddc      	ble.n	800076e <setLEDs+0x52>
    }
}
 80007b4:	bf00      	nop
 80007b6:	3730      	adds	r7, #48	@ 0x30
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000074 	.word	0x20000074
 80007c0:	40010c00 	.word	0x40010c00

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c8:	f000 fad6 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007cc:	f000 f854 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d0:	f000 f8da 	bl	8000988 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007d4:	f000 f88c 	bl	80008f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80007d8:	4820      	ldr	r0, [pc, #128]	@ (800085c <main+0x98>)
 80007da:	f001 fa2f 	bl	8001c3c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  systemMode = INIT;
 80007de:	4b20      	ldr	r3, [pc, #128]	@ (8000860 <main+0x9c>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	601a      	str	r2, [r3, #0]
  trafficState = RED1_GREEN2_AUTO;
 80007e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000864 <main+0xa0>)
 80007e6:	220b      	movs	r2, #11
 80007e8:	601a      	str	r2, [r3, #0]
  start_new_loop = 1;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000868 <main+0xa4>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	601a      	str	r2, [r3, #0]

  setTimer0(TIMER_CYCLE);
 80007f0:	200a      	movs	r0, #10
 80007f2:	f000 f931 	bl	8000a58 <setTimer0>
  setTimer1(TIMER_CYCLE);
 80007f6:	200a      	movs	r0, #10
 80007f8:	f000 f94a 	bl	8000a90 <setTimer1>
  setTimer2(TIMER_CYCLE);
 80007fc:	200a      	movs	r0, #10
 80007fe:	f000 f963 	bl	8000ac8 <setTimer2>
  setTimer3(TIMER_CYCLE);
 8000802:	200a      	movs	r0, #10
 8000804:	f000 f97c 	bl	8000b00 <setTimer3>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (timer3_flag == 1) {
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <main+0xa8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d106      	bne.n	800081e <main+0x5a>
		  fsm_for_input_processing();
 8000810:	f7ff fdf4 	bl	80003fc <fsm_for_input_processing>
		  fsm_traffic_run();
 8000814:	f7ff fc9a 	bl	800014c <fsm_traffic_run>

		  setTimer3(100);
 8000818:	2064      	movs	r0, #100	@ 0x64
 800081a:	f000 f971 	bl	8000b00 <setTimer3>
	  }

	  if (timer1_flag == 1) {
 800081e:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <main+0xac>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d1f0      	bne.n	8000808 <main+0x44>
		  updateModeToBuffer(systemMode);
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <main+0x9c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fee6 	bl	80005fc <updateModeToBuffer>
		  update7SEG(index_led);
 8000830:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <main+0xb0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff39 	bl	80006ac <update7SEG>
		  index_led = (index_led + 1) % 4;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <main+0xb0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	3301      	adds	r3, #1
 8000840:	425a      	negs	r2, r3
 8000842:	f003 0303 	and.w	r3, r3, #3
 8000846:	f002 0203 	and.w	r2, r2, #3
 800084a:	bf58      	it	pl
 800084c:	4253      	negpl	r3, r2
 800084e:	4a09      	ldr	r2, [pc, #36]	@ (8000874 <main+0xb0>)
 8000850:	6013      	str	r3, [r2, #0]
		  setTimer1(100);
 8000852:	2064      	movs	r0, #100	@ 0x64
 8000854:	f000 f91c 	bl	8000a90 <setTimer1>
	  if (timer3_flag == 1) {
 8000858:	e7d6      	b.n	8000808 <main+0x44>
 800085a:	bf00      	nop
 800085c:	200000dc 	.word	0x200000dc
 8000860:	200000b4 	.word	0x200000b4
 8000864:	200000b8 	.word	0x200000b8
 8000868:	20000000 	.word	0x20000000
 800086c:	20000130 	.word	0x20000130
 8000870:	20000128 	.word	0x20000128
 8000874:	200000c8 	.word	0x200000c8

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b090      	sub	sp, #64	@ 0x40
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0318 	add.w	r3, r7, #24
 8000882:	2228      	movs	r2, #40	@ 0x28
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f001 fd64 	bl	8002354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089a:	2302      	movs	r3, #2
 800089c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089e:	2301      	movs	r3, #1
 80008a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a2:	2310      	movs	r3, #16
 80008a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008aa:	f107 0318 	add.w	r3, r7, #24
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fd96 	bl	80013e0 <HAL_RCC_OscConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008ba:	f000 f8c7 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008be:	230f      	movs	r3, #15
 80008c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 f804 	bl	80018e4 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008e2:	f000 f8b3 	bl	8000a4c <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3740      	adds	r7, #64	@ 0x40
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	463b      	mov	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800090c:	4b1d      	ldr	r3, [pc, #116]	@ (8000984 <MX_TIM2_Init+0x94>)
 800090e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000912:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000914:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <MX_TIM2_Init+0x94>)
 8000916:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800091a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091c:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <MX_TIM2_Init+0x94>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000922:	4b18      	ldr	r3, [pc, #96]	@ (8000984 <MX_TIM2_Init+0x94>)
 8000924:	2209      	movs	r2, #9
 8000926:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000928:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <MX_TIM2_Init+0x94>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092e:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <MX_TIM2_Init+0x94>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000934:	4813      	ldr	r0, [pc, #76]	@ (8000984 <MX_TIM2_Init+0x94>)
 8000936:	f001 f931 	bl	8001b9c <HAL_TIM_Base_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000940:	f000 f884 	bl	8000a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000944:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000948:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <MX_TIM2_Init+0x94>)
 8000952:	f001 faaf 	bl	8001eb4 <HAL_TIM_ConfigClockSource>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800095c:	f000 f876 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000960:	2300      	movs	r3, #0
 8000962:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	@ (8000984 <MX_TIM2_Init+0x94>)
 800096e:	f001 fc87 	bl	8002280 <HAL_TIMEx_MasterConfigSynchronization>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000978:	f000 f868 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200000dc 	.word	0x200000dc

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4b28      	ldr	r3, [pc, #160]	@ (8000a40 <MX_GPIO_Init+0xb8>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a27      	ldr	r2, [pc, #156]	@ (8000a40 <MX_GPIO_Init+0xb8>)
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b25      	ldr	r3, [pc, #148]	@ (8000a40 <MX_GPIO_Init+0xb8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b4:	4b22      	ldr	r3, [pc, #136]	@ (8000a40 <MX_GPIO_Init+0xb8>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a21      	ldr	r2, [pc, #132]	@ (8000a40 <MX_GPIO_Init+0xb8>)
 80009ba:	f043 0308 	orr.w	r3, r3, #8
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <MX_GPIO_Init+0xb8>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0308 	and.w	r3, r3, #8
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80009cc:	2200      	movs	r2, #0
 80009ce:	f641 71de 	movw	r1, #8158	@ 0x1fde
 80009d2:	481c      	ldr	r0, [pc, #112]	@ (8000a44 <MX_GPIO_Init+0xbc>)
 80009d4:	f000 fcd3 	bl	800137e <HAL_GPIO_WritePin>
                          |SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 80009d8:	2200      	movs	r2, #0
 80009da:	217e      	movs	r1, #126	@ 0x7e
 80009dc:	481a      	ldr	r0, [pc, #104]	@ (8000a48 <MX_GPIO_Init+0xc0>)
 80009de:	f000 fcce 	bl	800137e <HAL_GPIO_WritePin>
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80009e2:	f641 73de 	movw	r3, #8158	@ 0x1fde
 80009e6:	60bb      	str	r3, [r7, #8]
                          |SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2302      	movs	r3, #2
 80009f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4619      	mov	r1, r3
 80009fa:	4812      	ldr	r0, [pc, #72]	@ (8000a44 <MX_GPIO_Init+0xbc>)
 80009fc:	f000 fb2c 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8000a00:	237e      	movs	r3, #126	@ 0x7e
 8000a02:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	4619      	mov	r1, r3
 8000a16:	480c      	ldr	r0, [pc, #48]	@ (8000a48 <MX_GPIO_Init+0xc0>)
 8000a18:	f000 fb1e 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin;
 8000a1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <MX_GPIO_Init+0xc0>)
 8000a32:	f000 fb11 	bl	8001058 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40010800 	.word	0x40010800
 8000a48:	40010c00 	.word	0x40010c00

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <Error_Handler+0x8>

08000a58 <setTimer0>:
int timer0_counter = 0;
int timer1_counter = 0;
int timer2_counter = 0;
int timer3_counter = 0;

void setTimer0(int duration) {
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
    timer0_counter = duration / TIMER_CYCLE;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <setTimer0+0x2c>)
 8000a64:	fb82 1203 	smull	r1, r2, r2, r3
 8000a68:	1092      	asrs	r2, r2, #2
 8000a6a:	17db      	asrs	r3, r3, #31
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	4a06      	ldr	r2, [pc, #24]	@ (8000a88 <setTimer0+0x30>)
 8000a70:	6013      	str	r3, [r2, #0]
    timer0_flag = 0;
 8000a72:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <setTimer0+0x34>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	66666667 	.word	0x66666667
 8000a88:	20000134 	.word	0x20000134
 8000a8c:	20000124 	.word	0x20000124

08000a90 <setTimer1>:

void setTimer1(int duration) {
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
    timer1_counter = duration / TIMER_CYCLE;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <setTimer1+0x2c>)
 8000a9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa0:	1092      	asrs	r2, r2, #2
 8000aa2:	17db      	asrs	r3, r3, #31
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	4a06      	ldr	r2, [pc, #24]	@ (8000ac0 <setTimer1+0x30>)
 8000aa8:	6013      	str	r3, [r2, #0]
    timer1_flag = 0;
 8000aaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <setTimer1+0x34>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	66666667 	.word	0x66666667
 8000ac0:	20000138 	.word	0x20000138
 8000ac4:	20000128 	.word	0x20000128

08000ac8 <setTimer2>:

void setTimer2(int duration) {
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
    timer2_counter = duration / TIMER_CYCLE;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a08      	ldr	r2, [pc, #32]	@ (8000af4 <setTimer2+0x2c>)
 8000ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ad8:	1092      	asrs	r2, r2, #2
 8000ada:	17db      	asrs	r3, r3, #31
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	4a06      	ldr	r2, [pc, #24]	@ (8000af8 <setTimer2+0x30>)
 8000ae0:	6013      	str	r3, [r2, #0]
    timer2_flag = 0;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <setTimer2+0x34>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	66666667 	.word	0x66666667
 8000af8:	2000013c 	.word	0x2000013c
 8000afc:	2000012c 	.word	0x2000012c

08000b00 <setTimer3>:

void setTimer3(int duration) {
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
    timer3_counter = duration / TIMER_CYCLE;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a08      	ldr	r2, [pc, #32]	@ (8000b2c <setTimer3+0x2c>)
 8000b0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b10:	1092      	asrs	r2, r2, #2
 8000b12:	17db      	asrs	r3, r3, #31
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	4a06      	ldr	r2, [pc, #24]	@ (8000b30 <setTimer3+0x30>)
 8000b18:	6013      	str	r3, [r2, #0]
    timer3_flag = 0;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <setTimer3+0x34>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	66666667 	.word	0x66666667
 8000b30:	20000140 	.word	0x20000140
 8000b34:	20000130 	.word	0x20000130

08000b38 <timerRun>:

void timerRun() {
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 8000b3c:	4b21      	ldr	r3, [pc, #132]	@ (8000bc4 <timerRun+0x8c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	dd0b      	ble.n	8000b5c <timerRun+0x24>
		timer0_counter--;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <timerRun+0x8c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc4 <timerRun+0x8c>)
 8000b4c:	6013      	str	r3, [r2, #0]

		if (timer0_counter == 0) timer0_flag = 1;
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc4 <timerRun+0x8c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d102      	bne.n	8000b5c <timerRun+0x24>
 8000b56:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc8 <timerRun+0x90>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
	}

	if (timer1_counter > 0) {
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bcc <timerRun+0x94>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	dd0b      	ble.n	8000b7c <timerRun+0x44>
		timer1_counter--;
 8000b64:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <timerRun+0x94>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	4a18      	ldr	r2, [pc, #96]	@ (8000bcc <timerRun+0x94>)
 8000b6c:	6013      	str	r3, [r2, #0]

		if (timer1_counter == 0) timer1_flag = 1;
 8000b6e:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <timerRun+0x94>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d102      	bne.n	8000b7c <timerRun+0x44>
 8000b76:	4b16      	ldr	r3, [pc, #88]	@ (8000bd0 <timerRun+0x98>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]
	}

	if (timer2_counter > 0) {
 8000b7c:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <timerRun+0x9c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	dd0b      	ble.n	8000b9c <timerRun+0x64>
		timer2_counter--;
 8000b84:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <timerRun+0x9c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	4a12      	ldr	r2, [pc, #72]	@ (8000bd4 <timerRun+0x9c>)
 8000b8c:	6013      	str	r3, [r2, #0]

		if (timer2_counter == 0) timer2_flag = 1;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <timerRun+0x9c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d102      	bne.n	8000b9c <timerRun+0x64>
 8000b96:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <timerRun+0xa0>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]
	}

	if (timer3_counter > 0) {
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <timerRun+0xa4>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	dd0b      	ble.n	8000bbc <timerRun+0x84>
		timer3_counter--;
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <timerRun+0xa4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	4a0c      	ldr	r2, [pc, #48]	@ (8000bdc <timerRun+0xa4>)
 8000bac:	6013      	str	r3, [r2, #0]

		if (timer3_counter == 0) timer3_flag = 1;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <timerRun+0xa4>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d102      	bne.n	8000bbc <timerRun+0x84>
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <timerRun+0xa8>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	601a      	str	r2, [r3, #0]
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	20000134 	.word	0x20000134
 8000bc8:	20000124 	.word	0x20000124
 8000bcc:	20000138 	.word	0x20000138
 8000bd0:	20000128 	.word	0x20000128
 8000bd4:	2000013c 	.word	0x2000013c
 8000bd8:	2000012c 	.word	0x2000012c
 8000bdc:	20000140 	.word	0x20000140
 8000be0:	20000130 	.word	0x20000130

08000be4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bf4:	d103      	bne.n	8000bfe <HAL_TIM_PeriodElapsedCallback+0x1a>
		timerRun();
 8000bf6:	f7ff ff9f 	bl	8000b38 <timerRun>
		button_reading();
 8000bfa:	f7ff fc53 	bl	80004a4 <button_reading>
	}
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c0e:	4b15      	ldr	r3, [pc, #84]	@ (8000c64 <HAL_MspInit+0x5c>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	4a14      	ldr	r2, [pc, #80]	@ (8000c64 <HAL_MspInit+0x5c>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6193      	str	r3, [r2, #24]
 8000c1a:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <HAL_MspInit+0x5c>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <HAL_MspInit+0x5c>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c64 <HAL_MspInit+0x5c>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c30:	61d3      	str	r3, [r2, #28]
 8000c32:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <HAL_MspInit+0x5c>)
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <HAL_MspInit+0x60>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <HAL_MspInit+0x60>)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010000 	.word	0x40010000

08000c6c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c7c:	d113      	bne.n	8000ca6 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <HAL_TIM_Base_MspInit+0x44>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb0 <HAL_TIM_Base_MspInit+0x44>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	61d3      	str	r3, [r2, #28]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <HAL_TIM_Base_MspInit+0x44>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	201c      	movs	r0, #28
 8000c9c:	f000 f9a5 	bl	8000fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ca0:	201c      	movs	r0, #28
 8000ca2:	f000 f9be 	bl	8001022 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <NMI_Handler+0x4>

08000cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <MemManage_Handler+0x4>

08000ccc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d04:	f000 f87e 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d10:	4802      	ldr	r0, [pc, #8]	@ (8000d1c <TIM2_IRQHandler+0x10>)
 8000d12:	f000 ffdf 	bl	8001cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200000dc 	.word	0x200000dc

08000d20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d2c:	f7ff fff8 	bl	8000d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d30:	480b      	ldr	r0, [pc, #44]	@ (8000d60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d32:	490c      	ldr	r1, [pc, #48]	@ (8000d64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d34:	4a0c      	ldr	r2, [pc, #48]	@ (8000d68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a09      	ldr	r2, [pc, #36]	@ (8000d6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d48:	4c09      	ldr	r4, [pc, #36]	@ (8000d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d56:	f001 fb05 	bl	8002364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d5a:	f7ff fd33 	bl	80007c4 <main>
  bx lr
 8000d5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000d68:	080023f0 	.word	0x080023f0
  ldr r2, =_sbss
 8000d6c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000d70:	20000148 	.word	0x20000148

08000d74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC1_2_IRQHandler>
	...

08000d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <HAL_Init+0x28>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a07      	ldr	r2, [pc, #28]	@ (8000da0 <HAL_Init+0x28>)
 8000d82:	f043 0310 	orr.w	r3, r3, #16
 8000d86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 f923 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8e:	200f      	movs	r0, #15
 8000d90:	f000 f808 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff ff38 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40022000 	.word	0x40022000

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_InitTick+0x54>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <HAL_InitTick+0x58>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f93b 	bl	800103e <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00e      	b.n	8000df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d80a      	bhi.n	8000dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f000 f903 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4a06      	ldr	r2, [pc, #24]	@ (8000e00 <HAL_InitTick+0x5c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	2000008c 	.word	0x2000008c
 8000dfc:	20000094 	.word	0x20000094
 8000e00:	20000090 	.word	0x20000090

08000e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <HAL_IncTick+0x1c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <HAL_IncTick+0x20>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a03      	ldr	r2, [pc, #12]	@ (8000e24 <HAL_IncTick+0x20>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	20000094 	.word	0x20000094
 8000e24:	20000144 	.word	0x20000144

08000e28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b02      	ldr	r3, [pc, #8]	@ (8000e38 <HAL_GetTick+0x10>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	20000144 	.word	0x20000144

08000e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	@ (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	60d3      	str	r3, [r2, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e88:	4b04      	ldr	r3, [pc, #16]	@ (8000e9c <__NVIC_GetPriorityGrouping+0x18>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	f003 0307 	and.w	r3, r3, #7
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db0b      	blt.n	8000eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f003 021f 	and.w	r2, r3, #31
 8000eb8:	4906      	ldr	r1, [pc, #24]	@ (8000ed4 <__NVIC_EnableIRQ+0x34>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	@ (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	@ (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	@ 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	@ 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff90 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff2d 	bl	8000e3c <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff42 	bl	8000e84 <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff90 	bl	8000f2c <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5f 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff35 	bl	8000ea0 <__NVIC_EnableIRQ>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffa2 	bl	8000f90 <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001058:	b480      	push	{r7}
 800105a:	b08b      	sub	sp, #44	@ 0x2c
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106a:	e161      	b.n	8001330 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800106c:	2201      	movs	r2, #1
 800106e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	69fa      	ldr	r2, [r7, #28]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	429a      	cmp	r2, r3
 8001086:	f040 8150 	bne.w	800132a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	4a97      	ldr	r2, [pc, #604]	@ (80012ec <HAL_GPIO_Init+0x294>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d05e      	beq.n	8001152 <HAL_GPIO_Init+0xfa>
 8001094:	4a95      	ldr	r2, [pc, #596]	@ (80012ec <HAL_GPIO_Init+0x294>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d875      	bhi.n	8001186 <HAL_GPIO_Init+0x12e>
 800109a:	4a95      	ldr	r2, [pc, #596]	@ (80012f0 <HAL_GPIO_Init+0x298>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d058      	beq.n	8001152 <HAL_GPIO_Init+0xfa>
 80010a0:	4a93      	ldr	r2, [pc, #588]	@ (80012f0 <HAL_GPIO_Init+0x298>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d86f      	bhi.n	8001186 <HAL_GPIO_Init+0x12e>
 80010a6:	4a93      	ldr	r2, [pc, #588]	@ (80012f4 <HAL_GPIO_Init+0x29c>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d052      	beq.n	8001152 <HAL_GPIO_Init+0xfa>
 80010ac:	4a91      	ldr	r2, [pc, #580]	@ (80012f4 <HAL_GPIO_Init+0x29c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d869      	bhi.n	8001186 <HAL_GPIO_Init+0x12e>
 80010b2:	4a91      	ldr	r2, [pc, #580]	@ (80012f8 <HAL_GPIO_Init+0x2a0>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d04c      	beq.n	8001152 <HAL_GPIO_Init+0xfa>
 80010b8:	4a8f      	ldr	r2, [pc, #572]	@ (80012f8 <HAL_GPIO_Init+0x2a0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d863      	bhi.n	8001186 <HAL_GPIO_Init+0x12e>
 80010be:	4a8f      	ldr	r2, [pc, #572]	@ (80012fc <HAL_GPIO_Init+0x2a4>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d046      	beq.n	8001152 <HAL_GPIO_Init+0xfa>
 80010c4:	4a8d      	ldr	r2, [pc, #564]	@ (80012fc <HAL_GPIO_Init+0x2a4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d85d      	bhi.n	8001186 <HAL_GPIO_Init+0x12e>
 80010ca:	2b12      	cmp	r3, #18
 80010cc:	d82a      	bhi.n	8001124 <HAL_GPIO_Init+0xcc>
 80010ce:	2b12      	cmp	r3, #18
 80010d0:	d859      	bhi.n	8001186 <HAL_GPIO_Init+0x12e>
 80010d2:	a201      	add	r2, pc, #4	@ (adr r2, 80010d8 <HAL_GPIO_Init+0x80>)
 80010d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d8:	08001153 	.word	0x08001153
 80010dc:	0800112d 	.word	0x0800112d
 80010e0:	0800113f 	.word	0x0800113f
 80010e4:	08001181 	.word	0x08001181
 80010e8:	08001187 	.word	0x08001187
 80010ec:	08001187 	.word	0x08001187
 80010f0:	08001187 	.word	0x08001187
 80010f4:	08001187 	.word	0x08001187
 80010f8:	08001187 	.word	0x08001187
 80010fc:	08001187 	.word	0x08001187
 8001100:	08001187 	.word	0x08001187
 8001104:	08001187 	.word	0x08001187
 8001108:	08001187 	.word	0x08001187
 800110c:	08001187 	.word	0x08001187
 8001110:	08001187 	.word	0x08001187
 8001114:	08001187 	.word	0x08001187
 8001118:	08001187 	.word	0x08001187
 800111c:	08001135 	.word	0x08001135
 8001120:	08001149 	.word	0x08001149
 8001124:	4a76      	ldr	r2, [pc, #472]	@ (8001300 <HAL_GPIO_Init+0x2a8>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800112a:	e02c      	b.n	8001186 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	623b      	str	r3, [r7, #32]
          break;
 8001132:	e029      	b.n	8001188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	3304      	adds	r3, #4
 800113a:	623b      	str	r3, [r7, #32]
          break;
 800113c:	e024      	b.n	8001188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	3308      	adds	r3, #8
 8001144:	623b      	str	r3, [r7, #32]
          break;
 8001146:	e01f      	b.n	8001188 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	330c      	adds	r3, #12
 800114e:	623b      	str	r3, [r7, #32]
          break;
 8001150:	e01a      	b.n	8001188 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d102      	bne.n	8001160 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800115a:	2304      	movs	r3, #4
 800115c:	623b      	str	r3, [r7, #32]
          break;
 800115e:	e013      	b.n	8001188 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d105      	bne.n	8001174 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001168:	2308      	movs	r3, #8
 800116a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	611a      	str	r2, [r3, #16]
          break;
 8001172:	e009      	b.n	8001188 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001174:	2308      	movs	r3, #8
 8001176:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	615a      	str	r2, [r3, #20]
          break;
 800117e:	e003      	b.n	8001188 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
          break;
 8001184:	e000      	b.n	8001188 <HAL_GPIO_Init+0x130>
          break;
 8001186:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2bff      	cmp	r3, #255	@ 0xff
 800118c:	d801      	bhi.n	8001192 <HAL_GPIO_Init+0x13a>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	e001      	b.n	8001196 <HAL_GPIO_Init+0x13e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3304      	adds	r3, #4
 8001196:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	2bff      	cmp	r3, #255	@ 0xff
 800119c:	d802      	bhi.n	80011a4 <HAL_GPIO_Init+0x14c>
 800119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	e002      	b.n	80011aa <HAL_GPIO_Init+0x152>
 80011a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a6:	3b08      	subs	r3, #8
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	210f      	movs	r1, #15
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	401a      	ands	r2, r3
 80011bc:	6a39      	ldr	r1, [r7, #32]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	fa01 f303 	lsl.w	r3, r1, r3
 80011c4:	431a      	orrs	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 80a9 	beq.w	800132a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001304 <HAL_GPIO_Init+0x2ac>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4a49      	ldr	r2, [pc, #292]	@ (8001304 <HAL_GPIO_Init+0x2ac>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	4b47      	ldr	r3, [pc, #284]	@ (8001304 <HAL_GPIO_Init+0x2ac>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011f0:	4a45      	ldr	r2, [pc, #276]	@ (8001308 <HAL_GPIO_Init+0x2b0>)
 80011f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	4013      	ands	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a3d      	ldr	r2, [pc, #244]	@ (800130c <HAL_GPIO_Init+0x2b4>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d00d      	beq.n	8001238 <HAL_GPIO_Init+0x1e0>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a3c      	ldr	r2, [pc, #240]	@ (8001310 <HAL_GPIO_Init+0x2b8>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d007      	beq.n	8001234 <HAL_GPIO_Init+0x1dc>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a3b      	ldr	r2, [pc, #236]	@ (8001314 <HAL_GPIO_Init+0x2bc>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d101      	bne.n	8001230 <HAL_GPIO_Init+0x1d8>
 800122c:	2302      	movs	r3, #2
 800122e:	e004      	b.n	800123a <HAL_GPIO_Init+0x1e2>
 8001230:	2303      	movs	r3, #3
 8001232:	e002      	b.n	800123a <HAL_GPIO_Init+0x1e2>
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <HAL_GPIO_Init+0x1e2>
 8001238:	2300      	movs	r3, #0
 800123a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800123c:	f002 0203 	and.w	r2, r2, #3
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	4093      	lsls	r3, r2
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	4313      	orrs	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800124a:	492f      	ldr	r1, [pc, #188]	@ (8001308 <HAL_GPIO_Init+0x2b0>)
 800124c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001264:	4b2c      	ldr	r3, [pc, #176]	@ (8001318 <HAL_GPIO_Init+0x2c0>)
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	492b      	ldr	r1, [pc, #172]	@ (8001318 <HAL_GPIO_Init+0x2c0>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	608b      	str	r3, [r1, #8]
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001272:	4b29      	ldr	r3, [pc, #164]	@ (8001318 <HAL_GPIO_Init+0x2c0>)
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	43db      	mvns	r3, r3
 800127a:	4927      	ldr	r1, [pc, #156]	@ (8001318 <HAL_GPIO_Init+0x2c0>)
 800127c:	4013      	ands	r3, r2
 800127e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800128c:	4b22      	ldr	r3, [pc, #136]	@ (8001318 <HAL_GPIO_Init+0x2c0>)
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	4921      	ldr	r1, [pc, #132]	@ (8001318 <HAL_GPIO_Init+0x2c0>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	60cb      	str	r3, [r1, #12]
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800129a:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <HAL_GPIO_Init+0x2c0>)
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	491d      	ldr	r1, [pc, #116]	@ (8001318 <HAL_GPIO_Init+0x2c0>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d006      	beq.n	80012c2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012b4:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <HAL_GPIO_Init+0x2c0>)
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	4917      	ldr	r1, [pc, #92]	@ (8001318 <HAL_GPIO_Init+0x2c0>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012c2:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <HAL_GPIO_Init+0x2c0>)
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	4913      	ldr	r1, [pc, #76]	@ (8001318 <HAL_GPIO_Init+0x2c0>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d01f      	beq.n	800131c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <HAL_GPIO_Init+0x2c0>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	490d      	ldr	r1, [pc, #52]	@ (8001318 <HAL_GPIO_Init+0x2c0>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	600b      	str	r3, [r1, #0]
 80012e8:	e01f      	b.n	800132a <HAL_GPIO_Init+0x2d2>
 80012ea:	bf00      	nop
 80012ec:	10320000 	.word	0x10320000
 80012f0:	10310000 	.word	0x10310000
 80012f4:	10220000 	.word	0x10220000
 80012f8:	10210000 	.word	0x10210000
 80012fc:	10120000 	.word	0x10120000
 8001300:	10110000 	.word	0x10110000
 8001304:	40021000 	.word	0x40021000
 8001308:	40010000 	.word	0x40010000
 800130c:	40010800 	.word	0x40010800
 8001310:	40010c00 	.word	0x40010c00
 8001314:	40011000 	.word	0x40011000
 8001318:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800131c:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <HAL_GPIO_Init+0x2f4>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	43db      	mvns	r3, r3
 8001324:	4909      	ldr	r1, [pc, #36]	@ (800134c <HAL_GPIO_Init+0x2f4>)
 8001326:	4013      	ands	r3, r2
 8001328:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800132a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132c:	3301      	adds	r3, #1
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001336:	fa22 f303 	lsr.w	r3, r2, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	f47f ae96 	bne.w	800106c <HAL_GPIO_Init+0x14>
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	372c      	adds	r7, #44	@ 0x2c
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	40010400 	.word	0x40010400

08001350 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	887b      	ldrh	r3, [r7, #2]
 8001362:	4013      	ands	r3, r2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001368:	2301      	movs	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e001      	b.n	8001372 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001372:	7bfb      	ldrb	r3, [r7, #15]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	807b      	strh	r3, [r7, #2]
 800138a:	4613      	mov	r3, r2
 800138c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800138e:	787b      	ldrb	r3, [r7, #1]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001394:	887a      	ldrh	r2, [r7, #2]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800139a:	e003      	b.n	80013a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	041a      	lsls	r2, r3, #16
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	611a      	str	r2, [r3, #16]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b085      	sub	sp, #20
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	460b      	mov	r3, r1
 80013b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013c0:	887a      	ldrh	r2, [r7, #2]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4013      	ands	r3, r2
 80013c6:	041a      	lsls	r2, r3, #16
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	887b      	ldrh	r3, [r7, #2]
 80013ce:	400b      	ands	r3, r1
 80013d0:	431a      	orrs	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	611a      	str	r2, [r3, #16]
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e272      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 8087 	beq.w	800150e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001400:	4b92      	ldr	r3, [pc, #584]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b04      	cmp	r3, #4
 800140a:	d00c      	beq.n	8001426 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800140c:	4b8f      	ldr	r3, [pc, #572]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 030c 	and.w	r3, r3, #12
 8001414:	2b08      	cmp	r3, #8
 8001416:	d112      	bne.n	800143e <HAL_RCC_OscConfig+0x5e>
 8001418:	4b8c      	ldr	r3, [pc, #560]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001424:	d10b      	bne.n	800143e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001426:	4b89      	ldr	r3, [pc, #548]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d06c      	beq.n	800150c <HAL_RCC_OscConfig+0x12c>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d168      	bne.n	800150c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e24c      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001446:	d106      	bne.n	8001456 <HAL_RCC_OscConfig+0x76>
 8001448:	4b80      	ldr	r3, [pc, #512]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a7f      	ldr	r2, [pc, #508]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 800144e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	e02e      	b.n	80014b4 <HAL_RCC_OscConfig+0xd4>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10c      	bne.n	8001478 <HAL_RCC_OscConfig+0x98>
 800145e:	4b7b      	ldr	r3, [pc, #492]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a7a      	ldr	r2, [pc, #488]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b78      	ldr	r3, [pc, #480]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a77      	ldr	r2, [pc, #476]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001470:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e01d      	b.n	80014b4 <HAL_RCC_OscConfig+0xd4>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0xbc>
 8001482:	4b72      	ldr	r3, [pc, #456]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a71      	ldr	r2, [pc, #452]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b6f      	ldr	r3, [pc, #444]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a6e      	ldr	r2, [pc, #440]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e00b      	b.n	80014b4 <HAL_RCC_OscConfig+0xd4>
 800149c:	4b6b      	ldr	r3, [pc, #428]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a6a      	ldr	r2, [pc, #424]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 80014a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b68      	ldr	r3, [pc, #416]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a67      	ldr	r2, [pc, #412]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 80014ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d013      	beq.n	80014e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fcb4 	bl	8000e28 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff fcb0 	bl	8000e28 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	@ 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e200      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	4b5d      	ldr	r3, [pc, #372]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0xe4>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fca0 	bl	8000e28 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fc9c 	bl	8000e28 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	@ 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e1ec      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	4b53      	ldr	r3, [pc, #332]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x10c>
 800150a:	e000      	b.n	800150e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d063      	beq.n	80015e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800151a:	4b4c      	ldr	r3, [pc, #304]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00b      	beq.n	800153e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001526:	4b49      	ldr	r3, [pc, #292]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b08      	cmp	r3, #8
 8001530:	d11c      	bne.n	800156c <HAL_RCC_OscConfig+0x18c>
 8001532:	4b46      	ldr	r3, [pc, #280]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d116      	bne.n	800156c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153e:	4b43      	ldr	r3, [pc, #268]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <HAL_RCC_OscConfig+0x176>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e1c0      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b3d      	ldr	r3, [pc, #244]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4939      	ldr	r1, [pc, #228]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	e03a      	b.n	80015e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d020      	beq.n	80015b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001574:	4b36      	ldr	r3, [pc, #216]	@ (8001650 <HAL_RCC_OscConfig+0x270>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157a:	f7ff fc55 	bl	8000e28 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001582:	f7ff fc51 	bl	8000e28 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e1a1      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	4b2d      	ldr	r3, [pc, #180]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b2a      	ldr	r3, [pc, #168]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4927      	ldr	r1, [pc, #156]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
 80015b4:	e015      	b.n	80015e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b6:	4b26      	ldr	r3, [pc, #152]	@ (8001650 <HAL_RCC_OscConfig+0x270>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fc34 	bl	8000e28 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff fc30 	bl	8000e28 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e180      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d03a      	beq.n	8001664 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d019      	beq.n	800162a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f6:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <HAL_RCC_OscConfig+0x274>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fc:	f7ff fc14 	bl	8000e28 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001604:	f7ff fc10 	bl	8000e28 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e160      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <HAL_RCC_OscConfig+0x26c>)
 8001618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001622:	2001      	movs	r0, #1
 8001624:	f000 fa9c 	bl	8001b60 <RCC_Delay>
 8001628:	e01c      	b.n	8001664 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800162a:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <HAL_RCC_OscConfig+0x274>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001630:	f7ff fbfa 	bl	8000e28 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001636:	e00f      	b.n	8001658 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001638:	f7ff fbf6 	bl	8000e28 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d908      	bls.n	8001658 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e146      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000
 8001650:	42420000 	.word	0x42420000
 8001654:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001658:	4b92      	ldr	r3, [pc, #584]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1e9      	bne.n	8001638 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80a6 	beq.w	80017be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001676:	4b8b      	ldr	r3, [pc, #556]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10d      	bne.n	800169e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	4b88      	ldr	r3, [pc, #544]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a87      	ldr	r2, [pc, #540]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800168c:	61d3      	str	r3, [r2, #28]
 800168e:	4b85      	ldr	r3, [pc, #532]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800169a:	2301      	movs	r3, #1
 800169c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169e:	4b82      	ldr	r3, [pc, #520]	@ (80018a8 <HAL_RCC_OscConfig+0x4c8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d118      	bne.n	80016dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016aa:	4b7f      	ldr	r3, [pc, #508]	@ (80018a8 <HAL_RCC_OscConfig+0x4c8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a7e      	ldr	r2, [pc, #504]	@ (80018a8 <HAL_RCC_OscConfig+0x4c8>)
 80016b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b6:	f7ff fbb7 	bl	8000e28 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016be:	f7ff fbb3 	bl	8000e28 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b64      	cmp	r3, #100	@ 0x64
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e103      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d0:	4b75      	ldr	r3, [pc, #468]	@ (80018a8 <HAL_RCC_OscConfig+0x4c8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d106      	bne.n	80016f2 <HAL_RCC_OscConfig+0x312>
 80016e4:	4b6f      	ldr	r3, [pc, #444]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4a6e      	ldr	r2, [pc, #440]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6213      	str	r3, [r2, #32]
 80016f0:	e02d      	b.n	800174e <HAL_RCC_OscConfig+0x36e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10c      	bne.n	8001714 <HAL_RCC_OscConfig+0x334>
 80016fa:	4b6a      	ldr	r3, [pc, #424]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	4a69      	ldr	r2, [pc, #420]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001700:	f023 0301 	bic.w	r3, r3, #1
 8001704:	6213      	str	r3, [r2, #32]
 8001706:	4b67      	ldr	r3, [pc, #412]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	4a66      	ldr	r2, [pc, #408]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	f023 0304 	bic.w	r3, r3, #4
 8001710:	6213      	str	r3, [r2, #32]
 8001712:	e01c      	b.n	800174e <HAL_RCC_OscConfig+0x36e>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b05      	cmp	r3, #5
 800171a:	d10c      	bne.n	8001736 <HAL_RCC_OscConfig+0x356>
 800171c:	4b61      	ldr	r3, [pc, #388]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4a60      	ldr	r2, [pc, #384]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	6213      	str	r3, [r2, #32]
 8001728:	4b5e      	ldr	r3, [pc, #376]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4a5d      	ldr	r2, [pc, #372]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6213      	str	r3, [r2, #32]
 8001734:	e00b      	b.n	800174e <HAL_RCC_OscConfig+0x36e>
 8001736:	4b5b      	ldr	r3, [pc, #364]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4a5a      	ldr	r2, [pc, #360]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	6213      	str	r3, [r2, #32]
 8001742:	4b58      	ldr	r3, [pc, #352]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4a57      	ldr	r2, [pc, #348]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	f023 0304 	bic.w	r3, r3, #4
 800174c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d015      	beq.n	8001782 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7ff fb67 	bl	8000e28 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175c:	e00a      	b.n	8001774 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175e:	f7ff fb63 	bl	8000e28 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800176c:	4293      	cmp	r3, r2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e0b1      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001774:	4b4b      	ldr	r3, [pc, #300]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0ee      	beq.n	800175e <HAL_RCC_OscConfig+0x37e>
 8001780:	e014      	b.n	80017ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001782:	f7ff fb51 	bl	8000e28 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001788:	e00a      	b.n	80017a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178a:	f7ff fb4d 	bl	8000e28 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001798:	4293      	cmp	r3, r2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e09b      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a0:	4b40      	ldr	r3, [pc, #256]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1ee      	bne.n	800178a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d105      	bne.n	80017be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b2:	4b3c      	ldr	r3, [pc, #240]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	4a3b      	ldr	r2, [pc, #236]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8087 	beq.w	80018d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c8:	4b36      	ldr	r3, [pc, #216]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d061      	beq.n	8001898 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d146      	bne.n	800186a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017dc:	4b33      	ldr	r3, [pc, #204]	@ (80018ac <HAL_RCC_OscConfig+0x4cc>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e2:	f7ff fb21 	bl	8000e28 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ea:	f7ff fb1d 	bl	8000e28 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e06d      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fc:	4b29      	ldr	r3, [pc, #164]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f0      	bne.n	80017ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001810:	d108      	bne.n	8001824 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001812:	4b24      	ldr	r3, [pc, #144]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	4921      	ldr	r1, [pc, #132]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001824:	4b1f      	ldr	r3, [pc, #124]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a19      	ldr	r1, [r3, #32]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001834:	430b      	orrs	r3, r1
 8001836:	491b      	ldr	r1, [pc, #108]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_RCC_OscConfig+0x4cc>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7ff faf1 	bl	8000e28 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184a:	f7ff faed 	bl	8000e28 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e03d      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x46a>
 8001868:	e035      	b.n	80018d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186a:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <HAL_RCC_OscConfig+0x4cc>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fada 	bl	8000e28 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff fad6 	bl	8000e28 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e026      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_RCC_OscConfig+0x4c4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x498>
 8001896:	e01e      	b.n	80018d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d107      	bne.n	80018b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e019      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40007000 	.word	0x40007000
 80018ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018b0:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <HAL_RCC_OscConfig+0x500>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d106      	bne.n	80018d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d001      	beq.n	80018d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40021000 	.word	0x40021000

080018e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0d0      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018f8:	4b6a      	ldr	r3, [pc, #424]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d910      	bls.n	8001928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001906:	4b67      	ldr	r3, [pc, #412]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 0207 	bic.w	r2, r3, #7
 800190e:	4965      	ldr	r1, [pc, #404]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001916:	4b63      	ldr	r3, [pc, #396]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0b8      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d020      	beq.n	8001976 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001940:	4b59      	ldr	r3, [pc, #356]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a58      	ldr	r2, [pc, #352]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800194a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001958:	4b53      	ldr	r3, [pc, #332]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4a52      	ldr	r2, [pc, #328]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001962:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001964:	4b50      	ldr	r3, [pc, #320]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	494d      	ldr	r1, [pc, #308]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	4313      	orrs	r3, r2
 8001974:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d040      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	4b47      	ldr	r3, [pc, #284]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d115      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e07f      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a2:	4b41      	ldr	r3, [pc, #260]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e073      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b2:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e06b      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c2:	4b39      	ldr	r3, [pc, #228]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f023 0203 	bic.w	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4936      	ldr	r1, [pc, #216]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d4:	f7ff fa28 	bl	8000e28 <HAL_GetTick>
 80019d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019dc:	f7ff fa24 	bl	8000e28 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e053      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 020c 	and.w	r2, r3, #12
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d1eb      	bne.n	80019dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a04:	4b27      	ldr	r3, [pc, #156]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d210      	bcs.n	8001a34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 0207 	bic.w	r2, r3, #7
 8001a1a:	4922      	ldr	r1, [pc, #136]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a22:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e032      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a40:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	4916      	ldr	r1, [pc, #88]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a5e:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	490e      	ldr	r1, [pc, #56]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a72:	f000 f821 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8001a76:	4602      	mov	r2, r0
 8001a78:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	490a      	ldr	r1, [pc, #40]	@ (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 8001a84:	5ccb      	ldrb	r3, [r1, r3]
 8001a86:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8a:	4a09      	ldr	r2, [pc, #36]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1cc>)
 8001a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a8e:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1d0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff f986 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40022000 	.word	0x40022000
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	080023c4 	.word	0x080023c4
 8001ab0:	2000008c 	.word	0x2000008c
 8001ab4:	20000090 	.word	0x20000090

08001ab8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d002      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d003      	beq.n	8001aee <HAL_RCC_GetSysClockFreq+0x36>
 8001ae6:	e027      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ae8:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aea:	613b      	str	r3, [r7, #16]
      break;
 8001aec:	e027      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	0c9b      	lsrs	r3, r3, #18
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	4a17      	ldr	r2, [pc, #92]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001af8:	5cd3      	ldrb	r3, [r2, r3]
 8001afa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d010      	beq.n	8001b28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b06:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x94>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	0c5b      	lsrs	r3, r3, #17
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	4a11      	ldr	r2, [pc, #68]	@ (8001b58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b12:	5cd3      	ldrb	r3, [r2, r3]
 8001b14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a0d      	ldr	r2, [pc, #52]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b1a:	fb03 f202 	mul.w	r2, r3, r2
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	e004      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b2c:	fb02 f303 	mul.w	r3, r2, r3
 8001b30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	613b      	str	r3, [r7, #16]
      break;
 8001b36:	e002      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b38:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b3a:	613b      	str	r3, [r7, #16]
      break;
 8001b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3e:	693b      	ldr	r3, [r7, #16]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	371c      	adds	r7, #28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	007a1200 	.word	0x007a1200
 8001b54:	080023d4 	.word	0x080023d4
 8001b58:	080023e4 	.word	0x080023e4
 8001b5c:	003d0900 	.word	0x003d0900

08001b60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b68:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <RCC_Delay+0x34>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b98 <RCC_Delay+0x38>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	0a5b      	lsrs	r3, r3, #9
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	fb02 f303 	mul.w	r3, r2, r3
 8001b7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b7c:	bf00      	nop
  }
  while (Delay --);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1e5a      	subs	r2, r3, #1
 8001b82:	60fa      	str	r2, [r7, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f9      	bne.n	8001b7c <RCC_Delay+0x1c>
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	2000008c 	.word	0x2000008c
 8001b98:	10624dd3 	.word	0x10624dd3

08001b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e041      	b.n	8001c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d106      	bne.n	8001bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff f852 	bl	8000c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f000 fa56 	bl	800208c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d001      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e035      	b.n	8001cc0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a16      	ldr	r2, [pc, #88]	@ (8001ccc <HAL_TIM_Base_Start_IT+0x90>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d009      	beq.n	8001c8a <HAL_TIM_Base_Start_IT+0x4e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c7e:	d004      	beq.n	8001c8a <HAL_TIM_Base_Start_IT+0x4e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a12      	ldr	r2, [pc, #72]	@ (8001cd0 <HAL_TIM_Base_Start_IT+0x94>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d111      	bne.n	8001cae <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b06      	cmp	r3, #6
 8001c9a:	d010      	beq.n	8001cbe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cac:	e007      	b.n	8001cbe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0201 	orr.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40012c00 	.word	0x40012c00
 8001cd0:	40000400 	.word	0x40000400

08001cd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d020      	beq.n	8001d38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01b      	beq.n	8001d38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0202 	mvn.w	r2, #2
 8001d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f998 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001d24:	e005      	b.n	8001d32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f98b 	bl	8002042 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f99a 	bl	8002066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d020      	beq.n	8001d84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01b      	beq.n	8001d84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0204 	mvn.w	r2, #4
 8001d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2202      	movs	r2, #2
 8001d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f972 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001d70:	e005      	b.n	8001d7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f965 	bl	8002042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f974 	bl	8002066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d020      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01b      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0208 	mvn.w	r2, #8
 8001da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2204      	movs	r2, #4
 8001da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f94c 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001dbc:	e005      	b.n	8001dca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f93f 	bl	8002042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f94e 	bl	8002066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d020      	beq.n	8001e1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01b      	beq.n	8001e1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0210 	mvn.w	r2, #16
 8001dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2208      	movs	r2, #8
 8001df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f926 	bl	8002054 <HAL_TIM_IC_CaptureCallback>
 8001e08:	e005      	b.n	8001e16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f919 	bl	8002042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f928 	bl	8002066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00c      	beq.n	8001e40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d007      	beq.n	8001e40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0201 	mvn.w	r2, #1
 8001e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7fe fed2 	bl	8000be4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00c      	beq.n	8001e64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d007      	beq.n	8001e64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fa6f 	bl	8002342 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00c      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d007      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f8f8 	bl	8002078 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f003 0320 	and.w	r3, r3, #32
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00c      	beq.n	8001eac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0220 	mvn.w	r2, #32
 8001ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fa42 	bl	8002330 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_TIM_ConfigClockSource+0x1c>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e0b4      	b.n	800203a <HAL_TIM_ConfigClockSource+0x186>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001ef6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f08:	d03e      	beq.n	8001f88 <HAL_TIM_ConfigClockSource+0xd4>
 8001f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f0e:	f200 8087 	bhi.w	8002020 <HAL_TIM_ConfigClockSource+0x16c>
 8001f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f16:	f000 8086 	beq.w	8002026 <HAL_TIM_ConfigClockSource+0x172>
 8001f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f1e:	d87f      	bhi.n	8002020 <HAL_TIM_ConfigClockSource+0x16c>
 8001f20:	2b70      	cmp	r3, #112	@ 0x70
 8001f22:	d01a      	beq.n	8001f5a <HAL_TIM_ConfigClockSource+0xa6>
 8001f24:	2b70      	cmp	r3, #112	@ 0x70
 8001f26:	d87b      	bhi.n	8002020 <HAL_TIM_ConfigClockSource+0x16c>
 8001f28:	2b60      	cmp	r3, #96	@ 0x60
 8001f2a:	d050      	beq.n	8001fce <HAL_TIM_ConfigClockSource+0x11a>
 8001f2c:	2b60      	cmp	r3, #96	@ 0x60
 8001f2e:	d877      	bhi.n	8002020 <HAL_TIM_ConfigClockSource+0x16c>
 8001f30:	2b50      	cmp	r3, #80	@ 0x50
 8001f32:	d03c      	beq.n	8001fae <HAL_TIM_ConfigClockSource+0xfa>
 8001f34:	2b50      	cmp	r3, #80	@ 0x50
 8001f36:	d873      	bhi.n	8002020 <HAL_TIM_ConfigClockSource+0x16c>
 8001f38:	2b40      	cmp	r3, #64	@ 0x40
 8001f3a:	d058      	beq.n	8001fee <HAL_TIM_ConfigClockSource+0x13a>
 8001f3c:	2b40      	cmp	r3, #64	@ 0x40
 8001f3e:	d86f      	bhi.n	8002020 <HAL_TIM_ConfigClockSource+0x16c>
 8001f40:	2b30      	cmp	r3, #48	@ 0x30
 8001f42:	d064      	beq.n	800200e <HAL_TIM_ConfigClockSource+0x15a>
 8001f44:	2b30      	cmp	r3, #48	@ 0x30
 8001f46:	d86b      	bhi.n	8002020 <HAL_TIM_ConfigClockSource+0x16c>
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	d060      	beq.n	800200e <HAL_TIM_ConfigClockSource+0x15a>
 8001f4c:	2b20      	cmp	r3, #32
 8001f4e:	d867      	bhi.n	8002020 <HAL_TIM_ConfigClockSource+0x16c>
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d05c      	beq.n	800200e <HAL_TIM_ConfigClockSource+0x15a>
 8001f54:	2b10      	cmp	r3, #16
 8001f56:	d05a      	beq.n	800200e <HAL_TIM_ConfigClockSource+0x15a>
 8001f58:	e062      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f6a:	f000 f96a 	bl	8002242 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001f7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	609a      	str	r2, [r3, #8]
      break;
 8001f86:	e04f      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f98:	f000 f953 	bl	8002242 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001faa:	609a      	str	r2, [r3, #8]
      break;
 8001fac:	e03c      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f000 f8ca 	bl	8002154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2150      	movs	r1, #80	@ 0x50
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f921 	bl	800220e <TIM_ITRx_SetConfig>
      break;
 8001fcc:	e02c      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f000 f8e8 	bl	80021b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2160      	movs	r1, #96	@ 0x60
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f911 	bl	800220e <TIM_ITRx_SetConfig>
      break;
 8001fec:	e01c      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f000 f8aa 	bl	8002154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2140      	movs	r1, #64	@ 0x40
 8002006:	4618      	mov	r0, r3
 8002008:	f000 f901 	bl	800220e <TIM_ITRx_SetConfig>
      break;
 800200c:	e00c      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4619      	mov	r1, r3
 8002018:	4610      	mov	r0, r2
 800201a:	f000 f8f8 	bl	800220e <TIM_ITRx_SetConfig>
      break;
 800201e:	e003      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
      break;
 8002024:	e000      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002026:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002038:	7bfb      	ldrb	r3, [r7, #15]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
	...

0800208c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a2b      	ldr	r2, [pc, #172]	@ (800214c <TIM_Base_SetConfig+0xc0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d007      	beq.n	80020b4 <TIM_Base_SetConfig+0x28>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020aa:	d003      	beq.n	80020b4 <TIM_Base_SetConfig+0x28>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a28      	ldr	r2, [pc, #160]	@ (8002150 <TIM_Base_SetConfig+0xc4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d108      	bne.n	80020c6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a20      	ldr	r2, [pc, #128]	@ (800214c <TIM_Base_SetConfig+0xc0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d007      	beq.n	80020de <TIM_Base_SetConfig+0x52>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020d4:	d003      	beq.n	80020de <TIM_Base_SetConfig+0x52>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002150 <TIM_Base_SetConfig+0xc4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d108      	bne.n	80020f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a0d      	ldr	r2, [pc, #52]	@ (800214c <TIM_Base_SetConfig+0xc0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d103      	bne.n	8002124 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f023 0201 	bic.w	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	611a      	str	r2, [r3, #16]
  }
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	40012c00 	.word	0x40012c00
 8002150:	40000400 	.word	0x40000400

08002154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	f023 0201 	bic.w	r2, r3, #1
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800217e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f023 030a 	bic.w	r3, r3, #10
 8002190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4313      	orrs	r3, r2
 8002198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	621a      	str	r2, [r3, #32]
}
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	f023 0210 	bic.w	r2, r3, #16
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80021da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	031b      	lsls	r3, r3, #12
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80021ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	621a      	str	r2, [r3, #32]
}
 8002204:	bf00      	nop
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800220e:	b480      	push	{r7}
 8002210:	b085      	sub	sp, #20
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	f043 0307 	orr.w	r3, r3, #7
 8002230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	609a      	str	r2, [r3, #8]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002242:	b480      	push	{r7}
 8002244:	b087      	sub	sp, #28
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800225c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	021a      	lsls	r2, r3, #8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	431a      	orrs	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	4313      	orrs	r3, r2
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4313      	orrs	r3, r2
 800226e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	609a      	str	r2, [r3, #8]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002294:	2302      	movs	r3, #2
 8002296:	e041      	b.n	800231c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a14      	ldr	r2, [pc, #80]	@ (8002328 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d009      	beq.n	80022f0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e4:	d004      	beq.n	80022f0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a10      	ldr	r2, [pc, #64]	@ (800232c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d10c      	bne.n	800230a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	4313      	orrs	r3, r2
 8002300:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40012c00 	.word	0x40012c00
 800232c:	40000400 	.word	0x40000400

08002330 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <memset>:
 8002354:	4603      	mov	r3, r0
 8002356:	4402      	add	r2, r0
 8002358:	4293      	cmp	r3, r2
 800235a:	d100      	bne.n	800235e <memset+0xa>
 800235c:	4770      	bx	lr
 800235e:	f803 1b01 	strb.w	r1, [r3], #1
 8002362:	e7f9      	b.n	8002358 <memset+0x4>

08002364 <__libc_init_array>:
 8002364:	b570      	push	{r4, r5, r6, lr}
 8002366:	2600      	movs	r6, #0
 8002368:	4d0c      	ldr	r5, [pc, #48]	@ (800239c <__libc_init_array+0x38>)
 800236a:	4c0d      	ldr	r4, [pc, #52]	@ (80023a0 <__libc_init_array+0x3c>)
 800236c:	1b64      	subs	r4, r4, r5
 800236e:	10a4      	asrs	r4, r4, #2
 8002370:	42a6      	cmp	r6, r4
 8002372:	d109      	bne.n	8002388 <__libc_init_array+0x24>
 8002374:	f000 f81a 	bl	80023ac <_init>
 8002378:	2600      	movs	r6, #0
 800237a:	4d0a      	ldr	r5, [pc, #40]	@ (80023a4 <__libc_init_array+0x40>)
 800237c:	4c0a      	ldr	r4, [pc, #40]	@ (80023a8 <__libc_init_array+0x44>)
 800237e:	1b64      	subs	r4, r4, r5
 8002380:	10a4      	asrs	r4, r4, #2
 8002382:	42a6      	cmp	r6, r4
 8002384:	d105      	bne.n	8002392 <__libc_init_array+0x2e>
 8002386:	bd70      	pop	{r4, r5, r6, pc}
 8002388:	f855 3b04 	ldr.w	r3, [r5], #4
 800238c:	4798      	blx	r3
 800238e:	3601      	adds	r6, #1
 8002390:	e7ee      	b.n	8002370 <__libc_init_array+0xc>
 8002392:	f855 3b04 	ldr.w	r3, [r5], #4
 8002396:	4798      	blx	r3
 8002398:	3601      	adds	r6, #1
 800239a:	e7f2      	b.n	8002382 <__libc_init_array+0x1e>
 800239c:	080023e8 	.word	0x080023e8
 80023a0:	080023e8 	.word	0x080023e8
 80023a4:	080023e8 	.word	0x080023e8
 80023a8:	080023ec 	.word	0x080023ec

080023ac <_init>:
 80023ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ae:	bf00      	nop
 80023b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b2:	bc08      	pop	{r3}
 80023b4:	469e      	mov	lr, r3
 80023b6:	4770      	bx	lr

080023b8 <_fini>:
 80023b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ba:	bf00      	nop
 80023bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023be:	bc08      	pop	{r3}
 80023c0:	469e      	mov	lr, r3
 80023c2:	4770      	bx	lr
