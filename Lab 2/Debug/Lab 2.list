
Lab 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fb0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080020bc  080020bc  000030bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020e0  080020e0  000040b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080020e0  080020e0  000040b8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080020e0  080020e0  000040b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020e0  080020e0  000030e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020e4  080020e4  000030e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b8  20000000  080020e8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  200000b8  080021a0  000040b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080021a0  00004154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000040b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007df4  00000000  00000000  000040e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001620  00000000  00000000  0000bed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0000d4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000757  00000000  00000000  0000de78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163a8  00000000  00000000  0000e5cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009afd  00000000  00000000  00024977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082473  00000000  00000000  0002e474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b08e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002734  00000000  00000000  000b092c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000b3060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b8 	.word	0x200000b8
 8000128:	00000000 	.word	0x00000000
 800012c:	080020a4 	.word	0x080020a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000bc 	.word	0x200000bc
 8000148:	080020a4 	.word	0x080020a4

0800014c <display7SEG>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void display7SEG(int num)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	int bitmask = segmentMap[num];
 8000154:	4a14      	ldr	r2, [pc, #80]	@ (80001a8 <display7SEG+0x5c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < 7; i++)
 800015e:	2300      	movs	r3, #0
 8000160:	60fb      	str	r3, [r7, #12]
 8000162:	e018      	b.n	8000196 <display7SEG+0x4a>
	{
		HAL_GPIO_WritePin(GPIOB, SEG_Pins[i], (bitmask & (1 << (6 - i))) ? RESET : SET);
 8000164:	4a11      	ldr	r2, [pc, #68]	@ (80001ac <display7SEG+0x60>)
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800016c:	b299      	uxth	r1, r3
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	f1c3 0306 	rsb	r3, r3, #6
 8000174:	68ba      	ldr	r2, [r7, #8]
 8000176:	fa42 f303 	asr.w	r3, r2, r3
 800017a:	f003 0301 	and.w	r3, r3, #1
 800017e:	2b00      	cmp	r3, #0
 8000180:	bf0c      	ite	eq
 8000182:	2301      	moveq	r3, #1
 8000184:	2300      	movne	r3, #0
 8000186:	b2db      	uxtb	r3, r3
 8000188:	461a      	mov	r2, r3
 800018a:	4809      	ldr	r0, [pc, #36]	@ (80001b0 <display7SEG+0x64>)
 800018c:	f000 ff72 	bl	8001074 <HAL_GPIO_WritePin>
	for (int i = 0; i < 7; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	2b06      	cmp	r3, #6
 800019a:	dde3      	ble.n	8000164 <display7SEG+0x18>
	}
}
 800019c:	bf00      	nop
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000018 	.word	0x20000018
 80001ac:	20000040 	.word	0x20000040
 80001b0:	40010c00 	.word	0x40010c00

080001b4 <displayLEDMatrix>:

void displayLEDMatrix(int num_data)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b084      	sub	sp, #16
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 8; i++)
 80001bc:	2300      	movs	r3, #0
 80001be:	60fb      	str	r3, [r7, #12]
 80001c0:	e016      	b.n	80001f0 <displayLEDMatrix+0x3c>
    {
        HAL_GPIO_WritePin(GPIOB, ROW_Pins[i], (num_data & (1 << i)) ? RESET : SET);
 80001c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000200 <displayLEDMatrix+0x4c>)
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ca:	b299      	uxth	r1, r3
 80001cc:	687a      	ldr	r2, [r7, #4]
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	fa42 f303 	asr.w	r3, r2, r3
 80001d4:	f003 0301 	and.w	r3, r3, #1
 80001d8:	2b00      	cmp	r3, #0
 80001da:	bf0c      	ite	eq
 80001dc:	2301      	moveq	r3, #1
 80001de:	2300      	movne	r3, #0
 80001e0:	b2db      	uxtb	r3, r3
 80001e2:	461a      	mov	r2, r3
 80001e4:	4807      	ldr	r0, [pc, #28]	@ (8000204 <displayLEDMatrix+0x50>)
 80001e6:	f000 ff45 	bl	8001074 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++)
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	3301      	adds	r3, #1
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	2b07      	cmp	r3, #7
 80001f4:	dde5      	ble.n	80001c2 <displayLEDMatrix+0xe>
    }
}
 80001f6:	bf00      	nop
 80001f8:	bf00      	nop
 80001fa:	3710      	adds	r7, #16
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	2000008c 	.word	0x2000008c
 8000204:	40010c00 	.word	0x40010c00

08000208 <update7SEG>:

void update7SEG(int index) {
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < 4; i++)
 8000210:	2300      	movs	r3, #0
 8000212:	60fb      	str	r3, [r7, #12]
 8000214:	e00c      	b.n	8000230 <update7SEG+0x28>
	{
		HAL_GPIO_WritePin(GPIOA, EN_Pins[i], GPIO_PIN_SET);
 8000216:	4a2e      	ldr	r2, [pc, #184]	@ (80002d0 <update7SEG+0xc8>)
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800021e:	b29b      	uxth	r3, r3
 8000220:	2201      	movs	r2, #1
 8000222:	4619      	mov	r1, r3
 8000224:	482b      	ldr	r0, [pc, #172]	@ (80002d4 <update7SEG+0xcc>)
 8000226:	f000 ff25 	bl	8001074 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++)
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	3301      	adds	r3, #1
 800022e:	60fb      	str	r3, [r7, #12]
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	2b03      	cmp	r3, #3
 8000234:	ddef      	ble.n	8000216 <update7SEG+0xe>
	}

    switch (index) {
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2b03      	cmp	r3, #3
 800023a:	d843      	bhi.n	80002c4 <update7SEG+0xbc>
 800023c:	a201      	add	r2, pc, #4	@ (adr r2, 8000244 <update7SEG+0x3c>)
 800023e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000242:	bf00      	nop
 8000244:	08000255 	.word	0x08000255
 8000248:	08000271 	.word	0x08000271
 800024c:	0800028d 	.word	0x0800028d
 8000250:	080002a9 	.word	0x080002a9
        case 0:
        	HAL_GPIO_WritePin(GPIOA, EN_Pins[0], GPIO_PIN_RESET);
 8000254:	4b1e      	ldr	r3, [pc, #120]	@ (80002d0 <update7SEG+0xc8>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	b29b      	uxth	r3, r3
 800025a:	2200      	movs	r2, #0
 800025c:	4619      	mov	r1, r3
 800025e:	481d      	ldr	r0, [pc, #116]	@ (80002d4 <update7SEG+0xcc>)
 8000260:	f000 ff08 	bl	8001074 <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[0]);
 8000264:	4b1c      	ldr	r3, [pc, #112]	@ (80002d8 <update7SEG+0xd0>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4618      	mov	r0, r3
 800026a:	f7ff ff6f 	bl	800014c <display7SEG>
            break;
 800026e:	e02a      	b.n	80002c6 <update7SEG+0xbe>

        case 1:
        	HAL_GPIO_WritePin(GPIOA, EN_Pins[1], GPIO_PIN_RESET);
 8000270:	4b17      	ldr	r3, [pc, #92]	@ (80002d0 <update7SEG+0xc8>)
 8000272:	685b      	ldr	r3, [r3, #4]
 8000274:	b29b      	uxth	r3, r3
 8000276:	2200      	movs	r2, #0
 8000278:	4619      	mov	r1, r3
 800027a:	4816      	ldr	r0, [pc, #88]	@ (80002d4 <update7SEG+0xcc>)
 800027c:	f000 fefa 	bl	8001074 <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[1]);
 8000280:	4b15      	ldr	r3, [pc, #84]	@ (80002d8 <update7SEG+0xd0>)
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	4618      	mov	r0, r3
 8000286:	f7ff ff61 	bl	800014c <display7SEG>
            break;
 800028a:	e01c      	b.n	80002c6 <update7SEG+0xbe>

        case 2:
        	HAL_GPIO_WritePin(GPIOA, EN_Pins[2], GPIO_PIN_RESET);
 800028c:	4b10      	ldr	r3, [pc, #64]	@ (80002d0 <update7SEG+0xc8>)
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	b29b      	uxth	r3, r3
 8000292:	2200      	movs	r2, #0
 8000294:	4619      	mov	r1, r3
 8000296:	480f      	ldr	r0, [pc, #60]	@ (80002d4 <update7SEG+0xcc>)
 8000298:	f000 feec 	bl	8001074 <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[2]);
 800029c:	4b0e      	ldr	r3, [pc, #56]	@ (80002d8 <update7SEG+0xd0>)
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	4618      	mov	r0, r3
 80002a2:	f7ff ff53 	bl	800014c <display7SEG>
            break;
 80002a6:	e00e      	b.n	80002c6 <update7SEG+0xbe>

        case 3:
        	HAL_GPIO_WritePin(GPIOA, EN_Pins[3], GPIO_PIN_RESET);
 80002a8:	4b09      	ldr	r3, [pc, #36]	@ (80002d0 <update7SEG+0xc8>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	2200      	movs	r2, #0
 80002b0:	4619      	mov	r1, r3
 80002b2:	4808      	ldr	r0, [pc, #32]	@ (80002d4 <update7SEG+0xcc>)
 80002b4:	f000 fede 	bl	8001074 <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[3]);
 80002b8:	4b07      	ldr	r3, [pc, #28]	@ (80002d8 <update7SEG+0xd0>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ff45 	bl	800014c <display7SEG>
            break;
 80002c2:	e000      	b.n	80002c6 <update7SEG+0xbe>

        default:
            break;
 80002c4:	bf00      	nop
    }
}
 80002c6:	bf00      	nop
 80002c8:	3710      	adds	r7, #16
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	2000005c 	.word	0x2000005c
 80002d4:	40010800 	.word	0x40010800
 80002d8:	20000124 	.word	0x20000124

080002dc <updateClockBuffer>:

void updateClockBuffer()
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	led_buffer[0] = hour / 10;
 80002e0:	4b1a      	ldr	r3, [pc, #104]	@ (800034c <updateClockBuffer+0x70>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a1a      	ldr	r2, [pc, #104]	@ (8000350 <updateClockBuffer+0x74>)
 80002e6:	fb82 1203 	smull	r1, r2, r2, r3
 80002ea:	1092      	asrs	r2, r2, #2
 80002ec:	17db      	asrs	r3, r3, #31
 80002ee:	1ad3      	subs	r3, r2, r3
 80002f0:	4a18      	ldr	r2, [pc, #96]	@ (8000354 <updateClockBuffer+0x78>)
 80002f2:	6013      	str	r3, [r2, #0]
	led_buffer[1] = hour % 10;
 80002f4:	4b15      	ldr	r3, [pc, #84]	@ (800034c <updateClockBuffer+0x70>)
 80002f6:	6819      	ldr	r1, [r3, #0]
 80002f8:	4b15      	ldr	r3, [pc, #84]	@ (8000350 <updateClockBuffer+0x74>)
 80002fa:	fb83 2301 	smull	r2, r3, r3, r1
 80002fe:	109a      	asrs	r2, r3, #2
 8000300:	17cb      	asrs	r3, r1, #31
 8000302:	1ad2      	subs	r2, r2, r3
 8000304:	4613      	mov	r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	4413      	add	r3, r2
 800030a:	005b      	lsls	r3, r3, #1
 800030c:	1aca      	subs	r2, r1, r3
 800030e:	4b11      	ldr	r3, [pc, #68]	@ (8000354 <updateClockBuffer+0x78>)
 8000310:	605a      	str	r2, [r3, #4]
	led_buffer[2] = minute / 10;
 8000312:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <updateClockBuffer+0x7c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a0e      	ldr	r2, [pc, #56]	@ (8000350 <updateClockBuffer+0x74>)
 8000318:	fb82 1203 	smull	r1, r2, r2, r3
 800031c:	1092      	asrs	r2, r2, #2
 800031e:	17db      	asrs	r3, r3, #31
 8000320:	1ad3      	subs	r3, r2, r3
 8000322:	4a0c      	ldr	r2, [pc, #48]	@ (8000354 <updateClockBuffer+0x78>)
 8000324:	6093      	str	r3, [r2, #8]
	led_buffer[3] = minute % 10;
 8000326:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <updateClockBuffer+0x7c>)
 8000328:	6819      	ldr	r1, [r3, #0]
 800032a:	4b09      	ldr	r3, [pc, #36]	@ (8000350 <updateClockBuffer+0x74>)
 800032c:	fb83 2301 	smull	r2, r3, r3, r1
 8000330:	109a      	asrs	r2, r3, #2
 8000332:	17cb      	asrs	r3, r1, #31
 8000334:	1ad2      	subs	r2, r2, r3
 8000336:	4613      	mov	r3, r2
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	4413      	add	r3, r2
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	1aca      	subs	r2, r1, r3
 8000340:	4b04      	ldr	r3, [pc, #16]	@ (8000354 <updateClockBuffer+0x78>)
 8000342:	60da      	str	r2, [r3, #12]
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	20000008 	.word	0x20000008
 8000350:	66666667 	.word	0x66666667
 8000354:	20000124 	.word	0x20000124
 8000358:	2000000c 	.word	0x2000000c

0800035c <updateLEDMatrix>:

void updateLEDMatrix(int index) {
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++)
 8000364:	2300      	movs	r3, #0
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	e00c      	b.n	8000384 <updateLEDMatrix+0x28>
	{
		HAL_GPIO_WritePin(GPIOA, ENM_Pins[i], GPIO_PIN_SET);
 800036a:	4a4e      	ldr	r2, [pc, #312]	@ (80004a4 <updateLEDMatrix+0x148>)
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000372:	b29b      	uxth	r3, r3
 8000374:	2201      	movs	r2, #1
 8000376:	4619      	mov	r1, r3
 8000378:	484b      	ldr	r0, [pc, #300]	@ (80004a8 <updateLEDMatrix+0x14c>)
 800037a:	f000 fe7b 	bl	8001074 <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; i++)
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	3301      	adds	r3, #1
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	2b07      	cmp	r3, #7
 8000388:	ddef      	ble.n	800036a <updateLEDMatrix+0xe>
	}

    switch (index) {
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b07      	cmp	r3, #7
 800038e:	f200 8083 	bhi.w	8000498 <updateLEDMatrix+0x13c>
 8000392:	a201      	add	r2, pc, #4	@ (adr r2, 8000398 <updateLEDMatrix+0x3c>)
 8000394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000398:	080003b9 	.word	0x080003b9
 800039c:	080003d5 	.word	0x080003d5
 80003a0:	080003f1 	.word	0x080003f1
 80003a4:	0800040d 	.word	0x0800040d
 80003a8:	08000429 	.word	0x08000429
 80003ac:	08000445 	.word	0x08000445
 80003b0:	08000461 	.word	0x08000461
 80003b4:	0800047d 	.word	0x0800047d
        case 0:
            HAL_GPIO_WritePin(GPIOA, ENM_Pins[0], GPIO_PIN_RESET);
 80003b8:	4b3a      	ldr	r3, [pc, #232]	@ (80004a4 <updateLEDMatrix+0x148>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	b29b      	uxth	r3, r3
 80003be:	2200      	movs	r2, #0
 80003c0:	4619      	mov	r1, r3
 80003c2:	4839      	ldr	r0, [pc, #228]	@ (80004a8 <updateLEDMatrix+0x14c>)
 80003c4:	f000 fe56 	bl	8001074 <HAL_GPIO_WritePin>
            displayLEDMatrix(matrix_buffer[0]);
 80003c8:	4b38      	ldr	r3, [pc, #224]	@ (80004ac <updateLEDMatrix+0x150>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff fef1 	bl	80001b4 <displayLEDMatrix>
            break;
 80003d2:	e062      	b.n	800049a <updateLEDMatrix+0x13e>
        case 1:
            HAL_GPIO_WritePin(GPIOA, ENM_Pins[1], GPIO_PIN_RESET);
 80003d4:	4b33      	ldr	r3, [pc, #204]	@ (80004a4 <updateLEDMatrix+0x148>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	b29b      	uxth	r3, r3
 80003da:	2200      	movs	r2, #0
 80003dc:	4619      	mov	r1, r3
 80003de:	4832      	ldr	r0, [pc, #200]	@ (80004a8 <updateLEDMatrix+0x14c>)
 80003e0:	f000 fe48 	bl	8001074 <HAL_GPIO_WritePin>
            displayLEDMatrix(matrix_buffer[1]);
 80003e4:	4b31      	ldr	r3, [pc, #196]	@ (80004ac <updateLEDMatrix+0x150>)
 80003e6:	785b      	ldrb	r3, [r3, #1]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff fee3 	bl	80001b4 <displayLEDMatrix>
            break;
 80003ee:	e054      	b.n	800049a <updateLEDMatrix+0x13e>
        case 2:
            HAL_GPIO_WritePin(GPIOA, ENM_Pins[2], GPIO_PIN_RESET);
 80003f0:	4b2c      	ldr	r3, [pc, #176]	@ (80004a4 <updateLEDMatrix+0x148>)
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	2200      	movs	r2, #0
 80003f8:	4619      	mov	r1, r3
 80003fa:	482b      	ldr	r0, [pc, #172]	@ (80004a8 <updateLEDMatrix+0x14c>)
 80003fc:	f000 fe3a 	bl	8001074 <HAL_GPIO_WritePin>
            displayLEDMatrix(matrix_buffer[2]);
 8000400:	4b2a      	ldr	r3, [pc, #168]	@ (80004ac <updateLEDMatrix+0x150>)
 8000402:	789b      	ldrb	r3, [r3, #2]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff fed5 	bl	80001b4 <displayLEDMatrix>
            break;
 800040a:	e046      	b.n	800049a <updateLEDMatrix+0x13e>
        case 3:
            HAL_GPIO_WritePin(GPIOA, ENM_Pins[3], GPIO_PIN_RESET);
 800040c:	4b25      	ldr	r3, [pc, #148]	@ (80004a4 <updateLEDMatrix+0x148>)
 800040e:	68db      	ldr	r3, [r3, #12]
 8000410:	b29b      	uxth	r3, r3
 8000412:	2200      	movs	r2, #0
 8000414:	4619      	mov	r1, r3
 8000416:	4824      	ldr	r0, [pc, #144]	@ (80004a8 <updateLEDMatrix+0x14c>)
 8000418:	f000 fe2c 	bl	8001074 <HAL_GPIO_WritePin>
            displayLEDMatrix(matrix_buffer[3]);
 800041c:	4b23      	ldr	r3, [pc, #140]	@ (80004ac <updateLEDMatrix+0x150>)
 800041e:	78db      	ldrb	r3, [r3, #3]
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff fec7 	bl	80001b4 <displayLEDMatrix>
            break;
 8000426:	e038      	b.n	800049a <updateLEDMatrix+0x13e>
        case 4:
            HAL_GPIO_WritePin(GPIOA, ENM_Pins[4], GPIO_PIN_RESET);
 8000428:	4b1e      	ldr	r3, [pc, #120]	@ (80004a4 <updateLEDMatrix+0x148>)
 800042a:	691b      	ldr	r3, [r3, #16]
 800042c:	b29b      	uxth	r3, r3
 800042e:	2200      	movs	r2, #0
 8000430:	4619      	mov	r1, r3
 8000432:	481d      	ldr	r0, [pc, #116]	@ (80004a8 <updateLEDMatrix+0x14c>)
 8000434:	f000 fe1e 	bl	8001074 <HAL_GPIO_WritePin>
            displayLEDMatrix(matrix_buffer[4]);
 8000438:	4b1c      	ldr	r3, [pc, #112]	@ (80004ac <updateLEDMatrix+0x150>)
 800043a:	791b      	ldrb	r3, [r3, #4]
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff feb9 	bl	80001b4 <displayLEDMatrix>
            break;
 8000442:	e02a      	b.n	800049a <updateLEDMatrix+0x13e>
        case 5:
            HAL_GPIO_WritePin(GPIOA, ENM_Pins[5], GPIO_PIN_RESET);
 8000444:	4b17      	ldr	r3, [pc, #92]	@ (80004a4 <updateLEDMatrix+0x148>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	b29b      	uxth	r3, r3
 800044a:	2200      	movs	r2, #0
 800044c:	4619      	mov	r1, r3
 800044e:	4816      	ldr	r0, [pc, #88]	@ (80004a8 <updateLEDMatrix+0x14c>)
 8000450:	f000 fe10 	bl	8001074 <HAL_GPIO_WritePin>
            displayLEDMatrix(matrix_buffer[5]);
 8000454:	4b15      	ldr	r3, [pc, #84]	@ (80004ac <updateLEDMatrix+0x150>)
 8000456:	795b      	ldrb	r3, [r3, #5]
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff feab 	bl	80001b4 <displayLEDMatrix>
            break;
 800045e:	e01c      	b.n	800049a <updateLEDMatrix+0x13e>
        case 6:
            HAL_GPIO_WritePin(GPIOA, ENM_Pins[6], GPIO_PIN_RESET);
 8000460:	4b10      	ldr	r3, [pc, #64]	@ (80004a4 <updateLEDMatrix+0x148>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	b29b      	uxth	r3, r3
 8000466:	2200      	movs	r2, #0
 8000468:	4619      	mov	r1, r3
 800046a:	480f      	ldr	r0, [pc, #60]	@ (80004a8 <updateLEDMatrix+0x14c>)
 800046c:	f000 fe02 	bl	8001074 <HAL_GPIO_WritePin>
            displayLEDMatrix(matrix_buffer[6]);
 8000470:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <updateLEDMatrix+0x150>)
 8000472:	799b      	ldrb	r3, [r3, #6]
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff fe9d 	bl	80001b4 <displayLEDMatrix>
            break;
 800047a:	e00e      	b.n	800049a <updateLEDMatrix+0x13e>
        case 7:
            HAL_GPIO_WritePin(GPIOA, ENM_Pins[7], GPIO_PIN_RESET);
 800047c:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <updateLEDMatrix+0x148>)
 800047e:	69db      	ldr	r3, [r3, #28]
 8000480:	b29b      	uxth	r3, r3
 8000482:	2200      	movs	r2, #0
 8000484:	4619      	mov	r1, r3
 8000486:	4808      	ldr	r0, [pc, #32]	@ (80004a8 <updateLEDMatrix+0x14c>)
 8000488:	f000 fdf4 	bl	8001074 <HAL_GPIO_WritePin>
            displayLEDMatrix(matrix_buffer[7]);
 800048c:	4b07      	ldr	r3, [pc, #28]	@ (80004ac <updateLEDMatrix+0x150>)
 800048e:	79db      	ldrb	r3, [r3, #7]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff fe8f 	bl	80001b4 <displayLEDMatrix>
            break;
 8000496:	e000      	b.n	800049a <updateLEDMatrix+0x13e>
        default:
            break;
 8000498:	bf00      	nop
    }
}
 800049a:	bf00      	nop
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	2000006c 	.word	0x2000006c
 80004a8:	40010800 	.word	0x40010800
 80004ac:	20000000 	.word	0x20000000

080004b0 <shiftMatrixLeft>:

void shiftMatrixLeft(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
    uint8_t first = matrix_buffer[0];
 80004b6:	4b10      	ldr	r3, [pc, #64]	@ (80004f8 <shiftMatrixLeft+0x48>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	70fb      	strb	r3, [r7, #3]

    for (int i = 0; i < MAX_LED_MATRIX - 1; i++)
 80004bc:	2300      	movs	r3, #0
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	e00b      	b.n	80004da <shiftMatrixLeft+0x2a>
    {
        matrix_buffer[i] = matrix_buffer[i + 1];
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	3301      	adds	r3, #1
 80004c6:	4a0c      	ldr	r2, [pc, #48]	@ (80004f8 <shiftMatrixLeft+0x48>)
 80004c8:	5cd1      	ldrb	r1, [r2, r3]
 80004ca:	4a0b      	ldr	r2, [pc, #44]	@ (80004f8 <shiftMatrixLeft+0x48>)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4413      	add	r3, r2
 80004d0:	460a      	mov	r2, r1
 80004d2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAX_LED_MATRIX - 1; i++)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	3301      	adds	r3, #1
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	2308      	movs	r3, #8
 80004dc:	3b01      	subs	r3, #1
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	dbee      	blt.n	80004c2 <shiftMatrixLeft+0x12>
    }

    matrix_buffer[MAX_LED_MATRIX - 1] = first;
 80004e4:	2308      	movs	r3, #8
 80004e6:	3b01      	subs	r3, #1
 80004e8:	4903      	ldr	r1, [pc, #12]	@ (80004f8 <shiftMatrixLeft+0x48>)
 80004ea:	78fa      	ldrb	r2, [r7, #3]
 80004ec:	54ca      	strb	r2, [r1, r3]
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	20000000 	.word	0x20000000

080004fc <setTimer0>:

void setTimer0(int duration) {
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
    timer0_counter = duration / TIMER_CYCLE;
 8000504:	4b07      	ldr	r3, [pc, #28]	@ (8000524 <setTimer0+0x28>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	fb92 f3f3 	sdiv	r3, r2, r3
 800050e:	4a06      	ldr	r2, [pc, #24]	@ (8000528 <setTimer0+0x2c>)
 8000510:	6013      	str	r3, [r2, #0]
    timer0_flag = 0;
 8000512:	4b06      	ldr	r3, [pc, #24]	@ (800052c <setTimer0+0x30>)
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20000014 	.word	0x20000014
 8000528:	20000138 	.word	0x20000138
 800052c:	2000013c 	.word	0x2000013c

08000530 <setTimer1>:

void setTimer1(int duration) {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
    timer1_counter = duration / TIMER_CYCLE;
 8000538:	4b07      	ldr	r3, [pc, #28]	@ (8000558 <setTimer1+0x28>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000542:	4a06      	ldr	r2, [pc, #24]	@ (800055c <setTimer1+0x2c>)
 8000544:	6013      	str	r3, [r2, #0]
    timer1_flag = 0;
 8000546:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <setTimer1+0x30>)
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000014 	.word	0x20000014
 800055c:	20000140 	.word	0x20000140
 8000560:	20000144 	.word	0x20000144

08000564 <setTimer2>:

void setTimer2(int duration) {
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
    timer2_counter = duration / TIMER_CYCLE;
 800056c:	4b07      	ldr	r3, [pc, #28]	@ (800058c <setTimer2+0x28>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	fb92 f3f3 	sdiv	r3, r2, r3
 8000576:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <setTimer2+0x2c>)
 8000578:	6013      	str	r3, [r2, #0]
    timer2_flag = 0;
 800057a:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <setTimer2+0x30>)
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000014 	.word	0x20000014
 8000590:	20000148 	.word	0x20000148
 8000594:	2000014c 	.word	0x2000014c

08000598 <timer_run>:

void timer_run() {
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
    if (timer0_counter > 0) {
 800059c:	4b19      	ldr	r3, [pc, #100]	@ (8000604 <timer_run+0x6c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dd04      	ble.n	80005ae <timer_run+0x16>
        timer0_counter--;
 80005a4:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <timer_run+0x6c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	3b01      	subs	r3, #1
 80005aa:	4a16      	ldr	r2, [pc, #88]	@ (8000604 <timer_run+0x6c>)
 80005ac:	6013      	str	r3, [r2, #0]
    }

    if (timer0_counter == 0) {
 80005ae:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <timer_run+0x6c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d102      	bne.n	80005bc <timer_run+0x24>
        timer0_flag = 1;
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <timer_run+0x70>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	601a      	str	r2, [r3, #0]
    }

    if (timer1_counter > 0) {
 80005bc:	4b13      	ldr	r3, [pc, #76]	@ (800060c <timer_run+0x74>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dd04      	ble.n	80005ce <timer_run+0x36>
		timer1_counter--;
 80005c4:	4b11      	ldr	r3, [pc, #68]	@ (800060c <timer_run+0x74>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	4a10      	ldr	r2, [pc, #64]	@ (800060c <timer_run+0x74>)
 80005cc:	6013      	str	r3, [r2, #0]
	}

	if (timer1_counter == 0) {
 80005ce:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <timer_run+0x74>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d102      	bne.n	80005dc <timer_run+0x44>
		timer1_flag = 1;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <timer_run+0x78>)
 80005d8:	2201      	movs	r2, #1
 80005da:	601a      	str	r2, [r3, #0]
	}

	if (timer2_counter > 0) {
 80005dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000614 <timer_run+0x7c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	dd04      	ble.n	80005ee <timer_run+0x56>
		timer2_counter--;
 80005e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000614 <timer_run+0x7c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	3b01      	subs	r3, #1
 80005ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000614 <timer_run+0x7c>)
 80005ec:	6013      	str	r3, [r2, #0]
	}

	if (timer2_counter == 0) {
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <timer_run+0x7c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d102      	bne.n	80005fc <timer_run+0x64>
		timer2_flag = 1;
 80005f6:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <timer_run+0x80>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	601a      	str	r2, [r3, #0]
	}
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	20000138 	.word	0x20000138
 8000608:	2000013c 	.word	0x2000013c
 800060c:	20000140 	.word	0x20000140
 8000610:	20000144 	.word	0x20000144
 8000614:	20000148 	.word	0x20000148
 8000618:	2000014c 	.word	0x2000014c

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fa3c 	bl	8000a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f894 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f91a 	bl	8000860 <MX_GPIO_Init>
  MX_TIM2_Init();
 800062c:	f000 f8cc 	bl	80007c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000630:	483c      	ldr	r0, [pc, #240]	@ (8000724 <main+0x108>)
 8000632:	f001 f97f 	bl	8001934 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (timer0_flag == 1) {
 8000636:	4b3c      	ldr	r3, [pc, #240]	@ (8000728 <main+0x10c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d131      	bne.n	80006a2 <main+0x86>
		  updateClockBuffer();
 800063e:	f7ff fe4d 	bl	80002dc <updateClockBuffer>

		  HAL_GPIO_TogglePin(GPIOA, DOT_Pin);
 8000642:	2110      	movs	r1, #16
 8000644:	4839      	ldr	r0, [pc, #228]	@ (800072c <main+0x110>)
 8000646:	f000 fd2d 	bl	80010a4 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800064a:	2120      	movs	r1, #32
 800064c:	4837      	ldr	r0, [pc, #220]	@ (800072c <main+0x110>)
 800064e:	f000 fd29 	bl	80010a4 <HAL_GPIO_TogglePin>

		  second++;
 8000652:	4b37      	ldr	r3, [pc, #220]	@ (8000730 <main+0x114>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	3301      	adds	r3, #1
 8000658:	4a35      	ldr	r2, [pc, #212]	@ (8000730 <main+0x114>)
 800065a:	6013      	str	r3, [r2, #0]
		  if (second >= 60)
 800065c:	4b34      	ldr	r3, [pc, #208]	@ (8000730 <main+0x114>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b3b      	cmp	r3, #59	@ 0x3b
 8000662:	dd07      	ble.n	8000674 <main+0x58>
		  {
			  second = 0;
 8000664:	4b32      	ldr	r3, [pc, #200]	@ (8000730 <main+0x114>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
			  minute++;
 800066a:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <main+0x118>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	3301      	adds	r3, #1
 8000670:	4a30      	ldr	r2, [pc, #192]	@ (8000734 <main+0x118>)
 8000672:	6013      	str	r3, [r2, #0]
		  }
		  if (minute >= 60)
 8000674:	4b2f      	ldr	r3, [pc, #188]	@ (8000734 <main+0x118>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b3b      	cmp	r3, #59	@ 0x3b
 800067a:	dd07      	ble.n	800068c <main+0x70>
		  {
			  minute = 0;
 800067c:	4b2d      	ldr	r3, [pc, #180]	@ (8000734 <main+0x118>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
			  hour++;
 8000682:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <main+0x11c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	3301      	adds	r3, #1
 8000688:	4a2b      	ldr	r2, [pc, #172]	@ (8000738 <main+0x11c>)
 800068a:	6013      	str	r3, [r2, #0]
		  }
		  if (hour >= 24)
 800068c:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <main+0x11c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b17      	cmp	r3, #23
 8000692:	dd02      	ble.n	800069a <main+0x7e>
		  {
			  hour = 0;
 8000694:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <main+0x11c>)
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
		  }

		  setTimer0(1000);
 800069a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800069e:	f7ff ff2d 	bl	80004fc <setTimer0>
	  }

	  if (timer1_flag == 1) {
 80006a2:	4b26      	ldr	r3, [pc, #152]	@ (800073c <main+0x120>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d114      	bne.n	80006d4 <main+0xb8>
		  update7SEG(index_led++);
 80006aa:	4b25      	ldr	r3, [pc, #148]	@ (8000740 <main+0x124>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	1c5a      	adds	r2, r3, #1
 80006b0:	4923      	ldr	r1, [pc, #140]	@ (8000740 <main+0x124>)
 80006b2:	600a      	str	r2, [r1, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff fda7 	bl	8000208 <update7SEG>
		  index_led %= MAX_LED;
 80006ba:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <main+0x124>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2204      	movs	r2, #4
 80006c0:	fb93 f1f2 	sdiv	r1, r3, r2
 80006c4:	fb01 f202 	mul.w	r2, r1, r2
 80006c8:	1a9b      	subs	r3, r3, r2
 80006ca:	4a1d      	ldr	r2, [pc, #116]	@ (8000740 <main+0x124>)
 80006cc:	6013      	str	r3, [r2, #0]
		  setTimer1(250);
 80006ce:	20fa      	movs	r0, #250	@ 0xfa
 80006d0:	f7ff ff2e 	bl	8000530 <setTimer1>
	  }

	  if (timer2_flag == 1) {
 80006d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <main+0x128>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d1ac      	bne.n	8000636 <main+0x1a>
		  if (counter > 7) {
 80006dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <main+0x12c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b07      	cmp	r3, #7
 80006e2:	dd04      	ble.n	80006ee <main+0xd2>
		      shiftMatrixLeft();
 80006e4:	f7ff fee4 	bl	80004b0 <shiftMatrixLeft>
		      counter = 0;
 80006e8:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <main+0x12c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
		  }
		  counter++;
 80006ee:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <main+0x12c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	4a14      	ldr	r2, [pc, #80]	@ (8000748 <main+0x12c>)
 80006f6:	6013      	str	r3, [r2, #0]

		  updateLEDMatrix(index_led_matrix++);
 80006f8:	4b14      	ldr	r3, [pc, #80]	@ (800074c <main+0x130>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	1c5a      	adds	r2, r3, #1
 80006fe:	4913      	ldr	r1, [pc, #76]	@ (800074c <main+0x130>)
 8000700:	600a      	str	r2, [r1, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fe2a 	bl	800035c <updateLEDMatrix>
		  index_led_matrix %= MAX_LED_MATRIX;
 8000708:	4b10      	ldr	r3, [pc, #64]	@ (800074c <main+0x130>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2208      	movs	r2, #8
 800070e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000712:	fb01 f202 	mul.w	r2, r1, r2
 8000716:	1a9b      	subs	r3, r3, r2
 8000718:	4a0c      	ldr	r2, [pc, #48]	@ (800074c <main+0x130>)
 800071a:	6013      	str	r3, [r2, #0]
		  setTimer2(100);
 800071c:	2064      	movs	r0, #100	@ 0x64
 800071e:	f7ff ff21 	bl	8000564 <setTimer2>
	  if (timer0_flag == 1) {
 8000722:	e788      	b.n	8000636 <main+0x1a>
 8000724:	200000d4 	.word	0x200000d4
 8000728:	2000013c 	.word	0x2000013c
 800072c:	40010800 	.word	0x40010800
 8000730:	20000010 	.word	0x20000010
 8000734:	2000000c 	.word	0x2000000c
 8000738:	20000008 	.word	0x20000008
 800073c:	20000144 	.word	0x20000144
 8000740:	20000120 	.word	0x20000120
 8000744:	2000014c 	.word	0x2000014c
 8000748:	2000011c 	.word	0x2000011c
 800074c:	20000134 	.word	0x20000134

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b090      	sub	sp, #64	@ 0x40
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0318 	add.w	r3, r7, #24
 800075a:	2228      	movs	r2, #40	@ 0x28
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f001 fc74 	bl	800204c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000772:	2302      	movs	r3, #2
 8000774:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000776:	2301      	movs	r3, #1
 8000778:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077a:	2310      	movs	r3, #16
 800077c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800077e:	2300      	movs	r3, #0
 8000780:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 0318 	add.w	r3, r7, #24
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fca6 	bl	80010d8 <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000792:	f000 f8c5 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 ff14 	bl	80015dc <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007ba:	f000 f8b1 	bl	8000920 <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3740      	adds	r7, #64	@ 0x40
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007dc:	463b      	mov	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e4:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <MX_TIM2_Init+0x94>)
 80007e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <MX_TIM2_Init+0x94>)
 80007ee:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80007f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f4:	4b19      	ldr	r3, [pc, #100]	@ (800085c <MX_TIM2_Init+0x94>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80007fa:	4b18      	ldr	r3, [pc, #96]	@ (800085c <MX_TIM2_Init+0x94>)
 80007fc:	2209      	movs	r2, #9
 80007fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000800:	4b16      	ldr	r3, [pc, #88]	@ (800085c <MX_TIM2_Init+0x94>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000806:	4b15      	ldr	r3, [pc, #84]	@ (800085c <MX_TIM2_Init+0x94>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800080c:	4813      	ldr	r0, [pc, #76]	@ (800085c <MX_TIM2_Init+0x94>)
 800080e:	f001 f841 	bl	8001894 <HAL_TIM_Base_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000818:	f000 f882 	bl	8000920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000820:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	4619      	mov	r1, r3
 8000828:	480c      	ldr	r0, [pc, #48]	@ (800085c <MX_TIM2_Init+0x94>)
 800082a:	f001 f9bf 	bl	8001bac <HAL_TIM_ConfigClockSource>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000834:	f000 f874 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000840:	463b      	mov	r3, r7
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_TIM2_Init+0x94>)
 8000846:	f001 fb97 	bl	8001f78 <HAL_TIMEx_MasterConfigSynchronization>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000850:	f000 f866 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200000d4 	.word	0x200000d4

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	4b22      	ldr	r3, [pc, #136]	@ (8000900 <MX_GPIO_Init+0xa0>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a21      	ldr	r2, [pc, #132]	@ (8000900 <MX_GPIO_Init+0xa0>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b1f      	ldr	r3, [pc, #124]	@ (8000900 <MX_GPIO_Init+0xa0>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088c:	4b1c      	ldr	r3, [pc, #112]	@ (8000900 <MX_GPIO_Init+0xa0>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a1b      	ldr	r2, [pc, #108]	@ (8000900 <MX_GPIO_Init+0xa0>)
 8000892:	f043 0308 	orr.w	r3, r3, #8
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b19      	ldr	r3, [pc, #100]	@ (8000900 <MX_GPIO_Init+0xa0>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0308 	and.w	r3, r3, #8
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 80008a4:	2200      	movs	r2, #0
 80008a6:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
 80008aa:	4816      	ldr	r0, [pc, #88]	@ (8000904 <MX_GPIO_Init+0xa4>)
 80008ac:	f000 fbe2 	bl	8001074 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 80008b0:	2200      	movs	r2, #0
 80008b2:	f64f 717f 	movw	r1, #65407	@ 0xff7f
 80008b6:	4814      	ldr	r0, [pc, #80]	@ (8000908 <MX_GPIO_Init+0xa8>)
 80008b8:	f000 fbdc 	bl	8001074 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 80008bc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80008c0:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2302      	movs	r3, #2
 80008cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	4619      	mov	r1, r3
 80008d4:	480b      	ldr	r0, [pc, #44]	@ (8000904 <MX_GPIO_Init+0xa4>)
 80008d6:	f000 fa51 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 80008da:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 80008de:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2302      	movs	r3, #2
 80008ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 0308 	add.w	r3, r7, #8
 80008f0:	4619      	mov	r1, r3
 80008f2:	4805      	ldr	r0, [pc, #20]	@ (8000908 <MX_GPIO_Init+0xa8>)
 80008f4:	f000 fa42 	bl	8000d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008f8:	bf00      	nop
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40021000 	.word	0x40021000
 8000904:	40010800 	.word	0x40010800
 8000908:	40010c00 	.word	0x40010c00

0800090c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	timer_run();
 8000914:	f7ff fe40 	bl	8000598 <timer_run>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <Error_Handler+0x8>

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <HAL_MspInit+0x5c>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	4a14      	ldr	r2, [pc, #80]	@ (8000988 <HAL_MspInit+0x5c>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6193      	str	r3, [r2, #24]
 800093e:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <HAL_MspInit+0x5c>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <HAL_MspInit+0x5c>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	4a0e      	ldr	r2, [pc, #56]	@ (8000988 <HAL_MspInit+0x5c>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000954:	61d3      	str	r3, [r2, #28]
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <HAL_MspInit+0x5c>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000962:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <HAL_MspInit+0x60>)
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	4a04      	ldr	r2, [pc, #16]	@ (800098c <HAL_MspInit+0x60>)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	40021000 	.word	0x40021000
 800098c:	40010000 	.word	0x40010000

08000990 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009a0:	d113      	bne.n	80009ca <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009a2:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <HAL_TIM_Base_MspInit+0x44>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a0b      	ldr	r2, [pc, #44]	@ (80009d4 <HAL_TIM_Base_MspInit+0x44>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <HAL_TIM_Base_MspInit+0x44>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	201c      	movs	r0, #28
 80009c0:	f000 f9a5 	bl	8000d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009c4:	201c      	movs	r0, #28
 80009c6:	f000 f9be 	bl	8000d46 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <NMI_Handler+0x4>

080009e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <MemManage_Handler+0x4>

080009f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <UsageFault_Handler+0x4>

08000a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a28:	f000 f87e 	bl	8000b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a34:	4802      	ldr	r0, [pc, #8]	@ (8000a40 <TIM2_IRQHandler+0x10>)
 8000a36:	f000 ffc9 	bl	80019cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200000d4 	.word	0x200000d4

08000a44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a50:	f7ff fff8 	bl	8000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a54:	480b      	ldr	r0, [pc, #44]	@ (8000a84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a56:	490c      	ldr	r1, [pc, #48]	@ (8000a88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a58:	4a0c      	ldr	r2, [pc, #48]	@ (8000a8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6a:	4a09      	ldr	r2, [pc, #36]	@ (8000a90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a6c:	4c09      	ldr	r4, [pc, #36]	@ (8000a94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a7a:	f001 faef 	bl	800205c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a7e:	f7ff fdcd 	bl	800061c <main>
  bx lr
 8000a82:	4770      	bx	lr
  ldr r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a88:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8000a8c:	080020e8 	.word	0x080020e8
  ldr r2, =_sbss
 8000a90:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8000a94:	20000154 	.word	0x20000154

08000a98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a98:	e7fe      	b.n	8000a98 <ADC1_2_IRQHandler>
	...

08000a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa0:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <HAL_Init+0x28>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a07      	ldr	r2, [pc, #28]	@ (8000ac4 <HAL_Init+0x28>)
 8000aa6:	f043 0310 	orr.w	r3, r3, #16
 8000aaa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 f923 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab2:	200f      	movs	r0, #15
 8000ab4:	f000 f808 	bl	8000ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab8:	f7ff ff38 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40022000 	.word	0x40022000

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad0:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <HAL_InitTick+0x54>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <HAL_InitTick+0x58>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f93b 	bl	8000d62 <HAL_SYSTICK_Config>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00e      	b.n	8000b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	d80a      	bhi.n	8000b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f000 f903 	bl	8000d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b08:	4a06      	ldr	r2, [pc, #24]	@ (8000b24 <HAL_InitTick+0x5c>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e000      	b.n	8000b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200000ac 	.word	0x200000ac
 8000b20:	200000b4 	.word	0x200000b4
 8000b24:	200000b0 	.word	0x200000b0

08000b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <HAL_IncTick+0x1c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <HAL_IncTick+0x20>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a03      	ldr	r2, [pc, #12]	@ (8000b48 <HAL_IncTick+0x20>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	200000b4 	.word	0x200000b4
 8000b48:	20000150 	.word	0x20000150

08000b4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b02      	ldr	r3, [pc, #8]	@ (8000b5c <HAL_GetTick+0x10>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	20000150 	.word	0x20000150

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b92:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	60d3      	str	r3, [r2, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db0b      	blt.n	8000bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 021f 	and.w	r2, r3, #31
 8000bdc:	4906      	ldr	r1, [pc, #24]	@ (8000bf8 <__NVIC_EnableIRQ+0x34>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	2001      	movs	r0, #1
 8000be6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	@ (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	@ (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	@ 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	@ 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f7ff ff90 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff2d 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff42 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ff90 	bl	8000c50 <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff5f 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff35 	bl	8000bc4 <__NVIC_EnableIRQ>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffa2 	bl	8000cb4 <SysTick_Config>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b08b      	sub	sp, #44	@ 0x2c
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8e:	e161      	b.n	8001054 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d90:	2201      	movs	r2, #1
 8000d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	f040 8150 	bne.w	800104e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	4a97      	ldr	r2, [pc, #604]	@ (8001010 <HAL_GPIO_Init+0x294>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d05e      	beq.n	8000e76 <HAL_GPIO_Init+0xfa>
 8000db8:	4a95      	ldr	r2, [pc, #596]	@ (8001010 <HAL_GPIO_Init+0x294>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d875      	bhi.n	8000eaa <HAL_GPIO_Init+0x12e>
 8000dbe:	4a95      	ldr	r2, [pc, #596]	@ (8001014 <HAL_GPIO_Init+0x298>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d058      	beq.n	8000e76 <HAL_GPIO_Init+0xfa>
 8000dc4:	4a93      	ldr	r2, [pc, #588]	@ (8001014 <HAL_GPIO_Init+0x298>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d86f      	bhi.n	8000eaa <HAL_GPIO_Init+0x12e>
 8000dca:	4a93      	ldr	r2, [pc, #588]	@ (8001018 <HAL_GPIO_Init+0x29c>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d052      	beq.n	8000e76 <HAL_GPIO_Init+0xfa>
 8000dd0:	4a91      	ldr	r2, [pc, #580]	@ (8001018 <HAL_GPIO_Init+0x29c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d869      	bhi.n	8000eaa <HAL_GPIO_Init+0x12e>
 8000dd6:	4a91      	ldr	r2, [pc, #580]	@ (800101c <HAL_GPIO_Init+0x2a0>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d04c      	beq.n	8000e76 <HAL_GPIO_Init+0xfa>
 8000ddc:	4a8f      	ldr	r2, [pc, #572]	@ (800101c <HAL_GPIO_Init+0x2a0>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d863      	bhi.n	8000eaa <HAL_GPIO_Init+0x12e>
 8000de2:	4a8f      	ldr	r2, [pc, #572]	@ (8001020 <HAL_GPIO_Init+0x2a4>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d046      	beq.n	8000e76 <HAL_GPIO_Init+0xfa>
 8000de8:	4a8d      	ldr	r2, [pc, #564]	@ (8001020 <HAL_GPIO_Init+0x2a4>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d85d      	bhi.n	8000eaa <HAL_GPIO_Init+0x12e>
 8000dee:	2b12      	cmp	r3, #18
 8000df0:	d82a      	bhi.n	8000e48 <HAL_GPIO_Init+0xcc>
 8000df2:	2b12      	cmp	r3, #18
 8000df4:	d859      	bhi.n	8000eaa <HAL_GPIO_Init+0x12e>
 8000df6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dfc <HAL_GPIO_Init+0x80>)
 8000df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfc:	08000e77 	.word	0x08000e77
 8000e00:	08000e51 	.word	0x08000e51
 8000e04:	08000e63 	.word	0x08000e63
 8000e08:	08000ea5 	.word	0x08000ea5
 8000e0c:	08000eab 	.word	0x08000eab
 8000e10:	08000eab 	.word	0x08000eab
 8000e14:	08000eab 	.word	0x08000eab
 8000e18:	08000eab 	.word	0x08000eab
 8000e1c:	08000eab 	.word	0x08000eab
 8000e20:	08000eab 	.word	0x08000eab
 8000e24:	08000eab 	.word	0x08000eab
 8000e28:	08000eab 	.word	0x08000eab
 8000e2c:	08000eab 	.word	0x08000eab
 8000e30:	08000eab 	.word	0x08000eab
 8000e34:	08000eab 	.word	0x08000eab
 8000e38:	08000eab 	.word	0x08000eab
 8000e3c:	08000eab 	.word	0x08000eab
 8000e40:	08000e59 	.word	0x08000e59
 8000e44:	08000e6d 	.word	0x08000e6d
 8000e48:	4a76      	ldr	r2, [pc, #472]	@ (8001024 <HAL_GPIO_Init+0x2a8>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d013      	beq.n	8000e76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e4e:	e02c      	b.n	8000eaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	623b      	str	r3, [r7, #32]
          break;
 8000e56:	e029      	b.n	8000eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	623b      	str	r3, [r7, #32]
          break;
 8000e60:	e024      	b.n	8000eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	3308      	adds	r3, #8
 8000e68:	623b      	str	r3, [r7, #32]
          break;
 8000e6a:	e01f      	b.n	8000eac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	330c      	adds	r3, #12
 8000e72:	623b      	str	r3, [r7, #32]
          break;
 8000e74:	e01a      	b.n	8000eac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d102      	bne.n	8000e84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	623b      	str	r3, [r7, #32]
          break;
 8000e82:	e013      	b.n	8000eac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d105      	bne.n	8000e98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e8c:	2308      	movs	r3, #8
 8000e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69fa      	ldr	r2, [r7, #28]
 8000e94:	611a      	str	r2, [r3, #16]
          break;
 8000e96:	e009      	b.n	8000eac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e98:	2308      	movs	r3, #8
 8000e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69fa      	ldr	r2, [r7, #28]
 8000ea0:	615a      	str	r2, [r3, #20]
          break;
 8000ea2:	e003      	b.n	8000eac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	623b      	str	r3, [r7, #32]
          break;
 8000ea8:	e000      	b.n	8000eac <HAL_GPIO_Init+0x130>
          break;
 8000eaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	2bff      	cmp	r3, #255	@ 0xff
 8000eb0:	d801      	bhi.n	8000eb6 <HAL_GPIO_Init+0x13a>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	e001      	b.n	8000eba <HAL_GPIO_Init+0x13e>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	2bff      	cmp	r3, #255	@ 0xff
 8000ec0:	d802      	bhi.n	8000ec8 <HAL_GPIO_Init+0x14c>
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	e002      	b.n	8000ece <HAL_GPIO_Init+0x152>
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eca:	3b08      	subs	r3, #8
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	210f      	movs	r1, #15
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	401a      	ands	r2, r3
 8000ee0:	6a39      	ldr	r1, [r7, #32]
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 80a9 	beq.w	800104e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000efc:	4b4a      	ldr	r3, [pc, #296]	@ (8001028 <HAL_GPIO_Init+0x2ac>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a49      	ldr	r2, [pc, #292]	@ (8001028 <HAL_GPIO_Init+0x2ac>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b47      	ldr	r3, [pc, #284]	@ (8001028 <HAL_GPIO_Init+0x2ac>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f14:	4a45      	ldr	r2, [pc, #276]	@ (800102c <HAL_GPIO_Init+0x2b0>)
 8000f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	4013      	ands	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a3d      	ldr	r2, [pc, #244]	@ (8001030 <HAL_GPIO_Init+0x2b4>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d00d      	beq.n	8000f5c <HAL_GPIO_Init+0x1e0>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a3c      	ldr	r2, [pc, #240]	@ (8001034 <HAL_GPIO_Init+0x2b8>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d007      	beq.n	8000f58 <HAL_GPIO_Init+0x1dc>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a3b      	ldr	r2, [pc, #236]	@ (8001038 <HAL_GPIO_Init+0x2bc>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d101      	bne.n	8000f54 <HAL_GPIO_Init+0x1d8>
 8000f50:	2302      	movs	r3, #2
 8000f52:	e004      	b.n	8000f5e <HAL_GPIO_Init+0x1e2>
 8000f54:	2303      	movs	r3, #3
 8000f56:	e002      	b.n	8000f5e <HAL_GPIO_Init+0x1e2>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <HAL_GPIO_Init+0x1e2>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f60:	f002 0203 	and.w	r2, r2, #3
 8000f64:	0092      	lsls	r2, r2, #2
 8000f66:	4093      	lsls	r3, r2
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f6e:	492f      	ldr	r1, [pc, #188]	@ (800102c <HAL_GPIO_Init+0x2b0>)
 8000f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	3302      	adds	r3, #2
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d006      	beq.n	8000f96 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f88:	4b2c      	ldr	r3, [pc, #176]	@ (800103c <HAL_GPIO_Init+0x2c0>)
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	492b      	ldr	r1, [pc, #172]	@ (800103c <HAL_GPIO_Init+0x2c0>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	608b      	str	r3, [r1, #8]
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f96:	4b29      	ldr	r3, [pc, #164]	@ (800103c <HAL_GPIO_Init+0x2c0>)
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	4927      	ldr	r1, [pc, #156]	@ (800103c <HAL_GPIO_Init+0x2c0>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d006      	beq.n	8000fbe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fb0:	4b22      	ldr	r3, [pc, #136]	@ (800103c <HAL_GPIO_Init+0x2c0>)
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	4921      	ldr	r1, [pc, #132]	@ (800103c <HAL_GPIO_Init+0x2c0>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	60cb      	str	r3, [r1, #12]
 8000fbc:	e006      	b.n	8000fcc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800103c <HAL_GPIO_Init+0x2c0>)
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	491d      	ldr	r1, [pc, #116]	@ (800103c <HAL_GPIO_Init+0x2c0>)
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d006      	beq.n	8000fe6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fd8:	4b18      	ldr	r3, [pc, #96]	@ (800103c <HAL_GPIO_Init+0x2c0>)
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	4917      	ldr	r1, [pc, #92]	@ (800103c <HAL_GPIO_Init+0x2c0>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]
 8000fe4:	e006      	b.n	8000ff4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <HAL_GPIO_Init+0x2c0>)
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	4913      	ldr	r1, [pc, #76]	@ (800103c <HAL_GPIO_Init+0x2c0>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d01f      	beq.n	8001040 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001000:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <HAL_GPIO_Init+0x2c0>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	490d      	ldr	r1, [pc, #52]	@ (800103c <HAL_GPIO_Init+0x2c0>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	600b      	str	r3, [r1, #0]
 800100c:	e01f      	b.n	800104e <HAL_GPIO_Init+0x2d2>
 800100e:	bf00      	nop
 8001010:	10320000 	.word	0x10320000
 8001014:	10310000 	.word	0x10310000
 8001018:	10220000 	.word	0x10220000
 800101c:	10210000 	.word	0x10210000
 8001020:	10120000 	.word	0x10120000
 8001024:	10110000 	.word	0x10110000
 8001028:	40021000 	.word	0x40021000
 800102c:	40010000 	.word	0x40010000
 8001030:	40010800 	.word	0x40010800
 8001034:	40010c00 	.word	0x40010c00
 8001038:	40011000 	.word	0x40011000
 800103c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001040:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <HAL_GPIO_Init+0x2f4>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	43db      	mvns	r3, r3
 8001048:	4909      	ldr	r1, [pc, #36]	@ (8001070 <HAL_GPIO_Init+0x2f4>)
 800104a:	4013      	ands	r3, r2
 800104c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800104e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001050:	3301      	adds	r3, #1
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105a:	fa22 f303 	lsr.w	r3, r2, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	f47f ae96 	bne.w	8000d90 <HAL_GPIO_Init+0x14>
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	372c      	adds	r7, #44	@ 0x2c
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	40010400 	.word	0x40010400

08001074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]
 8001080:	4613      	mov	r3, r2
 8001082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001084:	787b      	ldrb	r3, [r7, #1]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001090:	e003      	b.n	800109a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	041a      	lsls	r2, r3, #16
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	611a      	str	r2, [r3, #16]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4013      	ands	r3, r2
 80010bc:	041a      	lsls	r2, r3, #16
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	43d9      	mvns	r1, r3
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	400b      	ands	r3, r1
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	611a      	str	r2, [r3, #16]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
	...

080010d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e272      	b.n	80015d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 8087 	beq.w	8001206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010f8:	4b92      	ldr	r3, [pc, #584]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 030c 	and.w	r3, r3, #12
 8001100:	2b04      	cmp	r3, #4
 8001102:	d00c      	beq.n	800111e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001104:	4b8f      	ldr	r3, [pc, #572]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	2b08      	cmp	r3, #8
 800110e:	d112      	bne.n	8001136 <HAL_RCC_OscConfig+0x5e>
 8001110:	4b8c      	ldr	r3, [pc, #560]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800111c:	d10b      	bne.n	8001136 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111e:	4b89      	ldr	r3, [pc, #548]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d06c      	beq.n	8001204 <HAL_RCC_OscConfig+0x12c>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d168      	bne.n	8001204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e24c      	b.n	80015d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800113e:	d106      	bne.n	800114e <HAL_RCC_OscConfig+0x76>
 8001140:	4b80      	ldr	r3, [pc, #512]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a7f      	ldr	r2, [pc, #508]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001146:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	e02e      	b.n	80011ac <HAL_RCC_OscConfig+0xd4>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10c      	bne.n	8001170 <HAL_RCC_OscConfig+0x98>
 8001156:	4b7b      	ldr	r3, [pc, #492]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a7a      	ldr	r2, [pc, #488]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 800115c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	4b78      	ldr	r3, [pc, #480]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a77      	ldr	r2, [pc, #476]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001168:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e01d      	b.n	80011ac <HAL_RCC_OscConfig+0xd4>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0xbc>
 800117a:	4b72      	ldr	r3, [pc, #456]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a71      	ldr	r2, [pc, #452]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b6f      	ldr	r3, [pc, #444]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a6e      	ldr	r2, [pc, #440]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 800118c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e00b      	b.n	80011ac <HAL_RCC_OscConfig+0xd4>
 8001194:	4b6b      	ldr	r3, [pc, #428]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a6a      	ldr	r2, [pc, #424]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 800119a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b68      	ldr	r3, [pc, #416]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a67      	ldr	r2, [pc, #412]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fcca 	bl	8000b4c <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fcc6 	bl	8000b4c <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	@ 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e200      	b.n	80015d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0xe4>
 80011da:	e014      	b.n	8001206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fcb6 	bl	8000b4c <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fcb2 	bl	8000b4c <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	@ 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e1ec      	b.n	80015d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	4b53      	ldr	r3, [pc, #332]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0x10c>
 8001202:	e000      	b.n	8001206 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d063      	beq.n	80012da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001212:	4b4c      	ldr	r3, [pc, #304]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00b      	beq.n	8001236 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800121e:	4b49      	ldr	r3, [pc, #292]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b08      	cmp	r3, #8
 8001228:	d11c      	bne.n	8001264 <HAL_RCC_OscConfig+0x18c>
 800122a:	4b46      	ldr	r3, [pc, #280]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d116      	bne.n	8001264 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	4b43      	ldr	r3, [pc, #268]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x176>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d001      	beq.n	800124e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e1c0      	b.n	80015d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4b3d      	ldr	r3, [pc, #244]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4939      	ldr	r1, [pc, #228]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 800125e:	4313      	orrs	r3, r2
 8001260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001262:	e03a      	b.n	80012da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d020      	beq.n	80012ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126c:	4b36      	ldr	r3, [pc, #216]	@ (8001348 <HAL_RCC_OscConfig+0x270>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff fc6b 	bl	8000b4c <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127a:	f7ff fc67 	bl	8000b4c <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e1a1      	b.n	80015d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	4b2d      	ldr	r3, [pc, #180]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001298:	4b2a      	ldr	r3, [pc, #168]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4927      	ldr	r1, [pc, #156]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
 80012ac:	e015      	b.n	80012da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ae:	4b26      	ldr	r3, [pc, #152]	@ (8001348 <HAL_RCC_OscConfig+0x270>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fc4a 	bl	8000b4c <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012bc:	f7ff fc46 	bl	8000b4c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e180      	b.n	80015d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d03a      	beq.n	800135c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d019      	beq.n	8001322 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ee:	4b17      	ldr	r3, [pc, #92]	@ (800134c <HAL_RCC_OscConfig+0x274>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f4:	f7ff fc2a 	bl	8000b4c <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012fc:	f7ff fc26 	bl	8000b4c <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e160      	b.n	80015d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <HAL_RCC_OscConfig+0x26c>)
 8001310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800131a:	2001      	movs	r0, #1
 800131c:	f000 fa9c 	bl	8001858 <RCC_Delay>
 8001320:	e01c      	b.n	800135c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <HAL_RCC_OscConfig+0x274>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001328:	f7ff fc10 	bl	8000b4c <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800132e:	e00f      	b.n	8001350 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001330:	f7ff fc0c 	bl	8000b4c <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d908      	bls.n	8001350 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e146      	b.n	80015d0 <HAL_RCC_OscConfig+0x4f8>
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000
 8001348:	42420000 	.word	0x42420000
 800134c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	4b92      	ldr	r3, [pc, #584]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 8001352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1e9      	bne.n	8001330 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80a6 	beq.w	80014b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136e:	4b8b      	ldr	r3, [pc, #556]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10d      	bne.n	8001396 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	4b88      	ldr	r3, [pc, #544]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	4a87      	ldr	r2, [pc, #540]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001384:	61d3      	str	r3, [r2, #28]
 8001386:	4b85      	ldr	r3, [pc, #532]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001392:	2301      	movs	r3, #1
 8001394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001396:	4b82      	ldr	r3, [pc, #520]	@ (80015a0 <HAL_RCC_OscConfig+0x4c8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d118      	bne.n	80013d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a2:	4b7f      	ldr	r3, [pc, #508]	@ (80015a0 <HAL_RCC_OscConfig+0x4c8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a7e      	ldr	r2, [pc, #504]	@ (80015a0 <HAL_RCC_OscConfig+0x4c8>)
 80013a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ae:	f7ff fbcd 	bl	8000b4c <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b6:	f7ff fbc9 	bl	8000b4c <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b64      	cmp	r3, #100	@ 0x64
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e103      	b.n	80015d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c8:	4b75      	ldr	r3, [pc, #468]	@ (80015a0 <HAL_RCC_OscConfig+0x4c8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x312>
 80013dc:	4b6f      	ldr	r3, [pc, #444]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	4a6e      	ldr	r2, [pc, #440]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6213      	str	r3, [r2, #32]
 80013e8:	e02d      	b.n	8001446 <HAL_RCC_OscConfig+0x36e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0x334>
 80013f2:	4b6a      	ldr	r3, [pc, #424]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	4a69      	ldr	r2, [pc, #420]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	6213      	str	r3, [r2, #32]
 80013fe:	4b67      	ldr	r3, [pc, #412]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4a66      	ldr	r2, [pc, #408]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 8001404:	f023 0304 	bic.w	r3, r3, #4
 8001408:	6213      	str	r3, [r2, #32]
 800140a:	e01c      	b.n	8001446 <HAL_RCC_OscConfig+0x36e>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b05      	cmp	r3, #5
 8001412:	d10c      	bne.n	800142e <HAL_RCC_OscConfig+0x356>
 8001414:	4b61      	ldr	r3, [pc, #388]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	4a60      	ldr	r2, [pc, #384]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	6213      	str	r3, [r2, #32]
 8001420:	4b5e      	ldr	r3, [pc, #376]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	4a5d      	ldr	r2, [pc, #372]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6213      	str	r3, [r2, #32]
 800142c:	e00b      	b.n	8001446 <HAL_RCC_OscConfig+0x36e>
 800142e:	4b5b      	ldr	r3, [pc, #364]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	4a5a      	ldr	r2, [pc, #360]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 8001434:	f023 0301 	bic.w	r3, r3, #1
 8001438:	6213      	str	r3, [r2, #32]
 800143a:	4b58      	ldr	r3, [pc, #352]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	4a57      	ldr	r2, [pc, #348]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 8001440:	f023 0304 	bic.w	r3, r3, #4
 8001444:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d015      	beq.n	800147a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7ff fb7d 	bl	8000b4c <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001456:	f7ff fb79 	bl	8000b4c <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001464:	4293      	cmp	r3, r2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e0b1      	b.n	80015d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146c:	4b4b      	ldr	r3, [pc, #300]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0ee      	beq.n	8001456 <HAL_RCC_OscConfig+0x37e>
 8001478:	e014      	b.n	80014a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff fb67 	bl	8000b4c <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001480:	e00a      	b.n	8001498 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001482:	f7ff fb63 	bl	8000b4c <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001490:	4293      	cmp	r3, r2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e09b      	b.n	80015d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001498:	4b40      	ldr	r3, [pc, #256]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1ee      	bne.n	8001482 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014a4:	7dfb      	ldrb	r3, [r7, #23]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d105      	bne.n	80014b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014aa:	4b3c      	ldr	r3, [pc, #240]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4a3b      	ldr	r2, [pc, #236]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8087 	beq.w	80015ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c0:	4b36      	ldr	r3, [pc, #216]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d061      	beq.n	8001590 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d146      	bne.n	8001562 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d4:	4b33      	ldr	r3, [pc, #204]	@ (80015a4 <HAL_RCC_OscConfig+0x4cc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff fb37 	bl	8000b4c <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e2:	f7ff fb33 	bl	8000b4c <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e06d      	b.n	80015d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f4:	4b29      	ldr	r3, [pc, #164]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f0      	bne.n	80014e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001508:	d108      	bne.n	800151c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800150a:	4b24      	ldr	r3, [pc, #144]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	4921      	ldr	r1, [pc, #132]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800151c:	4b1f      	ldr	r3, [pc, #124]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a19      	ldr	r1, [r3, #32]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152c:	430b      	orrs	r3, r1
 800152e:	491b      	ldr	r1, [pc, #108]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001534:	4b1b      	ldr	r3, [pc, #108]	@ (80015a4 <HAL_RCC_OscConfig+0x4cc>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153a:	f7ff fb07 	bl	8000b4c <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001542:	f7ff fb03 	bl	8000b4c <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e03d      	b.n	80015d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001554:	4b11      	ldr	r3, [pc, #68]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x46a>
 8001560:	e035      	b.n	80015ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <HAL_RCC_OscConfig+0x4cc>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff faf0 	bl	8000b4c <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001570:	f7ff faec 	bl	8000b4c <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e026      	b.n	80015d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_RCC_OscConfig+0x4c4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x498>
 800158e:	e01e      	b.n	80015ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d107      	bne.n	80015a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e019      	b.n	80015d0 <HAL_RCC_OscConfig+0x4f8>
 800159c:	40021000 	.word	0x40021000
 80015a0:	40007000 	.word	0x40007000
 80015a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015a8:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <HAL_RCC_OscConfig+0x500>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d106      	bne.n	80015ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d001      	beq.n	80015ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40021000 	.word	0x40021000

080015dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0d0      	b.n	8001792 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015f0:	4b6a      	ldr	r3, [pc, #424]	@ (800179c <HAL_RCC_ClockConfig+0x1c0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d910      	bls.n	8001620 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fe:	4b67      	ldr	r3, [pc, #412]	@ (800179c <HAL_RCC_ClockConfig+0x1c0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 0207 	bic.w	r2, r3, #7
 8001606:	4965      	ldr	r1, [pc, #404]	@ (800179c <HAL_RCC_ClockConfig+0x1c0>)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	4313      	orrs	r3, r2
 800160c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800160e:	4b63      	ldr	r3, [pc, #396]	@ (800179c <HAL_RCC_ClockConfig+0x1c0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d001      	beq.n	8001620 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0b8      	b.n	8001792 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d020      	beq.n	800166e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001638:	4b59      	ldr	r3, [pc, #356]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	4a58      	ldr	r2, [pc, #352]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 800163e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001642:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001650:	4b53      	ldr	r3, [pc, #332]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	4a52      	ldr	r2, [pc, #328]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800165a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800165c:	4b50      	ldr	r3, [pc, #320]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	494d      	ldr	r1, [pc, #308]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 800166a:	4313      	orrs	r3, r2
 800166c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d040      	beq.n	80016fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d107      	bne.n	8001692 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	4b47      	ldr	r3, [pc, #284]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d115      	bne.n	80016ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e07f      	b.n	8001792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d107      	bne.n	80016aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169a:	4b41      	ldr	r3, [pc, #260]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e073      	b.n	8001792 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016aa:	4b3d      	ldr	r3, [pc, #244]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e06b      	b.n	8001792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ba:	4b39      	ldr	r3, [pc, #228]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f023 0203 	bic.w	r2, r3, #3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4936      	ldr	r1, [pc, #216]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016cc:	f7ff fa3e 	bl	8000b4c <HAL_GetTick>
 80016d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d2:	e00a      	b.n	80016ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d4:	f7ff fa3a 	bl	8000b4c <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e053      	b.n	8001792 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ea:	4b2d      	ldr	r3, [pc, #180]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 020c 	and.w	r2, r3, #12
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d1eb      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016fc:	4b27      	ldr	r3, [pc, #156]	@ (800179c <HAL_RCC_ClockConfig+0x1c0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d210      	bcs.n	800172c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b24      	ldr	r3, [pc, #144]	@ (800179c <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 0207 	bic.w	r2, r3, #7
 8001712:	4922      	ldr	r1, [pc, #136]	@ (800179c <HAL_RCC_ClockConfig+0x1c0>)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b20      	ldr	r3, [pc, #128]	@ (800179c <HAL_RCC_ClockConfig+0x1c0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e032      	b.n	8001792 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001738:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4916      	ldr	r1, [pc, #88]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	4313      	orrs	r3, r2
 8001748:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b00      	cmp	r3, #0
 8001754:	d009      	beq.n	800176a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001756:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	490e      	ldr	r1, [pc, #56]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001766:	4313      	orrs	r3, r2
 8001768:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800176a:	f000 f821 	bl	80017b0 <HAL_RCC_GetSysClockFreq>
 800176e:	4602      	mov	r2, r0
 8001770:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	490a      	ldr	r1, [pc, #40]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c8>)
 800177c:	5ccb      	ldrb	r3, [r1, r3]
 800177e:	fa22 f303 	lsr.w	r3, r2, r3
 8001782:	4a09      	ldr	r2, [pc, #36]	@ (80017a8 <HAL_RCC_ClockConfig+0x1cc>)
 8001784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <HAL_RCC_ClockConfig+0x1d0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff f99c 	bl	8000ac8 <HAL_InitTick>

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40022000 	.word	0x40022000
 80017a0:	40021000 	.word	0x40021000
 80017a4:	080020bc 	.word	0x080020bc
 80017a8:	200000ac 	.word	0x200000ac
 80017ac:	200000b0 	.word	0x200000b0

080017b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x94>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d002      	beq.n	80017e0 <HAL_RCC_GetSysClockFreq+0x30>
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_GetSysClockFreq+0x36>
 80017de:	e027      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017e0:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x98>)
 80017e2:	613b      	str	r3, [r7, #16]
      break;
 80017e4:	e027      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	0c9b      	lsrs	r3, r3, #18
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	4a17      	ldr	r2, [pc, #92]	@ (800184c <HAL_RCC_GetSysClockFreq+0x9c>)
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d010      	beq.n	8001820 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017fe:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <HAL_RCC_GetSysClockFreq+0x94>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	0c5b      	lsrs	r3, r3, #17
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	4a11      	ldr	r2, [pc, #68]	@ (8001850 <HAL_RCC_GetSysClockFreq+0xa0>)
 800180a:	5cd3      	ldrb	r3, [r2, r3]
 800180c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a0d      	ldr	r2, [pc, #52]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x98>)
 8001812:	fb03 f202 	mul.w	r2, r3, r2
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	fbb2 f3f3 	udiv	r3, r2, r3
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	e004      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a0c      	ldr	r2, [pc, #48]	@ (8001854 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001824:	fb02 f303 	mul.w	r3, r2, r3
 8001828:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	613b      	str	r3, [r7, #16]
      break;
 800182e:	e002      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x98>)
 8001832:	613b      	str	r3, [r7, #16]
      break;
 8001834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001836:	693b      	ldr	r3, [r7, #16]
}
 8001838:	4618      	mov	r0, r3
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000
 8001848:	007a1200 	.word	0x007a1200
 800184c:	080020cc 	.word	0x080020cc
 8001850:	080020dc 	.word	0x080020dc
 8001854:	003d0900 	.word	0x003d0900

08001858 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <RCC_Delay+0x34>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0a      	ldr	r2, [pc, #40]	@ (8001890 <RCC_Delay+0x38>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	0a5b      	lsrs	r3, r3, #9
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001874:	bf00      	nop
  }
  while (Delay --);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1e5a      	subs	r2, r3, #1
 800187a:	60fa      	str	r2, [r7, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f9      	bne.n	8001874 <RCC_Delay+0x1c>
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	200000ac 	.word	0x200000ac
 8001890:	10624dd3 	.word	0x10624dd3

08001894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e041      	b.n	800192a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d106      	bne.n	80018c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff f868 	bl	8000990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3304      	adds	r3, #4
 80018d0:	4619      	mov	r1, r3
 80018d2:	4610      	mov	r0, r2
 80018d4:	f000 fa56 	bl	8001d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d001      	beq.n	800194c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e035      	b.n	80019b8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2202      	movs	r2, #2
 8001950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0201 	orr.w	r2, r2, #1
 8001962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a16      	ldr	r2, [pc, #88]	@ (80019c4 <HAL_TIM_Base_Start_IT+0x90>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d009      	beq.n	8001982 <HAL_TIM_Base_Start_IT+0x4e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001976:	d004      	beq.n	8001982 <HAL_TIM_Base_Start_IT+0x4e>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a12      	ldr	r2, [pc, #72]	@ (80019c8 <HAL_TIM_Base_Start_IT+0x94>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d111      	bne.n	80019a6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b06      	cmp	r3, #6
 8001992:	d010      	beq.n	80019b6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0201 	orr.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019a4:	e007      	b.n	80019b6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f042 0201 	orr.w	r2, r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40012c00 	.word	0x40012c00
 80019c8:	40000400 	.word	0x40000400

080019cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d020      	beq.n	8001a30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d01b      	beq.n	8001a30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f06f 0202 	mvn.w	r2, #2
 8001a00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f998 	bl	8001d4c <HAL_TIM_IC_CaptureCallback>
 8001a1c:	e005      	b.n	8001a2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f98b 	bl	8001d3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f99a 	bl	8001d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d020      	beq.n	8001a7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01b      	beq.n	8001a7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f06f 0204 	mvn.w	r2, #4
 8001a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2202      	movs	r2, #2
 8001a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f972 	bl	8001d4c <HAL_TIM_IC_CaptureCallback>
 8001a68:	e005      	b.n	8001a76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f965 	bl	8001d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f974 	bl	8001d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d020      	beq.n	8001ac8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d01b      	beq.n	8001ac8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f06f 0208 	mvn.w	r2, #8
 8001a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f94c 	bl	8001d4c <HAL_TIM_IC_CaptureCallback>
 8001ab4:	e005      	b.n	8001ac2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f93f 	bl	8001d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f94e 	bl	8001d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d020      	beq.n	8001b14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d01b      	beq.n	8001b14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f06f 0210 	mvn.w	r2, #16
 8001ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2208      	movs	r2, #8
 8001aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f926 	bl	8001d4c <HAL_TIM_IC_CaptureCallback>
 8001b00:	e005      	b.n	8001b0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f919 	bl	8001d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f928 	bl	8001d5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00c      	beq.n	8001b38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f06f 0201 	mvn.w	r2, #1
 8001b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7fe feea 	bl	800090c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00c      	beq.n	8001b5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d007      	beq.n	8001b5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 fa6f 	bl	800203a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00c      	beq.n	8001b80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d007      	beq.n	8001b80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f8f8 	bl	8001d70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	f003 0320 	and.w	r3, r3, #32
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00c      	beq.n	8001ba4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f003 0320 	and.w	r3, r3, #32
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d007      	beq.n	8001ba4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0220 	mvn.w	r2, #32
 8001b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 fa42 	bl	8002028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_TIM_ConfigClockSource+0x1c>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e0b4      	b.n	8001d32 <HAL_TIM_ConfigClockSource+0x186>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001bee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c00:	d03e      	beq.n	8001c80 <HAL_TIM_ConfigClockSource+0xd4>
 8001c02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c06:	f200 8087 	bhi.w	8001d18 <HAL_TIM_ConfigClockSource+0x16c>
 8001c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c0e:	f000 8086 	beq.w	8001d1e <HAL_TIM_ConfigClockSource+0x172>
 8001c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c16:	d87f      	bhi.n	8001d18 <HAL_TIM_ConfigClockSource+0x16c>
 8001c18:	2b70      	cmp	r3, #112	@ 0x70
 8001c1a:	d01a      	beq.n	8001c52 <HAL_TIM_ConfigClockSource+0xa6>
 8001c1c:	2b70      	cmp	r3, #112	@ 0x70
 8001c1e:	d87b      	bhi.n	8001d18 <HAL_TIM_ConfigClockSource+0x16c>
 8001c20:	2b60      	cmp	r3, #96	@ 0x60
 8001c22:	d050      	beq.n	8001cc6 <HAL_TIM_ConfigClockSource+0x11a>
 8001c24:	2b60      	cmp	r3, #96	@ 0x60
 8001c26:	d877      	bhi.n	8001d18 <HAL_TIM_ConfigClockSource+0x16c>
 8001c28:	2b50      	cmp	r3, #80	@ 0x50
 8001c2a:	d03c      	beq.n	8001ca6 <HAL_TIM_ConfigClockSource+0xfa>
 8001c2c:	2b50      	cmp	r3, #80	@ 0x50
 8001c2e:	d873      	bhi.n	8001d18 <HAL_TIM_ConfigClockSource+0x16c>
 8001c30:	2b40      	cmp	r3, #64	@ 0x40
 8001c32:	d058      	beq.n	8001ce6 <HAL_TIM_ConfigClockSource+0x13a>
 8001c34:	2b40      	cmp	r3, #64	@ 0x40
 8001c36:	d86f      	bhi.n	8001d18 <HAL_TIM_ConfigClockSource+0x16c>
 8001c38:	2b30      	cmp	r3, #48	@ 0x30
 8001c3a:	d064      	beq.n	8001d06 <HAL_TIM_ConfigClockSource+0x15a>
 8001c3c:	2b30      	cmp	r3, #48	@ 0x30
 8001c3e:	d86b      	bhi.n	8001d18 <HAL_TIM_ConfigClockSource+0x16c>
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	d060      	beq.n	8001d06 <HAL_TIM_ConfigClockSource+0x15a>
 8001c44:	2b20      	cmp	r3, #32
 8001c46:	d867      	bhi.n	8001d18 <HAL_TIM_ConfigClockSource+0x16c>
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d05c      	beq.n	8001d06 <HAL_TIM_ConfigClockSource+0x15a>
 8001c4c:	2b10      	cmp	r3, #16
 8001c4e:	d05a      	beq.n	8001d06 <HAL_TIM_ConfigClockSource+0x15a>
 8001c50:	e062      	b.n	8001d18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c62:	f000 f96a 	bl	8001f3a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001c74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	609a      	str	r2, [r3, #8]
      break;
 8001c7e:	e04f      	b.n	8001d20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c90:	f000 f953 	bl	8001f3a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ca2:	609a      	str	r2, [r3, #8]
      break;
 8001ca4:	e03c      	b.n	8001d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f000 f8ca 	bl	8001e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2150      	movs	r1, #80	@ 0x50
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f921 	bl	8001f06 <TIM_ITRx_SetConfig>
      break;
 8001cc4:	e02c      	b.n	8001d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f000 f8e8 	bl	8001ea8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2160      	movs	r1, #96	@ 0x60
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f911 	bl	8001f06 <TIM_ITRx_SetConfig>
      break;
 8001ce4:	e01c      	b.n	8001d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f000 f8aa 	bl	8001e4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2140      	movs	r1, #64	@ 0x40
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f901 	bl	8001f06 <TIM_ITRx_SetConfig>
      break;
 8001d04:	e00c      	b.n	8001d20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4610      	mov	r0, r2
 8001d12:	f000 f8f8 	bl	8001f06 <TIM_ITRx_SetConfig>
      break;
 8001d16:	e003      	b.n	8001d20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d1c:	e000      	b.n	8001d20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001d1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr

08001d5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
	...

08001d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a2b      	ldr	r2, [pc, #172]	@ (8001e44 <TIM_Base_SetConfig+0xc0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d007      	beq.n	8001dac <TIM_Base_SetConfig+0x28>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001da2:	d003      	beq.n	8001dac <TIM_Base_SetConfig+0x28>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a28      	ldr	r2, [pc, #160]	@ (8001e48 <TIM_Base_SetConfig+0xc4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d108      	bne.n	8001dbe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a20      	ldr	r2, [pc, #128]	@ (8001e44 <TIM_Base_SetConfig+0xc0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d007      	beq.n	8001dd6 <TIM_Base_SetConfig+0x52>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dcc:	d003      	beq.n	8001dd6 <TIM_Base_SetConfig+0x52>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e48 <TIM_Base_SetConfig+0xc4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d108      	bne.n	8001de8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8001e44 <TIM_Base_SetConfig+0xc0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d103      	bne.n	8001e1c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d005      	beq.n	8001e3a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f023 0201 	bic.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	611a      	str	r2, [r3, #16]
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	40012c00 	.word	0x40012c00
 8001e48:	40000400 	.word	0x40000400

08001e4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	f023 0201 	bic.w	r2, r3, #1
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f023 030a 	bic.w	r3, r3, #10
 8001e88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	621a      	str	r2, [r3, #32]
}
 8001e9e:	bf00      	nop
 8001ea0:	371c      	adds	r7, #28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b087      	sub	sp, #28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	f023 0210 	bic.w	r2, r3, #16
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	031b      	lsls	r3, r3, #12
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001ee4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	621a      	str	r2, [r3, #32]
}
 8001efc:	bf00      	nop
 8001efe:	371c      	adds	r7, #28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b085      	sub	sp, #20
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	f043 0307 	orr.w	r3, r3, #7
 8001f28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	609a      	str	r2, [r3, #8]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b087      	sub	sp, #28
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	021a      	lsls	r2, r3, #8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	609a      	str	r2, [r3, #8]
}
 8001f6e:	bf00      	nop
 8001f70:	371c      	adds	r7, #28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d101      	bne.n	8001f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e041      	b.n	8002014 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a14      	ldr	r2, [pc, #80]	@ (8002020 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d009      	beq.n	8001fe8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fdc:	d004      	beq.n	8001fe8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a10      	ldr	r2, [pc, #64]	@ (8002024 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d10c      	bne.n	8002002 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40012c00 	.word	0x40012c00
 8002024:	40000400 	.word	0x40000400

08002028 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <memset>:
 800204c:	4603      	mov	r3, r0
 800204e:	4402      	add	r2, r0
 8002050:	4293      	cmp	r3, r2
 8002052:	d100      	bne.n	8002056 <memset+0xa>
 8002054:	4770      	bx	lr
 8002056:	f803 1b01 	strb.w	r1, [r3], #1
 800205a:	e7f9      	b.n	8002050 <memset+0x4>

0800205c <__libc_init_array>:
 800205c:	b570      	push	{r4, r5, r6, lr}
 800205e:	2600      	movs	r6, #0
 8002060:	4d0c      	ldr	r5, [pc, #48]	@ (8002094 <__libc_init_array+0x38>)
 8002062:	4c0d      	ldr	r4, [pc, #52]	@ (8002098 <__libc_init_array+0x3c>)
 8002064:	1b64      	subs	r4, r4, r5
 8002066:	10a4      	asrs	r4, r4, #2
 8002068:	42a6      	cmp	r6, r4
 800206a:	d109      	bne.n	8002080 <__libc_init_array+0x24>
 800206c:	f000 f81a 	bl	80020a4 <_init>
 8002070:	2600      	movs	r6, #0
 8002072:	4d0a      	ldr	r5, [pc, #40]	@ (800209c <__libc_init_array+0x40>)
 8002074:	4c0a      	ldr	r4, [pc, #40]	@ (80020a0 <__libc_init_array+0x44>)
 8002076:	1b64      	subs	r4, r4, r5
 8002078:	10a4      	asrs	r4, r4, #2
 800207a:	42a6      	cmp	r6, r4
 800207c:	d105      	bne.n	800208a <__libc_init_array+0x2e>
 800207e:	bd70      	pop	{r4, r5, r6, pc}
 8002080:	f855 3b04 	ldr.w	r3, [r5], #4
 8002084:	4798      	blx	r3
 8002086:	3601      	adds	r6, #1
 8002088:	e7ee      	b.n	8002068 <__libc_init_array+0xc>
 800208a:	f855 3b04 	ldr.w	r3, [r5], #4
 800208e:	4798      	blx	r3
 8002090:	3601      	adds	r6, #1
 8002092:	e7f2      	b.n	800207a <__libc_init_array+0x1e>
 8002094:	080020e0 	.word	0x080020e0
 8002098:	080020e0 	.word	0x080020e0
 800209c:	080020e0 	.word	0x080020e0
 80020a0:	080020e4 	.word	0x080020e4

080020a4 <_init>:
 80020a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020a6:	bf00      	nop
 80020a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020aa:	bc08      	pop	{r3}
 80020ac:	469e      	mov	lr, r3
 80020ae:	4770      	bx	lr

080020b0 <_fini>:
 80020b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b2:	bf00      	nop
 80020b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020b6:	bc08      	pop	{r3}
 80020b8:	469e      	mov	lr, r3
 80020ba:	4770      	bx	lr
